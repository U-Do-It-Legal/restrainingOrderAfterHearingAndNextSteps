metadata:
  title: |
    Restraining Order After Hearing and Next Steps
  short title: |
    Restraining Order After Hearing and Next Steps
  description: |
     Restraining Order After Hearing and Next Steps.
  authors:
    - name: Kelly D. Crabtree
      organization: U Do It Legal
    - name: Ryan E. Stearns
      organization: U Do It Legal
      revision_date: 2022-05-16
      require privileges: [dvro-p1, admin]
  required privileges for listing: [dvro-p1, admin]
  sessions are unique: True
  hidden: True
---
modules:
  - docassemble.base.util
  - docassemble.ALToolbox.misc
  - .ThreePartsDate
  - .PhoneNumberDataType
---
features:
  labels above fields: True
  navigation: True
  navbar: True
  progress bar: True
  javascript:
    - intlTelInput-jquery.min.js
    - intlTelInput-jquery.js
    - intlTelInput.js
    - phone-number-validation.js
  css:
    - docassemble.ALToolbox:collapse_template.css
    - intlTelInput.min.css
    - phone-number-validator.css
    - custom.css
---
include:
  - docassemble.ALToolbox:escape_button.yml
  - docassemble.ALToolbox:phone-number-validation.yml
---
imports:
  - statistics
---
code: |
  from itertools import chain
  from docassemble.base.functions import alpha, roman, item_label, comma_and_list, get_language, set_language, get_dialect, set_country, get_country, word, comma_list, ordinal, ordinal_number, need, nice_number, quantity_noun, possessify, verb_past, verb_present, noun_plural, noun_singular, space_to_underscore, force_ask, force_gather, period_list, name_suffix, currency, indefinite_article, nodoublequote, capitalize, title_case, url_of, do_you, did_you, does_a_b, did_a_b, your, her, his, is_word, get_locale, set_locale, process_action, url_action, get_info, set_info, get_config, prevent_going_back, qr_code, action_menu_item, from_b64_json, defined, value, message, response, json_response, command, single_paragraph, quote_paragraphs, location_returned, location_known, user_lat_lon, interview_url, interview_url_action, interview_url_as_qr, interview_url_action_as_qr, interview_email, get_emails, get_default_timezone, user_logged_in, interface, user_privileges, user_has_privilege, user_info, action_arguments, action_argument, background_action, background_response, background_response_action, background_error_action, us, set_live_help_status, chat_partners_available, phone_number_in_e164, phone_number_formatted, phone_number_is_valid, countries_list, country_name, write_record, read_records, delete_record, variables_as_json, all_variables, language_from_browser, device, plain, bold, italic, states_list, state_name, subdivision_type, indent, raw, fix_punctuation, set_progress, get_progress, referring_url, undefine, invalidate, dispatch, yesno, noyes, split, showif, showifdef, phone_number_part, set_parts, log, encode_name, decode_name, interview_list, interview_menu, server_capabilities, session_tags, get_chat_log, get_user_list, get_user_info, set_user_info, get_user_secret, create_user, create_session, get_session_variables, set_session_variables, get_question_data, go_back_in_session, manage_privileges, redact, forget_result_of, re_run_logic, reconsider, set_title, set_save_status, single_to_double_newlines, verbatim, add_separators, store_variables_snapshot, update_terms
  from docassemble.base.util import LatitudeLongitude, RoleChangeTracker, Name, IndividualName, Address, City, Event, Person, Thing, Individual, ChildList, FinancialList, PeriodicFinancialList, Income, Asset, Expense, Value, PeriodicValue, OfficeList, Organization, send_email, send_sms, send_fax, map_of, last_access_time, last_access_delta, last_access_days, last_access_hours, last_access_minutes, returning_user, timezone_list, as_datetime, current_datetime, date_difference, date_interval, today, month_of, day_of, dow_of, year_of, format_date, format_datetime, format_time, DARedis, DACloudStorage, DAGoogleAPI, SimpleTextMachineLearner, ocr_file, ocr_file_in_background, read_qr, get_sms_session, initiate_sms_session, terminate_sms_session, path_and_mimetype, run_python_module, pdf_concatenate, include_docx_template, start_time, zip_file, validation_error, DAValidationError, action_button_html, url_ask, overlay_pdf, DAStore, explain, clear_explanations, explanation, set_status, get_status, DAWeb, DAWebError, json, re, iso_country, assemble_docx, docx_concatenate, task_performed, task_not_yet_performed, mark_task_as_performed, times_task_performed, set_task_counter, stash_data, retrieve_stashed_data, DABreadCrumbs, DAOAuth, DAObject, DAList, DADict, DAOrderedDict, DASet, DAFile, DAFileCollection, DAFileList, DAStaticFile, DAEmail, DAEmailRecipient, DAEmailRecipientList, DATemplate, DAEmpty, DALink, selections, objects_from_file, RelationshipTree, DAContext
---
objects:
  - court: Thing
  - court.address: Address
  - pet: Individual
  - pet.address: Address
  - resp: Individual
  - children: DAList.using(ask_number=True, object_type=Individual)
  - otherchildren: DAList.using(ask_number=True, object_type=Individual)
  - other: Individual
  - parties: DAList.using(auto_gather=False)
  - otherparties: DAList.using(auto_gather=False)
  - otherparent: Thing
  - custodialparty: Thing
  - noncustodialparty: Thing
  - mom: Individual
  - dad: Individual
  - incomesources: DAList.using(ask_number=True, object_type=Thing)
  - householdmembers: DAList.using(ask_number=True, object_type=Individual)
  - deductions: DAList.using(ask_number=True, object_type=Thing)
  - othermonthlyexpenses: DAList.using(ask_number=True, object_type=Thing)
  - installmentpaymentsanddebts: DAList.using(object_type=Thing)
  - additionalholidays: DAList.using(object_type=Thing)
  - realestate: DAList.using(object_type=Thing)
  - furniture: DAList.using(object_type=Thing)
  - collectibles: DAList.using(object_type=Thing)
  - vehicles: DAList.using(object_type=Thing)
  - savingsaccounts: DAList.using(object_type=Thing)
  - checkingaccounts: DAList.using(object_type=Thing)
  - creditunion: DAList.using(object_type=Thing)
  - cash: DAList.using(object_type=Thing)
  - taxrefund: DAList.using(object_type=Thing)
  - lifeinsurance: DAList.using(object_type=Thing)
  - brokerageaccounts: DAList.using(object_type=Thing)
  - retirementplans: DAList.using(object_type=Thing)
  - profitsharingplans: DAList.using(object_type=Thing)
  - moneyowed: DAList.using(object_type=Thing)
  - businesses: DAList.using(object_type=Thing)
  - otherassets: DAList.using(object_type=Thing)
  - studentloans: DAList.using(object_type=Thing)
  - taxes: DAList.using(object_type=Thing)
  - arrearages: DAList.using(object_type=Thing)
  - unsecuredloans: DAList.using(object_type=Thing)
  - creditcards: DAList.using(object_type=Thing)
  - otherdebts: DAList.using(object_type=Thing)
  - debtsandliens: DAList.using(object_type=Thing)
  - householdmembers: DAList.using(ask_number=True, object_type=Individual)
  - posattachments: DAList.using(auto_gather=False)
  - forms: DAList.using(auto_gather=False)
  - paysattorneysfees: Thing
---
sections:
  - yourintro: Introduction
  - yourcaseinfo: Case Information
  - youraboutyou: About You 
  - youraboutresp: About Your Spouse or Domestic Partner 
  - yourmarriage: About Your Marriage or Domestic Partnership
  - yourchildren: Your Children
    subsections: 
    - yourchildcustody: Child Custody
    - yourvisitation: Visitation (Parenting Time)
    - youradditionalprovisions: Additional Provisions
    - yourcs: Child Support
  - yourincomeandemployment: Your Income and Employment
    subsections:
    - youremployment: Employment 
    - youreducation: Education
    - yourtaxes: Taxes
    - yourincome: Income
    - yourexpenses: Expenses
  - yoursupport: Spousal or Domestic Partner Support
  - yourotherorders: Temporary, Ex Parte, and Other Orders
    subsections:
    - yourpropertycontrol: Property Control
    - yourattorneysfees: Attorney's Fees
    - yourrestrainingorders: Restraining Orders
    - yourmiscorders: Other Orders
  - yournextsteps: Next Steps
---
mandatory: True
code: |
  menu_items = [ action_menu_item('Roadmap', 'road_map') ]
---
initial: True
code: |
  if returning_user(minutes=5):
    welcome_back
---
mandatory: true
code: |
  nav.set_section('yourintro')
  welcome_1
  welcome_2
  welcome_3
  
  nav.set_section('yourcaseinfo')
  court.name.text
  amended_form
  
  nav.set_section('youraboutyou')
  pet.name.first
  pet.phone
  pet.address.address
  
  nav.set_section('youraboutresp')
  resp.name.first
  
  nav.set_section('yourmarriage')
  married
  pet_ca_resident
  if not pet_ca_resident and not resp_ca_resident and married:
    dont_meet_residency_requirements_marriage
  if not pet_ca_resident and not resp_ca_resident and domestic_partners and not married and not dp_established_in_ca:
    dont_meet_residency_requirements_dp

  if married:
    date_of_marriage
    long_term_marriage
    
  if domestic_partners:
    date_of_dp
    long_term_dp
  
  irreconcilable_differences
  
  review1
  
  nav.set_section('yourchildren')
  children.there_are_any
  if children.there_are_any:
    children.target_number
    children.gather()
    review2

  if children.there_are_any:
    alleged_abuse
    if children.target_number > 1:
      different_addresses
      if different_addresses:
        child1_street
        if children.target_number >= 2:
          child2_street
        if children.target_number >= 3:
          child3_street
        if children.target_number >= 4:
          child4_street
        if children.target_number >= 5:
          child5_street
        if children.target_number >= 6:
          child6_street
      else:
        childrens_current_street
    custodyvisitation_priorcase_yes
    custodyvisitation_priorrestrainingorders_yes
    otherpeoplewithcustodyrights_exist
  
  nav.set_section('yourchildcustody')
  if children.there_are_any:
    cc_intro
    cc_info1
    cc_info2
    if alleged_abuse:
      cc_info_dv
    custodyvisitation_requesting_orders
    if custodyvisitation_requesting_orders:
      if cc_agreement:
        cc_agreement_info
      for child in children:
        continue_to_legalcustody
        child.type_of_legal_custody
      for child in children:
        continue_to_physicalcustody
        child.type_of_physical_custody
      custody_review
      nav.set_section('yourvisitation')
      for child in children:
        continue_to_visitation
        granted_visitation
        if scheduled_visitation:
          visitation_weekends
        if granted_visitation: 
          supervisedvisitation
          responsibility_for_transportation
          travel_with_children_state
          holiday_schedule
          if holiday_schedule:
            holiday_info
            holiday_start_time
            additionalholidays.there_are_any
            if additionalholidays.there_are_any:
              additionalholidays.gather()
            threeday_weekends
            if vacations: 
              vacations_pet
        nav.set_section('youradditionalprovisions')
        child_abduction_risk
        if child_abduction_risk:
          if custodyvisitation_priorcase_yes:
            flightrisk_violated_custody_orders
          flightrisk_no_ties
          post_a_bond
        if granted_visitation:
          additional_physical_custody_provisions
          if additional_physical_custody_provisions:
            add_physicalcustody_pet
          if child.type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
            joint_legal_custody_provisions
            if joint_legal_custody_provisions: 
              changing_schools
        if custodyvisitation_requesting_orders and not cc_agreement:
          custodyvisitation_requesting_temporary_orders
          if custodyvisitation_requesting_temporary_orders:
            custodyvisitation_requesting_exparte_orders
          if custodyvisitation_requesting_temporary_orders and custodyvisitation_priorcase_yes:
            current_custody_order
          if custodyvisitation_requesting_temporary_orders and not custodyvisitation_requesting_exparte_orders:
            explain_custodyvisitation
          if custodyvisitation_requesting_exparte_orders:
            explain_custodyvisitation_exparte
        custodyvisitation_otherorders
    else:
      cs_intro
  else:
    currently_employed
  
  nav.set_section('yourcs')
  if children.there_are_any:
    cs_intro
    cs_info1
    cs_info2
    cs_info3
    cs_info4
    requesting_childsupport
    if requesting_childsupport:
      cs_previousorder
      cs_agreement
      if cs_agreement:
        cs_agreement_info
      if requesting_childsupport and not cs_agreement:
        cs_documents
        cs_guideline
        childsupport_requesting_temporary_orders
        percent_time_with_pet
        requesting_cs_other
    else:
      childsupport_requesting_temporary_orders=False
    
  nav.set_section('yourincomeandemployment')
  nav.set_section('youremployment')
  currently_employed
  if not currently_employed:
    has_not_been_employed
    if has_not_been_employed:
      pet.education_highschool
    else:
      pet.employer
      pet.education_highschool
  else:
    pet.employer
  nav.set_section('youreducation')
  pet.education_highschool
  nav.set_section('yourtaxes')
  taxes_last_filing_year
  nav.set_section('yourincome')
  resp.gross_monthly_income
  self_employed
  incomesources.there_are_any
  if incomesources.there_are_any:
    incomesources.gather()
    if any(item.type == 'avg_ss' for item in incomesources) or any(item.type == 'avg_disability' for item in incomesources) or any(item.type == 'avg_otherinvestmentincome' for item in incomesources) or any(item.type == 'avg_otherincome' for item in incomesources):
      income_sources_followups
    paystubs_file
  additional_income
  change_in_income
  if currently_employed:
    union_dues
  assets_cash_and_deposit_accounts
  householdmembers.there_are_any
  if householdmembers.there_are_any:
    householdmembers.target_number
    householdmembers.gather()
  nav.set_section('yourexpenses')
  has_mortgage
  installmentpaymentsanddebts.there_are_any
  if installmentpaymentsanddebts.there_are_any:
    installmentpaymentsanddebts.gather()
  totalexpenses
    
  nav.set_section('yoursupport')
  ss_info
  ss_to_pet
  if ss_to_pet or ss_to_resp:
    spousalsupport_requesting_temporary_orders
    if spousalsupport_requesting_temporary_orders:
      ss_amount
      prior_ss_order
      if prior_ss_order:
        prior_ss_order_judgement
        if prior_ss_order_judgement:
          msol
          if ss_to_pet:
            felonyconviction_petsupported
            marketableskills_pet
            earnedincome_pet_known
            hardships_petsupported
          else:
            felonyconviction_respsupported 
            marketableskills_resp
            earnedincome_resp_known_specify
            hardships_respsupported
        else:
          temporary_ss_explanation
      else:
        temporary_ss_explanation
      temporary_ss_explanation
  requesting_ss_other
    
  nav.set_section('yourotherorders')
  nav.set_section('yourpropertycontrol')
  propertycontrol_requesting_temporary_orders
  if propertycontrol_requesting_temporary_orders:
    propertycontrol_property
    if debtsandliens.there_are_any: 
      debtsandliens.gather()
    propertycontrol_requesting_exparte_orders
    explain_propertycontrol
  
  nav.set_section('yourattorneysfees')
  attorneysfees_info1
  attorneysfees_info2
  requesting_attorneysfees
  if requesting_attorneysfees: 
    attorneysfees_understands_cost
    if children.there_are_any:
      if attorneysfees_understands_cost and any(child.otherparent_exists for child in children):
        attorneys_fees_party_resp
    if attorneysfees_understands_cost:
      fees_before_proceeding
      currentcsorder
      payment_sources
      if attorneysfees_understands_cost and not (spousalsupport_requesting_temporary_orders and prior_ss_order_judgement):
        msol
        felonyconviction_petsupported
        marketableskills_pet
        earnedincome_pet_known
        hardships_petsupported
  
  nav.set_section('yourrestrainingorders')
  prior_restrainingorders
  
  nav.set_section('yourmiscorders')
  timeforservice_hearing
  other_exparte_orders
  facts_to_support
  name_restoration
  other_orders
    
  nav.set_section('yournextsteps')
  pet.signature
  filing_info
---
event: welcome_back
question: |
  Welcome back!
subquestion: |
  You are currently in the
  **${ nav.get_section(display=True) }**
  section.

  ${ nav }

  Press "Continue" to pick up
  where you left off.
buttons:
  Continue: continue
---
event: road_map
question: |
  Roadmap
subquestion: |
  You are currently in the
  **${ nav.get_section(display=True) }**
  section.

  ${ nav }

  Press "Continue" to resume the
  interview.
buttons:
  Continue: continue
---
code: |
  if children.there_are_any:
    if any(child.otherparent_exists for child in children):
      otherparent.name.text = other.name
      otherparent.name.first = other.name.first
    else:
      otherparent.name.text = resp.name
      otherparent.name.first = resp.name.first
      other.name = " "
  else:
    otherparent.name.text = " "
    otherparent.name.first = " "
    other.name = " "
---
code: |
  if children.there_are_any:
    if child.type_of_physical_custody == 'solephysicalcustody_to_otherparent' or child.type_of_physical_custody == 'primaryphysicalcustody_to_otherparent':
      custodialparty.name.text = otherparent.name
      custodialparty.name.first = otherparent.name.first
      noncustodialparty.name.text = pet.name
      noncustodialparty.name.first = pet.name.first
    elif child.type_of_physical_custody == 'solephysicalcustody_to_pet' or child.type_of_physical_custody == 'primaryphysicalcustody_to_pet' or child.type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
      custodialparty.name.text = pet.name
      custodialparty.name.first = pet.name.first
      noncustodialparty.name.text = otherparent.name
      noncustodialparty.name.first = otherparent.name.first
---
code: |
  if parentalrelationship_pet_mom:
    mom.name.text = pet
  if parentalrelationship_pet_dad:
    dad.name.text = pet 
---
code: |
  counties_list = ['Alameda', 'Alpine', 'Amador', 'Butte', 'Calaveras', 'Colusa', 'Contra Costa', 'Del Norte', 'El Dorado', 'Fresno', 'Glenn', 'Humboldt', 'Imperial', 'Inyo', 'Kern', 'Kings', 'Lake', 'Lake', 'Los Angeles', 'Madera', 'Marin', 'Mariposa', 'Mendocino', 'Merced', 'Modoc', 'Mono', 'Monterey', 'Napa', 'Nevada', 'Orange', 'Placer', 'Plumas', 'Riverside', 'Sacramento', 'San Benito', 'San Bernardino', 'San Diego', 'San Francisco', 'San Joaquin', 'San Luis Opispo', 'San Mateo', 'Santa Barbara', 'Santa Clara', 'Santa Cruz', 'Shasta', 'Sierra', 'Siskiyou', 'Solano', 'Sonoma', 'Stanislaus', 'Sutter', 'Tehama', 'Toulumne', 'Trinity', 'Tulare', 'Ventura', 'Yolo', 'Yuba']
---
#### start of question blocks
question: |
  Welcome to U Do It Legal's **Divorce Petition** Module
subquestion: |
  This website will help you complete and download your court forms in 3 steps:

  **Step 1.** Answer questions that will fill in your forms for you.
  
  **Step 2.** Preview the completed forms.
  
  **Step 3.** Email the forms to yourself, download them, or view and edit them in your browser.

  Please note that this module can take up to 4 hours to complete and may populate (fill in) up to 24 court forms, depending on your specific situation. This website will automatically save your work, so you may exit and return to this interview to complete it at your own pace. 
continue button field: welcome_1
---
question: |
  **How it Works:** Your Responses Guide the Interview
subquestion: |
  This application will ask you a series of questions that will determine which court forms you need. Not only will your answers be used to fill out these forms, but they will be used to determine which questions you are asked. 
  
  As such, please note that your responses may cause additional questions, instructions, and/or fields on the page to appear or disappear. We do this so that you are not shown information that is not relevant to your case.
  
  *For example, if you indicate that you have no children, any pages about child custody, visitation, or child support will be hidden from your interview.*  
continue button field: welcome_2
---
question: |
  **How it Works:** Our Features and How to Use Them
subquestion: |
  Click on the blue 'Continue' button to continue to the next page and the gray '< Back' button in the top left corner to return to the previous page. However, note that if you return to a previous page, your responses on the current page will not be saved. To avoid this, carefully review your answers before proceeding to the next page. 
  
  Click on the blue help icons [insert help icon] for more information about a question or field. 
  
  Click on the green words in any screen for their definitions. 
  
  In custody and visitation matters, when you are prompted to input a time, you may mannually type in the time, or click the clock icon [insert clock icon] to select the appropriate time from a dropdown menu.
  
  Press 'Continue' to begin answering questions. 
continue button field: welcome_3
---
template: petitioner_explanation
subject: "Who is the **Petitioner?**" 
content: |  
  You are the **Petitioner** if you are the person starting the case, i.e. the first one to file the Petition for Marital Dissolution (form FL-100) with the court. Your spouse or domestic partner will then be the **Respondent**, and he or she will need to file the Response (form FL-120). 
  
  There is no advantage or disadvantage to being the Petitioner versus the Respondent.
---
question: |
  **Petitioner:** What is your name?
subquestion: |
  **Fill in your full legal name. This should match the name written on your Driver's Licence or ID.**  
right: |
  ${collapse_template(petitioner_explanation)}
fields:
  - First name: pet.name.first
  - Middle name: pet.name.middle
    required: False
  - Last name: pet.name.last 
  - Suffix: pet.name.suffix
    required: False
    datatype: combobox
    code: |
      name_suffix()
    help: |
      If applicable, you may type the suffix in the box or click the right-most arrow to select it from a drop-down menu of common suffixes
---
question: |
  **Fill in your information** 
fields:
  - Birthdate: pet.birthdate
    datatype: ThreePartsDate
    label above field: true
  - note: "**Contact Information:**"
  - Phone number: pet.phone
    required: false
    label above field: true
    help: |
      Fill in your phone number in the following format: ###-###-####.
      
      You can use any phone number you'd like, whether it is your cell, work, or home number. This is optional, so you may opt to leave this blank. This number may be used if the court needs to reach you by phone call.
  - Email address: pet.email
    datatype: email 
    required: false
    label above field: true
    help: |
      Fill in your email address here. It may be used if the court attempts to contact you by email. This is also optional, so you may leave it blank if you prefer.
validation code: |
  pet.phone = phone_number_formatted(pet.phone)
---
template: confidentialaddress_explanation
subject: "Can I keep my address confidential?"
content: |
  California mandates that if a party (or his or her children) alleges to be a victim of domestic violence or abuse at the hands of the opposing party, that the victim and his or her children's current address must remain confidential if unknown to the other party. 
  
  If this is true in your case, you may use another address which will allow you to receive mail throughout the case.
---
question: |
  **Your Mailing Address** 
subquestion: |
  **Fill in your mailing address.** You do not have to use your home or business address. You may opt to use a P.O. Box or the address of a friend or family member. However, you should provide an address which will allow you to receive mail throughout the case, whether it is from court, the other party, or someone else involved in your case.
right: |
  ${collapse_template(confidentialaddress_explanation)}
fields:
  - Street address: pet.address.address 
  - Unit/Apartment Number: pet.address.unit
    required: false
  - City: pet.address.city
  - State: pet.address.state
    code: states_list()
  - County: pet.address.county
    code: counties_list
  - Zip: pet.address.zip
---
question: |
  **Respondent's Name:** Who is the other party in this case?
subquestion: |
  **Fill in your spouse's/partner's full legal name.**
fields:
  - First name: resp.name.first
  - Middle name: resp.name.middle
    required: false
  - Last name: resp.name.last
  - Suffix: resp.name.suffix
    required: False
    datatype: combobox
    code: |
      name_suffix()
    help: |
      If applicable, you may type the suffix in the box or click the right-most arrow to select it from a drop-down menu of common suffixes
  - Birthdate: resp.birthdate
    datatype: ThreePartsDate    
---
template: amending_petition_explanation
subject: 'What do we mean by "amending a previously filed Petition?"'
content: |
  If you haven't filed (submitted) any paperwork with the court on your divorce, select 'No.'
      
  If you have already filed (submitted) paperwork with the court, and you are now changing information previously submitted by you, select 'Yes.'
---
question: |
  **Are you amending a previously filed Petition?** 
right: |
  ${collapse_template(amending_petition_explanation)}
fields:
  - Have you previously filed a Petition in this case?: amended_form
    datatype: yesnoradio
    label above field: True
  - Fill in your Case Number: case_number
    show if: amended_form
  - Upload a copy of your prior Petition: prior_petition_file
    datatype: file
    required: false
    show if: amended_form
---
template: dp_explanation
subject: 'Differences between Domestic Partnerships and Marriages'
content: |
  While California generally treats registered domestic partners and married couples equally in terms of rights and responsibilities, the federal government does not always treat registered domestic partners the same as spouses for legal or tax purposes. (Excerpt taken from the California Secretrary of State's Office)
  
  **In short, marriages are not the same as domestic partnerships.**
---
question: |
  **Your Legal Relationship to ${resp}**
right: |
  ${collapse_template(dp_explanation)}
fields: 
  - Are you and ${resp} married?: married
    datatype: yesnoradio
  - Are you and ${resp} registered domestic partners?: domestic_partners
    datatype: yesnoradio
  - Was your Domestic Partnership with ${ resp } established in California?: dp_established_in_ca
    datatype: yesnoradio
    show if: domestic_partners
---
template: dom_explanation
subject: |
  What does "Date of Separation" mean?
content: |
  In California, the date of separation is defined as “a complete and final break in the marital relationship . . ., as evidenced by both of the following: (1) The spouse has expressed to the other spouse his or her intent to end the marriage. (2) The conduct of the spouse is consistent with his or her intent to end the marriage" [Family Code, section 70](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=70.&lawCode=FAM) 
      
  In other words, the date of separation is the date on which it was clearly communicated between you and your spouse, through any form of communication and/or actions between you and your spouse, and after any attempts to reconcile your marriage, that the marriage is over and cannot be saved.
---
question: |
  **Statistical Facts**
subquestion: |
  Fill in the following questions regarding the length of your Marriage 
right: |
  ${ collapse_template(dom_explanation) }
fields:
  - Date of Marriage: date_of_marriage
    datatype: ThreePartsDate
    help: "Fill in the date listed on your certificate of marriage"
  - Date of Separation: date_of_separation_marriage
    datatype: ThreePartsDate
---
code: |
  as_datetime(date_of_marriage)
  as_datetime(date_of_separation_marriage)
---
code: |
  marriage_length = date_difference(starting=date_of_marriage, ending=date_of_separation_marriage)
---
question: |
  **Statistical Facts**
subquestion: |
  Based on your answers, you and ${resp} were married ${marriage_length.describe(nice=False)} until separating. If this is incorrect, please press 'Back' and fill in the correct dates. 
fields: 
  - Check here if you and ${resp} were married for 10 years or longer: long_term_marriage
    datatype: yesnowide
---
template: dodp_explanation
subject: |
  Date of Separation Explanation
content: |
  In California, the date of separation is defined as “a complete and final break in the marital relationship [or domestic partnership] . . ., as evidenced by both of the following: (1) The [domestic partner] has expressed to the other [domestic partner] his or her intent to end the [or domestic partnership]. (2) The conduct of the [domestic partner] is consistent with his or her intent to end the [domestic partnership]" [Family Code, section 70](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=70.&lawCode=FAM) 
      
  In other words, the date of separation is the date on which it was clearly communicated between you and your partner, through any form of communication and/or actions between you and your partner, and after any attempts to reconcile your marriage, that the domestic partnership is over and cannot be saved.
---
question: |
  **Statistical Facts**
subquestion: |
  Fill in the following questions regarding the length of your Domestic Partnership.
under: |
  ${collapse_template(dodp_explanation)} 
fields: 
  - Registration date of domestic partnership with the California Secretary of State or other state equivalent: date_of_dp
    datatype: ThreePartsDate
  - Date of Separation: date_of_separation_dp
    datatype: ThreePartsDate    
---
code: |
  dp_length = date_difference(starting=date_of_dp, ending=date_of_separation_dp)
---
question: |
  **Statistical Facts**
subquestion: |
  Based on your answers, you and ${resp} were domestic partners for ${marriage_length.describe(nice=False)} until separating. If this is incorrect, please press 'Back' and fill in the correct dates. 
fields: 
  - Check here if you and ${resp} have been domestic partners for 10 years or longer: long_term_dp
    datatype: yesnowide
---
question: |
  **Your Case Information:** Identify Your Court
subquestion: |
  Fill in the following information about the Court where you will be filing your paperwork. If you do not know which court to file in, please find your court [here](https://www.courts.ca.gov/find-my-court.htm). If you live in or plan on filing your divorce in Los Angeles County, please find your court [here](http://www.lacourt.org/filinglocatornet/ui/filingsearch.aspx). If you are researching where to file using our hyperlinks, you will need to write down the name and address of the court so that you may fill in the questions below. 
fields: 
  - Court name: court.name.text
  - County: court.address.county
    code: counties_list
  - note: |
      Fill in the court's address below:
  - Street Address: court.address.address 
  - Mailing Address: court.address.mailing
  - City: court.address.city
  - State: court.address.state
    code: states_list()
  - Zip code: court.address.zip
---
question: |
  **Residency Requirements**
fields: 
  - Have you been a resident of California for at least **six (6) months** and of ${ court.address.county } for at least **three (3) months**?: pet_ca_resident
    datatype: yesnoradio
    label above field: true
  - Has ${ resp } been a resident of California for at least **six (6) months** and of ${ court.address.county } for at least **three (3) months**?: resp_ca_resident
    datatype: yesnoradio 
    label above field: true
---
code: |
  if pet_ca_resident or resp_ca_resident:
    proceed_with_legal_separation=False
---
question: |
  **Residency Requirements:** Marriages
subquestion: |
  For married persons to qualify for a divorce in California, you MUST meet California’s residency requirements. Specifically, either you or ${resp.name.first} must have lived in:

  - California for the last 6 months, AND
  - The county where you plan to file the divorce for the last 3 months.

  If you and ${resp.name.first} have lived in California for at least 6 months but in different counties for at least 3 months, you can file in either county.

  **Because you indicated that you do not meet the court's residency requirements, you can still file for a legal separation at this time. Once enough time has passed so that you meet the residency requirement for a divorce, you may file an “amended petition” and ask the court for a divorce.** 
  
  **You may also continue filling out your divorce paperwork at this time and simply wait to file.**
  
  **If you attempt to file for divorce without meeting the court's residency requirements, your paperwork will be rejected by the court clerk.**
fields: 
  - I understand that I cannot file for divorce in California until either myself or my spouse meet the state's residency requirements.: dont_meet_residency_requirements_marriage
    datatype: yesno
    minlength: 1
---
question: |
  **Residency Requirements:** Domestic Partnerships
subquestion: |
  For domestic partners to get a divorce:

  If your domestic partnership is registered in California, you have automatically qualified to have your domestic partnership dissolved/ended in a California court— even if you move away or have never lived in California. So the residency requirements pertaining to married couples do not pertain to you. 

  If your domestic partnership was NOT registered in California, in order to dissolve/end your domestic partnership in California, you or your domestic partner must have lived in:

  - California for the last 6 months, AND
  - The county where you plan to file the divorce for the last 3 months.

  **You indicated that you and your domestic partner do not satisfy the court's residency requirements for dissolving/ending a domestic partnership in California.** If you do not live in California, when you file to end your domestic partnership in California, the court may not be able to make orders about other issues like property and debts, partner support, or your children. If this is your situation, you may need to talk to a lawyer with experience in domestic partnership laws before proceeding.
fields: 
  - I understand that I cannot file for divorce in California until either myself or my domestic partner meet the state's residency requirements.: dont_meet_residency_requirements_dp
    datatype: yesno
    minlength: 1
---
question: |
  **Requesting Orders:** Name Restoration
fields: 
  - Do you want your former name to be restored? (*if applicable*): name_restoration
    datatype: yesnoradio
  - Former name to be restored (DOUBLE CHECK YOUR SPELLING): name_restoration_name
    show if: name_restoration
---
question: |
  What are the **Legal Grounds** for your Divorce?
subquestion: |
  % if married:
  California is a “no fault” divorce state, which means that the spouse that is asking for the divorce does not have to prove that the other spouse did something wrong. In other words, a no-fault divorce means that the spouses do not get along, which is also known as "irreconcilable diffrences."
  
  In California, in addition to irreconcilable differences, the only other legal grounds for divorce are a party's "permanent legal incapacity to make decisions," which may only be used as a legal basis for your divorce with proof that a party permanently lacks the legal capacity to make decisions.
  % elif domestic_partners and not married:
  California is a “no fault” divorce state, which means that the domestic partner that is asking for the divorce does not have to prove that the other domestic partner did something wrong. In other words, a no-fault divorce means that the partners do not get along, which is also known as "irreconcilable diffrences." 
  
  In California, the only other legal grounds for divorce are a party's "permanent legal incapacity to make decisions," which may only be used as a legal basis for your divorce with proof that a party permanently lacks the legal capacity to make decisions.
  % endif
fields: 
  - Are you seeking a divorce on the grounds of **irreconcilable differences?**: irreconcilable_differences
    datatype: yesnoradio
    label above field: true
  - note: "**Please note that by selecting 'No', you are indicating that the legal basis for your divorce is ${resp}'s permanent legal incapacity to make decisions.**"
    show if: 
      variable: irreconcilable_differences
      is: False
  - note: "**If this is the case, you must provide proof of ${ resp }'s permanent legal incapacity to make decisions, such as competent medical and/or psychiatric testimony from a licensed professional.**" 
    show if: 
      variable: irreconcilable_differences
      is: False
---
#### first review screen
mandatory : true
question: "Please review your answers below."
review: 
  - Change answer: pet.name.first
    button: "Your Name: **${pet.name.full()}**"
  - Change Answer: pet.birthdate
    button: "Your Birthdate: **${pet.birthdate}**"
  - Change Answer: pet.birthdate
    button: "Your Age: **${pet.age_in_years()}**"
  - Change answer: pet.address.address
    button: "Your Mailing Address: **${pet.address.on_one_line()}**"
  - Change answer: pet.phone
    button: "Your Phone Number: **${pet.phone}**"
  - Change answer: pet.email
    button: "Your Email: **${pet.email}**"
    
  - Change answer: resp.name.first
    button: |
      % if married:
      Your Spouse's Name: **${resp.name.full()}**
      % elif domestic_partners and not married:
      Your Domestic Partner's Name: **${resp.name.full()}**
      % else:
      Your Spouse's Name: **${resp.name.full()}**
      % endif
  - Change Answer: resp.birthdate
    button: "${resp.name.first}'s Birthdate: **${resp.birthdate}**"
  - Change Answer: resp.birthdate
    button: "${resp.name.first}'s Age: **${resp.age_in_years()}**"
    
  - Change Answer: married
    button: |
      Your and ${resp.name.first}'s Legal Relationship:
      % if married:
      **Married**
      % elif domestic_partners and not married:
      **Registered Domestic Partners**
      % elif married and domestic_partners:
      **Married and Registered Domestic Partners**
      % endif
  - Change answer: date_of_marriage
    button: "Date of Marriage: **${date_of_marriage}**"
    show if: married
  - Change answer: date_of_separation_marriage
    button: "Date of Separation: **${date_of_separation_marriage}**"
    show if: married
  - Change answer: date_of_marriage
    button: "Length of Marriage: **${marriage_length.describe(nice=False)}**"
    show if: married
  - Change answer: long_term_marriage
    button: "Are you and ${resp} in a Long-Term Marriage (10+ years): **${yesno(long_term_marriage)}**"
    show if: married
    
  - Change answer: date_of_dp
    button: "Domestic Partnership Registration Date: **${date_of_dp}**"
    show if: domestic_partners
  - Change answer: date_of_separation_dp
    button: "Date of Separation: **${date_of_separation_dp}**"
    show if: domestic_partners
  - Change answer: date_of_dp
    button: "Length of Domestic Partnership: **${dp_length.describe(nice=False)}**"
    show if: domestic_partners
  - Change answer: long_term_dp
    button: "Are you and ${resp} in a Long-Term Domestic Partnership (10+ years): **${yesno(long_term_dp)}**"
    show if: domestic_partners
  - Change answer: irreconcilable_differences
    button: |
      Legal grounds for your divorce: 
      % if irreconcilable_differences:
      **Irreconcilable Differences**
      % else:
      **${resp}'s Permanent Legal Incapacity to make decisions**
      % endif
  - Change answer: pet_ca_resident
    button: |
      Do you and ${resp.name.first} currently meet the state's residency requirements for filing for divorce in California? 
      % if pet_ca_resident or resp_ca_resident:
      **Yes**
      % else:
      **No**
      % endif
  - Change Answer: court.name.text
    button: "Court Name: **${court}**"
  - Change Answer: court.address.county
    button: "Court County: **${court.address.county}**"
  - Change Answer: court.address.address
    button: "Court Address: **${court.address.on_one_line()}**"
  - Change Answer: court.address.mailing
    button: "Court Mailing Address: **${court.address.mailing}, ${court.address.city}, ${court.address.state} ${court.address.zip}**"
  - Change answer: amended_form
    button: "Are you amending a previously filed Divorce Petition? **${yesno(amended_form)}**"
  - Change answer: case_number
    button: "Case Number: **${case_number}**"
    show if: amended_form

field: review1
---
#### start of spousal suport question blocks 
question: |
  % if married:
  **Requesting Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting Orders:** Domestic Partner Support
  % endif
subquestion: |
  See [our video](link Youtube video) explaining Spousal Support.
  
  ${collapse_template(what_is_ss_explanation)}
  ${collapse_template(ss_determinations_explanation)}
  ${collapse_template(ss_options_explanation)}
  ${collapse_template(support_termination_explanation)}
continue button field: ss_info
---
template: what_is_ss_explanation
subject: |
  % if married:
  **What is Spousal Support?** 
  % elif domestic_partners and not married:
  **What is Domestic Partner Support?** 
  % endif
content: |
  % if married:
  Spousal Support is a regular payment from one spouse to another. A spouse may request and receive **temporary** support orders (to support his or her expenses during the divorce process), which can later be replaced by **permanent** support orders (or long-term, as amounts can be changed)
  % elif domestic_partners and not married:
  Domestic Partner Support is a regular payment from one partner to another. A partner may request and receive **temporary** support orders (to support his or her expenses during the divorce process), which can later be replaced by **permanent** support orders (or long-term, as amounts can be changed)
  % endif
---
template: ss_determinations_explanation
subject: |
  **How is Permanent Support Determined?** 
content: |
  % if married:
  When determining which spouse should pay support, and in what amount, the court considers the following factors and more to determine the extent to which each spouse's earning capacity (potential to earn income) is sufficient to maintain the marital standard of living (i.e., the lifestyle and spending habits maintained during the marriage):
  
  - The supported spouse's marketable skills and qualifications, as well as the time and expenses of any further education or training needed to enter the job market
  - The length of unemployment that the supported spouse incurred in order to fulfill domestic responsibilities and its effect on his or her employment prospects  
  - The supporting spouse's ability to make payments (based on the paying spouse's earning capacity, earned and unearned income, assets, and standard of living income)
  - The length of the marriage
  - The custodial arrangements of any dependents (such as minor children or adult children with disabilities) 
  - Both parties’ assets and debts
  - Both parties’ age and health 
  
  *For more information, please review [Fam Code, Section 4320](https://leginfo.legislature.ca.gov/faces/codes_displayText.xhtml?lawCode=FAM&division=9.&title=&part=3.&chapter=2.&article=)*
  
  % elif domestic_partners and not married:
  When determining which partner should pay support, and in what amount, the court considers the following factors and more to determine the extent to which each partner's earning capacity (potential to earn income) is sufficient to maintain the marital standard of living (i.e., the lifestyle and spending habits maintained during the domestic partnership):
  
  - The supported partner’s marketable skills and qualifications, as well as the time and expenses of any further education or training needed to enter the job market
  - The length of unemployment that the supported partner incurred in order to fulfill domestic responsibilities and its effect on his or her employment prospects  
  - The supporting partner's ability to make payments (based on the paying partner's earning capacity, earned and unearned income, assets, and standard of living income)
  - The length of the marriage
  - The custodial arrangements of any dependents (such as minor children or adult children with disabilities) 
  - Both parties’ assets and debts
  - Both parties’ age and health 
  
  *For more information, please review [Fam Code, Section 4320](https://leginfo.legislature.ca.gov/faces/codes_displayText.xhtml?lawCode=FAM&division=9.&title=&part=3.&chapter=2.&article=)*
  % endif
---
template: ss_options_explanation
subject: "**Your Options**"
content: |
  % if married: 
  On the next page, you will be given the following options regarding your and ${resp.name.first}'s support arangement. You may: 
  
  - **(1) Request support payments from one spouse to the other:** If granted, the supporting spouse will provide the supported spouse with periodic support payments. Please note that although the court may grant "permanent" support orders, you or ${resp.name.first} may request to change them at any point in the future should either of your financial situations change;  
  - **(2) Terminate your and/or ${resp.name.first}'s support rights:** Should the court terminate a party's support rights, he or she will be permanently barred from requesting support from his or her spouse; **OR**   
  - **(3) Reserve your and/or ${resp.name.first}'s support rights:** Should the court reserve a party's support rights, he or she reserves the right to request (or *not* request) support from his or her spouse in the future. 
  
  % elif domestic_partners and not married: 
  On the next page, you will be given the following options regarding your and ${resp.name.first}'s support arangement. You may: 
  
  - **(1) Request support payments from one partner to the other:** If granted, the supporting partner will provide the supported partner with periodic support payments. Please note that although the court may grant "permanent" support orders, you or ${resp.name.first} may request to change them at any point in the future should either of your financial situations change;  
  - **(2) Terminate your and/or ${resp.name.first}'s support rights:** Should the court terminate a party's support rights, he or she will be permanently barred from requesting support from his or her partner; **OR**   
  - **(3) Reserve your and/or ${resp.name.first}'s support rights:** Should the court reserve a party's support rights, he or she reserves the right to request (or *not* request) support from his or her partner in the future.
  % endif
---
template: support_termination_explanation
subject: |
  % if married: 
  **Can I terminate support in a long term marriage?**
  % elif domestic_partners and not married:
  **Can I terminate support in a long term domestic partnership?**
  % endif
content: |
  % if married:
  **No.** Please note that California law states that individuals in marriages of 10 years or longer may not request to terminate support. If this is true in your case, you may ask the court to instead reserve your and/or ${resp.name.first}'s support rights.
  % elif domestic_partners and not married: 
  **No.** Please note that California law states that individuals in domestic partnerships of 10 years or longer may not request to terminate support. If this is true in your case, you may ask the court to instead reserve your and/or ${resp.name.first}'s support rights.
  % endif
---
template: support_calculator_disclaimer
subject: "Disclaimer"
content: |
  The materials on the Legal Calculators website are provided "as is". Legal Calculators makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties, including without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. Further, Legal Calculators does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its Internet website or otherwise relating to such materials or on any sites linked to this site.
  
  This calculator has not been approved by the State of California and is for estimation purposes only. No guarantee is made regarding its accuracy. We do not advise you to rely solely on this program in calculating support and do accept any liability from your use of the program. Additionally, this calculator does not constitute legal advice and is limited to estimation of spousal support based on limited input. You should consult a qualified attorney to obtain accurate legal advice regarding your specific spousal support rights and obligations. Only support calculations computed by certified software programs are admissible in court. This calculator is not certified or admissible for court use.
---
question: |
  % if married:
  **Requesting Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting Orders:** Domestic Partner Support
  % endif
subquestion: |
  As a reminder, please note that your answers may cause questions to appear or disappear.
fields:  
  - note: "**Requesting Support**"
  - Would you like to ask the court to (1) order ${resp.name.first} to **pay you support** AND (2) **terminate** ${resp.name.first}'s ability to request support from you?: ss_to_pet
    datatype: yesnoradio 
    label above field: true
    help: |
      Select 'Yes' to request support from ${resp.name.first}
  
  - Would you like to ask the court to (1) order you to **pay ${resp.name.first} support** AND (2) **terminate** your ability to request support from ${resp.name.first}?: ss_to_resp
    datatype: yesnoradio
    label above field: true
    help: |
      Select 'Yes' to request to pay ${resp.name.first} support
    show if: 
      variable: ss_to_pet
      is: False
    
  - note: "**Terminating or Reserving Support**"
    show if: 
      variable: ss_to_resp
      is: False
  - note: "You have indicated that you are NOT asking the court to award spousal/domestic partner support to you or ${resp.name.first}. As such, please indicate below whether you want to **terminate** OR **reserve** your and ${resp.name.first}'s rights to support."
    show if: 
      variable: ss_to_resp
      is: False
      
  - Would you like to ask the court to **terminate** (permanently end) **your ability** to request support from ${resp.name.first}?: terminate_ss_to_pet
    datatype: yesnoradio
    label above field: true
    help: |
      California law states that individuals in marriages or domestic partnerships of 10 years or longer may not request to terminate support. If this is true in your case, please select 'No,' and your court forms will indicate that you are asking the court to reserve your right to support 
    show if: 
        variable: ss_to_resp
        is: False
   
  - note: "Based on your answers above, you have indicated that you would like the court to **reserve** your right to request spousal/domestic partner support from ${resp.name.first} in the future."
    show if: 
      variable: terminate_ss_to_pet
      is: False
    help: "*If this is incorrect, please review and correct your answers above*"

  - Would you like to ask the court to **terminate** (permanently end) **${resp.name.first}'s ability** to request spousal support from you?: terminate_ss_to_resp
    datatype: yesnoradio
    label above field: true
    show if: 
      variable: ss_to_resp
      is: False
    help: |
     California law states that individuals in marriages or domestic partnerships of 10 years or longer may not request to terminate support. If this is true in your case, please select 'No,' and your court forms will indicate that you are asking the court to reserve ${resp.name.first}'s right to support
  
  - note:  
      "Based on your answers above, you have indicated that you would like the court to **reserve** ${resp}'s right to request spousal/domestic partner support from you in the future."
    show if:
      variable: terminate_ss_to_resp
      is: False
    help: "*If this is incorrect, please review and correct your answers above*"
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  % if married:
  Spousal support orders will not go into effect until a judge finalizes your divorce. California law states that the **earliest** you can be divorced is 6 months and 1 day from one of the following three dates (whichever occurs first):
  
  - (1) The date ${resp.name.first} was served with (given) your Petition and Summons;
  - (2) The date ${resp.name.first}'s Response was filed; or
  - (3) The date the Appearance, Stipulations, and Waivers was filed (in uncontested divorce cases)
  
  **BUT divorce cases can take much longer.** That said, you may request temporary spousal support orders that, if granted, will go into effect temporarily until your divorce is finalized.
  % elif domestic_partners and not married: 
  Domestic partner support orders will not go into effect until a judge finalizes your divorce. California law states that the **earliest** you can be divorced is 6 months and 1 day from one of the following three dates (whichever occurs first):
  
  - (1) The date ${resp.name.first} was served with (given) your Petition and Summons;
  - (2) The date ${resp.name.first}'s Response was filed; or
  - (3) The date the Appearance, Stipulations, and Waivers was filed (in uncontested divorce cases)
  
  **BUT divorce cases can take much longer.** That said, you may request temporary domestic partner support orders that, if granted, will go into effect temporarily until your divorce is finalized.
  % endif
fields:
  - Would you like to request a temporary spousal/domestic partner support order?: spousalsupport_requesting_temporary_orders
    datatype: yesnoradio
    label above field: true
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  **Calculating Temporary Support**
  
  % if married: 
  In most courts, the judge uses a math formula to figure out needs and ability to pay. For example, a judge may use the common temporary spousal support formula: 

  Monthly support = 40% higher earner’s net monthly income – 50% lower earner’s net monthly income  

  In your court, the judge may use this formula or something different. These formulas are just guides. The judge can vary the amount based on your situation.  
  
  **Helpful Support Calculator**
  
  Each county's Superior Court uses a different guideline for spousal support determinations. You can calculate the guideline amount of support based on your circumstances and county using the [California Maintenance (Alimony) Calculator](https://calculators.law/calculators/maintenance/california). After inputting your and ${resp.name.first}'s information, the suggested amount of support will be bolded and listed next to "Maintenance Payment." 
  
  ${collapse_template(support_calculator_disclaimer)}
  % elif domestic_partners and not married:
  In most courts, the judge uses a math formula to figure out needs and ability to pay. For example, a judge may use the common temporary domestic partner support formula: 

  Monthly support = 40% higher earner’s net monthly income – 50% lower earner’s net monthly income  

  In your court, the judge may use this formula or something different. These formulas are just guides. The judge can vary the amount based on your situation. 
  
  **Helpful Support Calculator**
  
  Each county's Superior Court uses a different guideline for domestic partner support determinations. You can calculate the guideline amount of support based on your circumstances and county using the [California Maintenance (Alimony) Calculator](https://calculators.law/calculators/maintenance/california). After inputting your and ${resp.name.first}'s information, the suggested amount of support will be bolded and listed next to "Maintenance Payment."
  ${collapse_template(support_calculator_disclaimer)}
  % endif
right: |
  **As a reminder:**
  
  ${collapse_template(what_is_ss_explanation)}
  ${collapse_template(ss_determinations_explanation)}
fields:
  - Monthly support payment amount: ss_amount
    datatype: currency
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
fields:
  - Do you and ${resp.name.first} have a previous spousal or domestic partner support order that is currently in effect?: prior_ss_order
    datatype: yesnoradio
    label above field: true
    
  - Previous support order date: prior_ss_order_date
    datatype: ThreePartsDate
    show if: prior_ss_order
  - Monthly amount ordered: prior_ss_order_amount
    datatype: currency
    show if: prior_ss_order
  - If possible, upload a copy of the judgment or document(s) containing your prior spousal or domestic partner support orders: prior_ss_order_file
    datatype: files
    show if: prior_ss_order
    required: false
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
fields:
  - Was this prior spousal/domestic partner support ordered as part of a judgment?: prior_ss_order_judgement
    datatype: yesnoradio
    label above field: true
    help: |
      The divorce judgment (formally known as the Judgment for Dissolution of Marriage) is the final divorce document which outlines the resolution of all legal issues in the case (disputed and agreed-upon).
---
template: ss_dv_explanation
subject: "**Documented history of domestic violence** ([Family Code section 4320(i)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4320.&lawCode=FAM))"
content: |
  The court will consider all documented evidence of any history of domestic violence between the parties or perpetrated by either party against either party's child, including but not limited to the following:
  
  - A plea of nolo contendere ("no contest")
  - Emotional distress resulting from domestic violence against the party asking for support by the party being asked to pay support
  - Any history of violence against the party being asked to pay support by the party asking for support
  - A Restraining Order After Hearing (form DV-130)
  - A finding by a court as part of a case involving divorce, separation, or a child custody proceeding in family court in which the court has found that the spouse or domestic partner committed domestic violence
  - Other evidence of any history of violence between the parties
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  % if married:
    When considering whether to amend or order spousal support, the court must consider information about your and ${resp.name.first}'s marital standard of living, age and health, any documented criminal history, earning capacity, education, work experience, assets and debts, and hardships, and needs. Provide this information by answering the questions below. 
  % elif not married and domestic_partners:
    When considering whether to order domestic partner support, the court must consider information about your and ${resp}'s domestic partnership's standard of living, age and health, any documented criminal history, earning capacity, education, work experience, assets and debts, and hardships, and needs. Provide this information by answering the questions below. 
  % endif
fields:
#### msol 
  - note: "**Standard of living of the marriage or domestic partnership** ([Family Code section 4320(a)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4320.&lawCode=FAM))"
  - The standard of living established during the marriage or domestic partnership was (*describe, for example, information from your income tax return, type and frequency of vacations, value of home and other real eststae, value of investments, type of vehicles owned, credit card use or nonuse, ability to save for retirement, etc.*): msol
    input type: area
    rows: 15
    maxlength: 1073
    label above field: true
  - Check here if you need more space: msol_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: msol_attachment
    input type: area
    label above field: true
    show if: msol_ms
    
#### health condition  
  - note: "**Health of the parties** ([Family Code section 4320(h)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4320.&lawCode=FAM))" 
  - Your health condition is (*describe*): healthcondition_pet
    input type: area
    maxlength: 362
    label above field: true
  - Check here if you need more space:: healthcondition_pet_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: healthcondition_pet_attachment
    input type: area
    show if: healthcondition_pet_ms
    label above field: true
  - ${resp}'s health condition is (*describe*): healthcondition_resp
    input type: area
    maxlength: 362
    label above field: true
  - Check here if you need more space:: healthcondition_resp_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: healthcondition_resp_attachment
    input type: area
    label above field: true
    show if: healthcondition_resp_ms

#### documented history of domestic violence 

  - note: "${collapse_template(ss_dv_explanation)}"
  
  - Is there any documented history of domestic violence between you and ${resp}?: documented_history_of_dv
    datatype: yesnoradio
    label above field: true
  - Upload copies of any documents that you want the court to consider: documented_history_of_dv_files
    datatype: files
    show if: documented_history_of_dv
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  #####**Facts about the Supported Party** (*the party asking for support*)
fields:
#### felony conviction
  - note: "**Felony conviction of the party asking for support** ([Family Code section 4320(m)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4320.&lawCode=FAM))"
  - note: "${resp} may request that you are prohibited by law from receiving support (including medical, life, or other insurance benefits or payments) under [Family code section 4324.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4324.5.&lawCode=FAM) **IF**:"
  - note: "1. You were convicted of a violent sexual felony or domestic violence felony against ${resp} within five years after the conviction (and any time served in custody, on probation, or on parole); and"
  - note: "2. The petition for divorce was filed within five years after your conviction (and any time served in custody or on parole)"
  
  - Have you been convicted of a violent sexual felony or domestic violence felony against ${resp} within the last 5 years?: felonyconviction_petsupported 
    datatype: yesnoradio
    label above field: true

#### misdemeanor conviction

  - note: "**Misdemeanor conviction of the party asking for support** ([Family Code section 4320(m)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4320.&lawCode=FAM))"
  - note: "${resp} may request that the court find that you are prohibited by law from receiving support (including medical, life, or other insurance benefits or payments) under [Family Code section 4324.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4324.5.&lawCode=FAM) **IF**:"
  - note: "1. You were either convicted of a domestic violence misdemeanor against ${resp} that resulted in a term of probation under Penal Code section 1203.097; and"
  - note: "2. The conviction was entered by the court within five years before the petition for divorce was filed (or the conviction was entered at any time during the divorce case)"
  - Have you been convicted of a domestic violence misdemeanor against ${resp} within the last 5 years?: misdemeanorconviction_petsupported 
    datatype: yesnoradio
    label above field: true
  - Because you have been convicted of a domestic violence misdemeanor against ${resp}, there is a rebuttable presumption that you are. prohibited from receiving support. A rebuttable presumption is an assumption made by a court that is taken to be true unless someone comes forward to contest it and prove otherwise. However, you can still ask the court to rebut that assumption and grant your request for support if you can provide enough evidence to the court. **Would you like to ask the court to find that the presumption has been rebutted?** (*Please note that you must attach a written declaration and any documents that you want the court to consider*): misdemeanorconviction_petsupported_rebut
    datatype: yesnoradio
    label above field: true
    show if: misdemeanorconviction_petsupported
  - In your own words, please explain why the court should grant your request for support despite your conviction. Refer to any attached documents and Exihit A, B, C... and so on.: misdemeanorconviction_petsupported_specify
    input type: area
    show if: misdemeanorconviction_petsupported 
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  #####**Facts about the Supported Party** (*the party asking for support*)
fields:
#### earning capacity
  - note: "**Earning Capacity**"
  - Your marketable skills (training, job skills, and work history) are (*describe*): marketableskills_pet
    maxlength: 437
    input type: area
    label above field: true
  - Check here if you need more space:: marketableskills_pet_ms
    datatype: yesno
  - Continue writing about your marketable skills in the space below: marketableskills_pet_attachment
    input type: area
    label above field: true  
    show if: marketableskills_pet_ms
    
  - The current job market for your job skills is (*specify*): jobmarket_pet
    input type: area
    maxlength: 590
    label above field: true
  - Check here if you need more space:: jobmarket_pet_ms
    datatype: yesno
  - Continue writing about the current job market for your job skills in the space below: jobmarket_pet_attachment
    input type: area
    show if: jobmarket_pet_ms
    label above field: true
    
  - The time and expenses required for you to acquire the appropriate education and training to develop the skills for the job market described above are (*specify*): trainingexpenses_pet 
    input type: area
    maxlength: 514
    label above field: true
  - Check here if you need more space:: trainingexpenses_pet_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: trainingexpenses_pet_attachment
    input type: area
    show if: trainingexpenses_pet_ms
    label above field: true
  
  - The possible need for retraining or education to acquire other, more marketable skills or employment are (*specify*): retraining_pet
    input type: area
    maxlength: 514
    label above field: true
  - Check here if you need more space:: retraining_pet_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: retraining_pet_attachment
    input type: area
    show if: retraining_pet_ms
    label above field: true
    
  - Indicate the extent to which you are able to earn enough money to maintain the standard of living established during the marriage or domestic partnership: msolearningcapacity_pet
    input type: area
    maxlength: 742
    label above field: true
  - Check here if you need more space: msolearningcapacity_pet_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: msolearningcapacity_pet_attachment
    input type: area
    show if: msolearningcapacity_pet_ms
    label above field: true
    
  - Have you had periods or unemployment because of the time needed to attend to domestic duties?: domesticduties_pet
    datatype: yesnoradio
  - Specify the extent to which your present or future earning capacity is impaired by periods of unemployment to devote time to domestic duties during the marriage or domestic partnership: domesticduties_pet_specify
    input type: area
    maxlength: 285
    show if: domesticduties_pet
    label above field: true
  - Check here if you need more space: domesticduties_pet_specify_ms
    datatype: yesno
    show if: domesticduties_pet
  - Continue writing from where you left off in the space below: domesticduties_pet_specify_attachment
    input type: area
    show if: domesticduties_pet_specify_ms
    label above field: true

#### contributions to the education and training of the supporting party 
  - note: "**Contributions to the education and training of the party being asked to pay support**"
  - Did you contribute to ${resp}'s education, training, career position, or license?: trainingcontributions_pet
    datatype: yesnoradio
  - Specify the extent to which you contributed to ${resp}'s education, training, career position or license: trainingcontributions_pet_specify
    input type: area
    maxlength: 285
    label above field: true
    show if: trainingcontributions_pet
  - Check here if you need more space: trainingcontributions_pet_specify_ms
    datatype: yesno
    show if: trainingcontributions_pet
  - Continue writing from where you left off in the space below: trainingcontributions_pet_specify_attachment
    input type: area
    show if: trainingcontributions_pet_specify_ms
    label above field: true
    
#### care for children
  - note: "**Care for children**"
  - Have you had periods of unemployment to care for the children of the marriage or domestic partnership?: careforchildren_pet
    datatype: yesnoradio
  - Are you able to be gainfully employed without duly interfering with the interests of the children in your care? (*If applicable*): gainfullyemployed_pet
    datatype: yesnoradio
  - Please specify: gainfullyemployed_pet_specify
    input type: area
    maxlength: 208
    show if: gainfullyemployed_pet
    label above field: true
  - Check here if you need more space: gainfullyemployed_pet_specify_ms
    datatype: yesno
    show if: gainfullyemployed_pet
  - Continue writing from where you left off in the space below: gainfullyemployed_pet_specify_attachment
    input type: area
    show if: gainfullyemployed_pet_specify_ms
    label above field: true

#### needs of the supported party
  - note: "**Needs of the party asking for support**"
  - Specify your needs based on the standard of living established during the marriage or domestic partnership, as previously described above: msolneeds_pet_supported
    input type: area
    maxlength: 456
    label above field: true
  - Check here if you need more space: msolneeds_pet_supported_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: msolneeds_pet_supported_attachment
    input type: area
    show if: msolneeds_pet_supported_ms
    label above field: true
  
#### tax consequences
  - note: "**Tax Consequences**"
  - The immediate and specific tax consequences for you are (*specify*): taxconsequences_pet_supported
    input type: area
    maxlength: 512
    label above field: true
  - Check here if you need more space: taxconsequences_pet_supported_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: taxconsequences_pet_supported_attachment
    input type: area
    show if: taxconsequences_pet_supported_ms
    label above field: true

#### goal to become self-supporting
  - note: "**Goal to become self-supporting**"
  - note: 'When ordering spousal or domestic partner support in a judgment, the court may advise (warn) the party asking for support to make reasonable efforts to become self-supporting within a reasonable period of time, considering all the factors in Family Code section 4320. The court may decide that this warning (often called "Gavron" warning) is not appropriate if the case involves a marriage or domestic partnership of long duration (about 10 years or longer). Generally, failure to become self-supporting after the court gives the warning can result in an order to reduce the amount of the support award.'
  - Are you self-supporting?: selfsupporting_pet
    datatype: yesnoradio
    help: "A party is self-supporting when he or she can support himself or herself at a level close to (or at) the marital standard of living."
  - What steps will you take to become self-supporting within a reasonable amount of time?: selfsupporting_pet_steps
    input type: area
    maxlength: 1044
    label above field: true
    show if: 
      variable: selfsupporting_pet
      is: false
  - Check here if you need more space: selfsupporting_pet_steps_ms
    datatype: yesno
    show if: 
      variable: selfsupporting_pet
      is: false
  - Continue writing from where you left off in the space below: selfsupporting_pet_steps_attachment
    input type: area
    show if: selfsupporting_pet_steps_ms
    label above field: true
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  #####**Facts about the Supported Party** (*the party asking for support*)
fields:
#### felony conviction
  - note: "**Felony conviction of the party asking for support** ([Family Code section 4320(m)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4320.&lawCode=FAM))"
  - note: "You may request that ${resp} is prohibited by law from receiving support (including medical, life, or other insurance benefits or payments) under [Family Code section 4324.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4324.5.&lawCode=FAM) **IF**:"
  - note: "1. ${resp.name.first} was convicted of a violent sexual felony or domestic violence felony against the party asked to pay support, in this case you, within five years after the conviction (and any time served in custody, on probation, or on parole); and"
  - note: "2. The petition for divorce was filed within five years after your conviction (and any time served in custody or on parole)"
  - Has ${resp} been convicted of a violent sexual felony or domestic violence felony against you within the last 5 years?: felonyconviction_respsupported 
    datatype: yesnoradio
    label above field: true
    
 #### misdemeanor conviction   
  - note: "**Misdemeanor conviction of the party asking for support** ([Family Code section 4320(m)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4320.&lawCode=FAM))"
  - note: "You may request that the court find that ${resp} is prohibited by law from receiving support (including medical, life, or other insurance benefits or payments) under [Family Code section 4324.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4324.5.&lawCode=FAM) **IF**:"
  - note: "1. He or she was convicted of a domestic violence misdemeanor you that resulted in a term of probation under Penal Code section 1203.097; and"
  - note: "2. The conviction was entered by the court within five years before the petition for divorce was filed (or the conviction was entered at any time during the divorce case)"
  - Has ${resp.name.first} been convicted of a domestic violence misdemeanor against you within the last 5 years?: misdemeanorconviction_respsupported 
    datatype: yesnoradio
    label above field: true
  - Would you like to ask the court to find that the presumption has **NOT** been rebutted?: misdemeanorconviction_respsupported_rebut
    help: "A rebuttable presumption is an assumption made by a court that is taken to be true unless someone comes forward to contest it and prove otherwise. Select 'Yes' if you would like to ask the court to deny the party asking for support's request."
    datatype: yesnoradio
    label above field: true
    show if: misdemeanorconviction_respsupported 
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  #####**Facts about the Supported Party** (*the party asking for support*)
fields:
#### earning capacity
  - note: "**Earning Capacity**"
  - ${resp}'s marketable skills (training, job skills, and work history) are (*describe*): marketableskills_resp
    input type: area
    maxlength: 437
    label above field: true
  - Check here if you need more space: marketableskills_resp_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: marketableskills_resp_attachment
    input type: area
    show if: marketableskills_resp_ms
    label above field: true
    
  - The current job market for ${resp}'s job skills is (*specify*): jobmarket_resp
    input type: area
    maxlength: 590
    label above field: true
  - Check here if you need more space: jobmarket_resp_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: jobmarket_resp_attachment
    input type: area
    show if: jobmarket_resp_ms
    label above field: true
    
  - The time and expenses required for ${resp} to acquire the appropriate education and training to develop the skills for the job market described above are (*specify*): trainingexpenses_resp
    input type: area
    maxlength: 514
    label above field: true
  - Check here if you need more space: trainingexpenses_resp_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: trainingexpenses_resp_attachment
    input type: area
    show if: trainingexpenses_resp_ms
    label above field: true
    
  - The possible need for retraining or education to acquire other, more marketable skills or employment are (*specify*): retraining_resp
    input type: area
    maxlength: 514
    label above field: true
  - Check here if you need more space: retraining_resp_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: retraining_resp_attachment
    input type: area
    show if: retraining_resp_ms
    label above field: true 
    
  - Indicate the extent to which ${resp} is able to earn enough money to maintain the standard of living established during the marriage or domestic partnership: msolearningcapacity_resp
    input type: area
    maxlength: 742
    label above field: true
  - Check here if you need more space: msolearningcapacity_resp_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: msolearningcapacity_resp_attachment
    input type: area
    show if: msolearningcapacity_resp_ms
    label above field: true
    
  - Has ${resp} had periods or unemployment because of the time needed to attend to domestic duties?: domesticduties_resp
    datatype: yesnoradio
  - Specify the extent to which ${resp}'s present or future earning capacity is impaired by periods of unemployment to devote time to domestic duties during the marriage or domestic partnership: domesticduties_resp_specify
    input type: area
    maxlength: 295
    show if: domesticduties_resp
    label above field: true
  - Check here if you need more space: domesticduties_resp_specify_ms
    datatype: yesno
    show if: domesticduties_resp
  - Continue writing from where you left off in the space below: domesticduties_resp_specify_attachment
    input type: area
    show if: domesticduties_resp_specify_ms
    label above field: true
    
#### contributions to the education and training of the supporting party 
  - note: "**Contributions to the education and training of the party being asked to pay support**"
  - Did ${resp} contribute to your education, training, career position, or license?: trainingcontributions_resp
    datatype: yesnoradio
  - Specify the extent to which ${resp} contributed to your education, training, career position or license: trainingcontributions_resp_specify
    input type: area
    maxlength: 295
    label above field: true
    show if: trainingcontributions_resp
  - Check here if you need more space: trainingcontributions_resp_specify_ms
    datatype: yesno
    show if: trainingcontributions_resp
  - Continue writing from where you left off in the space below: trainingcontributions_resp_specify_attachment
    input type: area
    show if: trainingcontributions_resp_specify_ms
    label above field: true
    
#### care for children
  - note: "**Care for children**"
  - Has ${resp} had periods of unemployment to care for the children of the marriage or domestic partnership?: careforchildren_resp
    datatype: yesnoradio
  - Is ${resp} able to be gainfully employed without duly interfering with the interests of the children in his or her care? (*If applicable*): gainfullyemployed_resp
    datatype: yesnoradio
    show if: children.there_are_any
  - Please specify: gainfullyemployed_resp_specify
    input type: area
    maxlength: 208
    show if: gainfullyemployed_resp
    label above field: true
  - Check here if you need more space: gainfullyemployed_resp_specify_ms
    datatype: yesno
    show if: gainfullyemployed_resp
  - Continue writing from where you left off in the space below: gainfullyemployed_resp_specify_attachment
    input type: area
    show if: gainfullyemployed_resp_specify_ms
    label above field: true
    
#### needs of the supported party
  - note: "**Needs of the party asking for support**"
  - Specify ${resp}'s needs based on the standard of living established during the marriage or domestic partnership, as previously described above: msolneeds_resp_supported
    input type: area
    maxlength: 436
    label above field: true
  - Check here if you need more space: msolneeds_resp_supported_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: msolneeds_resp_supported_attachment
    input type: area
    show if: msolneeds_resp_supported_ms
    label above field: true
    
#### tax consequences
  - note: "**Tax Consequences**"
  - The immediate and specific tax consequences for ${resp} are (*specify*): taxconsequences_resp_supported
    input type: area
    maxlength: 512
    label above field: true
  - Check here if you need more space: taxconsequences_resp_supported_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: taxconsequences_resp_supported_attachment
    input type: area
    show if: taxconsequences_resp_supported_ms
    label above field: true
    
#### goal to become self-supporting
  - note: "**Goal to become self-supporting**"
  - note: 'When ordering spousal or domestic partner support in a judgment, the court may advise (warn) the party asking for support to make reasonable efforts to become self-supporting within a reasonable period of time, considering all the factors in Family Code section 4320. The court may decide that this warning (often called "Gavron" warning) is not appropriate if the case involves a marriage or domestic partnership of long duration (about 10 years or longer). Generally, failure to become self-supporting after the court gives the warning can result in an order to reduce the amount of the support award.'
  - Is ${resp} self-supporting?: selfsupporting_resp
    datatype: yesnoradio
    help: "A party is self-supporting when he or she can support himself or herself at a level close to (or at) the marital standard of living."
  - What steps, if any, will ${resp} take to become self-supporting within a reasonable amount of time?: selfsupporting_resp_steps
    input type: area
    maxlength: 512
    label above field: true
    show if: 
      code: not (long_term_marriage or long_term_dp) and not selfsupporting_resp 
  - Check here if you need more space: selfsupporting_resp_steps_ms
    datatype: yesno
    show if: 
      code: not (long_term_marriage or long_term_dp) and not selfsupporting_resp 
  - Continue writing from where you left off in the space below: selfsupporting_resp_steps_attachment
    input type: area
    show if: selfsupporting_resp_steps_ms
    label above field: true
---
template: earned_income_explanation
subject: "What is the difference between **earned** and **unearned** income?"
content: |
  - **Earned income:** Money made from employment (i.e. working for someone who pays you) or from self-employment (i.e. running a business). This includes all the income, wages, and tips you get from working. 
  - **Unearned income:** Income people receive even if they don't work for pay, such as public assistance.
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  #####**Facts about the Supporting Party** (*the party being asked to pay support*)
right: |
  ${collapse_template(earned_income_explanation)}
fields: 
  - note: "**Ability to pay support/earning capacity**"
  - Do you know ${resp}'s earned income?: earnedincome_pet_known
    datatype: yesnoradio
  - Monthly amount: earnedincome_pet_known_specify
    datatype: currency
    show if: earnedincome_pet_known
  - note: |
      *If ${resp.name.first} doesn't make any unearned income, select 'Yes' below and write "0".*
  - Do you know ${resp}'s unearned income?: unearnedincome_pet_known
    datatype: yesnoradio
  - Monthly amount: unearnedincome_pet_known_specify
    datatype: currency
    show if: unearnedincome_pet_known
  - Does ${resp.name.first} have the ability to earn enough money to maintain the standard of living described previously for both spouses or domestic partners?: resp_maintaining_msol
    datatype: yesnoradio
  - Please explain: resp_maintaining_msol_specify
    input type: area
    maxlength: 436
    show if: 
      variable: resp_maintaining_msol
      is: false
  - Check here if you need more space: resp_maintaining_msol_specify_ms
    datatype: yesno
    show if: 
      variable: resp_maintaining_msol
      is: false
  - Continue writing from where you left off in the space below: resp_maintaining_msol_specify_attachment
    input type: area
    show if: resp_maintaining_msol_specify_ms
    label above field: true
      
  #### needs of the party being asked to pay support
  - note: "**Needs of the party being asked to pay support**"
  - Specify ${resp.name.first}'s needs based on the standard of living established during the marriage or domestic partnership: msolneeds_pet_supporting
    input type: area
    maxlength: 432
    label above field: true
  - Check here if you need more space: msolneeds_pet_supporting_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: msolneeds_pet_supporting_attachment
    input type: area
    show if: msolneeds_pet_supporting_ms
    label above field: true
  
  - Specify ${resp.name.first}'s immediate and specific tax consequences: taxconsequences_resp_supporting
    input type: area
    maxlength: 432
    label above field: true
  - Check here if you need more space: taxconsequences_resp_supporting_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: taxconsequences_resp_supporting_attachment
    input type: area
    show if: taxconsequences_resp_supporting_ms
    label above field: true
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  #####**Facts about the Supporting Party** (*the party being asked to pay support*)
right: |
  ${collapse_template(earned_income_explanation)}
fields: 
  - note: "**Ability to pay support/earning capacity**"
  - Your monthly earned income (*specify amount*): earnedincome_resp_known_specify
    datatype: currency
  - Your monthly unearned income (*specify amount*): unearnedincome_resp_known_specify
    datatype: currency
  - Do you have the ability to earn enough money to maintain the standard of living described previously for both spouses or domestic partners?: pet_maintaining_msol
    datatype: yesnoradio
  - Please explain: pet_maintaining_msol_specify
    input type: area
    maxlength: 436
    show if: 
      variable: pet_maintaining_msol
      is: false
  - Check here if you need more space: pet_maintaining_msol_specify_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: pet_maintaining_msol_specify_attachment
    input type: area
    show if: pet_maintaining_msol_specify_ms
    label above field: true

#### needs of the party being asked to pay support
  - note: "**Needs of the party being asked to pay support**"
  - Specify your needs based on the standard of living established during the marriage or domestic partnership: msolneeds_resp_supporting
    input type: area
    maxlength: 436
    label above field: true
  - Check here if you need more space: msolneeds_resp_supporting_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: msolneeds_resp_supporting_attachment
    input type: area
    show if: msolneeds_resp_supporting_ms
    label above field: true
    
  - Specify your immediate and specific tax consequences: taxconsequences_pet_supporting
    input type: area
    maxlength: 436
    label above field: true
  - Check here if you need more space: taxconsequences_pet_supporting_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: taxconsequences_pet_supporting_attachment
    input type: area
    show if: taxconsequences_pet_supporting_ms
    label above field: true
    
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif 
subquestion: |
  **Balance of Hardships and Other Factors**
fields: 
  - Describe any special financial difficulties to ${resp.name.first} if he or she is ordered to pay support compared to the hardship to you: hardships_petsupported
    input type: area
    maxlength: 1228
    label above field: true
  - Check here if you need more space: hardships_petsupported_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: hardships_petsupported_attachment
    input type: area
    show if: hardships_petsupported_ms
    label above field: true
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif 
subquestion: |
  **Balance of Hardships and Other Factors**
fields:
  - Describe any special finanial difficulties you face if you are ordered to pay support compared to the hardship to ${resp}: hardships_respsupported
    input type: area
    maxlength: 1228
    label above field: true
  - Check here if you need more space: hardships_respsupported_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: hardships_respsupported_attachment
    input type: area
    show if: hardships_respsupported_ms
    label above field: true
---
question: |
  % if married:
  **Requesting *Temporary* Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting *Temporary* Orders:** Domestic Partner Support
  % endif
subquestion: |
  % if married: 
  **Facts to Support Your Spousal Support Request**
  % elif domestic_partners and not married: 
  **Facts to Support Your Domestic Partner Support Request**
  % endif
right: |
  ${collapse_template(ss_factstosupport_explanation)}
fields:
  - In your own words, please explain why the court should make your requested spousal or domestic partner support orders: temporary_ss_explanation
    input type: area
    label above field: true
    maxlength: 645
  - Check here if you need more space: temporary_ss_explanation_ms
    datatype: yesno
  - Continue writing from where you left off in the space below: temporary_ss_explanation_attachment
    input type: area
    label above field: true
    show if: temporary_ss_explanation_ms
---
question: |
  % if married:
  **Requesting Orders:** Spousal Support
  % elif domestic_partners and not married:
  **Requesting Orders:** Domestic Partner Support
  % endif 
subquestion: |
  % if married: 
  **Additional Spousal Support Orders**
  % elif domestic_partners and not married: 
  **Additional Domestic Partner Support Orders**"
  % endif
fields:
  - Are there any additional spousal or domestic partner support orders you would like to request at this time?: requesting_ss_other
    datatype: yesnoradio
    label above field: true
  - Please specify: requesting_ss_other_specify
    label above field: true
    input type: area
    maxlength: 229
    show if: requesting_ss_other
  - Check here if you need more space: requesting_ss_other_ms
    datatype: yesno
    show if: requesting_ss_other
  - Please continue writing the additional spousal or domestic partner support orders you want in the space below.: requesting_ss_other_attachment
    label above field: true
    input type: area
    show if: requesting_ss_other_ms
    help: "Note that since your response is too long to fit in the field in which it would normally be generated, this overflow text will fill in an attachment to your court forms instead."
#### end of ss question blocks
---
#### start of children question blocks
question: |
  **Do you and ${resp} have children?** 
pre: |
  *As a reminder, please note that your responses may cause additional questions, instructions, and/or fields on the page to appear or disappear.*
fields:
  - Are you the parent of a child or children under 18 years old?: children.there_are_any
    datatype: yesnoradio
    label above field: true
  - Are you this child's/these children's mother?: parentalrelationship_pet_mom
    datatype: yesnoradio
    show if: 
      children.there_are_any
  - Are you this child's/these children's father?: parentalrelationship_pet_dad
    datatype: yesnoradio
    show if: 
      variable: parentalrelationship_pet_mom
      is: False
  - You indicated that you are neither these children's mother nor father. Specify your relationship to these children: parentalrelationship_pet_other
    show if:
      variable: parentalrelationship_pet_dad
      is: False
  - Are you or ${resp} currently pregnant? (*Do not select 'Yes' if you and ${resp} are not, together, the parents of this child*): unborn_child
    datatype: yesnoradio
    show if: 
      children.there_are_any
  - Do you have a signed Voluntary Declaration of Paternity for one or more of your children?: voluntary_declaration_of_paternity
    datatype: yesnoradio
    show if: children.there_are_any
    help: |
      A voluntary declaration of parentage or paternity is a California governmental form that, when signed by both parents, establishes them as the legal parents of the child. The form must be signed voluntarily, and parents typically sign a declaration at the hospital when the child is born.
  - If possible, please upload any copies of your children's Voluntary Declarations of Paternity: vdop_file
    datatype: file
    show if: voluntary_declaration_of_paternity
    required: false
---
question: |
  **Your Children** 
subquestion: | 
  % if married:
  The court needs to know if you have any minor children born to (or prior to) the marriage. 
  
  **This includes:**
  
  * children born to both you and ${resp.name.first} who are under 18
  * children you and ${resp.name.first} have both adopted who are under 18
  * children born to you and formally adopted by ${resp.name.first} OR born to ${resp.name.first} and formally adopted by you who are under 18
  
  **This does NOT include:**
  
  * any of your children whose other parent is NOT ${resp.name.first} (such as any step-children ${resp.name.first} may have from this marriage)
  * any of ${resp.name.first}'s children whose other parent is NOT you (such as any step-children you may have from this marriage) 
  * any children born to or adopted by both you and ${resp.name.first} who are 18 or older
  % elif domestic_partners and not married:
  The court needs to know if you have any minor children born to (or prior to) the domestic partnership. 
  
  **This includes:**
  
  * children born to both you and ${resp.name.first} who are under 18
  * children you and ${resp.name.first} have both adopted who are under 18
  * children born to you and formally adopted by ${resp.name.first} OR born to ${resp.name.first} and formally adopted by you who are under 18
   
  **This does NOT include:**
  
  * any of your children whose other parent is NOT ${resp.name.first} (such as any step-children ${resp.name.first} may have from this domestic partnership)
  * any of ${resp.name.first}'s children whose other parent is NOT you (such as any step-children you may have from this domestic partnership) 
  * any children born to or adopted by both you and ${resp.name.first} who are 18 or older
  % endif
fields: 
  - How many children do you have with ${resp.name.first} that are under 18? (*use numbers, e.g. 1, 2, 3*): children.target_number
    datatype: integer 
---
question: |
  **Your Children**
subquestion: |
  % if children.target_number == 1:
  Tell us about your child.
  % else: 
  % if children.target_number >= 2 and i == 0:
  Tell us about your **oldest** child first.
  % else:
  You told us 
  about ${comma_and_list([child.name.first for child in children.complete_elements()])}. 
  Tell us about your **${ordinal(i)}** child. 
  % endif
  % endif
fields:
  - First name: children[i].name.first
  - Middle name: children[i].name.middle
    required: false
  - Last name: children[i].name.last
  - Suffix: children[i].name.suffix
    required: false
    datatype: combobox
    code: |
      name_suffix()
    help: |
      If applicable, you may type the suffix in the box or click the right-most arrow to select it from a drop-down menu of common suffixes
  - Birthdate: children[i].birthdate
    datatype: ThreePartsDate
    min: ${ today().minus(years=18) }
    max: ${ today() }
    validation messages:
      min: |
        The court asks only for children under 18.
  - Place of Birth: children[i].birthplace
    help: |
      Fill in this child's city of birth (or country of birth if born outside of the United States).
  - Sex: children[i].sex
    choices: 
      - Male: sex_male
      - Female: sex_female
  - Is there a third parent listed on this child's birth certificate?: children[i].otherparent_exists
    datatype: yesnoradio
    help: |
      Very rarely is this the case, as this question mainly addresses rare instaces of children born to three legal parents: most typically, two same-sex parents that are married or registered domestic partners and a third, biological parent. If a child is born into your union, you are treated as the child’s legal parents, under the presumption of parenthood. California is one of very few states that have granted same sex parents this presumption. As of 2014, as many as three parents can now be listed on a child’s birth certificate, thereby giving all parties involved protected parental rights. 
  - note: 
      "Fill in the other parent's full name"
    show if: children[i].otherparent_exists
  - First name: other.name.first
    show if: children[i].otherparent_exists
  - Middle name: other.name.middle
    required: False
    show if: children[i].otherparent_exists
  - Last name: other.name.last
    show if: children[i].otherparent_exists
    
validation code: |
  if children[i].birthdate < today().minus(years=18):
    validation_error("The court asks only for children under 18", field="children[i].birthdate")
---
event: review2
question: |
  Please review your answers below
subquestion: |
  ${ children.table }
  
  ${ children.add_action() }
review: 
  - Change answer: parentalrelationship_pet_mom
    button: |
      % if parentalrelationship_pet_mom and children.target_number == 1:
      Your Parental Relationship to the Child: **Mother**
      % elif parentalrelationship_pet_mom and children.target_number >= 2:
      Your Parental Relationship to the Children: **Mother**
      % elif parentalrelationship_pet_dad and children.target_number == 1:
      Your Parental Relationship to the Child: **Father**
      % elif parentalrelationship_pet_dad and children.target_number >= 2:
      Your Parental Relationship to the Children: **Father**
      % elif not parentalrelationship_pet_mom and not parentalrelationship_pet_dad and children.target_number == 1:
      Your Parental Relationship to the Child: **${parentalrelationship_pet_other}**
      % elif not parentalrelationship_pet_mom and not parentalrelationship_pet_dad and children.target_number >= 2:
      Your Parental Relationship to the Children: **${parentalrelationship_pet_other}**
      % endif
  - Change answer: unborn_child
    button: "Are you or ${resp.name.first} currently pregnant? **${yesno(unborn_child)}**"
---
table: children.table
rows: children
columns:
  - Name: |
      row_item.name.full()
  - Age: |
      row_item.age_in_years()
  - Birthdate: |
      row_item.birthdate
  - Place of Birth: |
      row_item.birthplace
  - Sex: |
      "F" if row_item.sex == "sex_female" else "M"
  - Other Parent(s): |
      resp.name if not row_item.otherparent_exists else comma_and_list(otherparties) 
edit:
  - name.first
  - birthdate
  - birthplace
  - sex
  - otherparent_exists
---
template: dv_explanation
subject: "What is Domestic Violence?"
content: |
  Domestic violence is a range of behaviors used to establish power and exert control by one intimate partner over the other. (California Partnership to End Domestic Violence, 2015)

  Domestic violence is a pattern of assaultive and coercive behaviors that adults or adolescents use against their current or former intimate partners. (Missouri Coalition Against Domestic Violence, 2012)
---
template: dv_types_explanation
subject: "What are the types of Domestic Violence?"
content: |
  Domestic Violence, also known as intimate partner violence, refers to behavior by an intimate partner or ex-partner that causes physical, sexual or psychological harm, including physical aggression, sexual coercion, psychological abuse and controlling behaviors. Domestic violence encompasses a variety of abusive behaviors, such as: 
  
  - Physical abuse
  - Sexual and reproductive abuse
  - Emotional and psychological abuse
  - Financial / economic abuse
  - Spiritual abuse
  - Legal abuse
  - Technilogical / cyber abuse 
---
template: dv_law_explanation
subject: "How does the law define Domestic Violence?"
content: |
  [Family Code section 6203](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=6203.&lawCode=FAM), defines "abuse" as it relates to domestic violence. This section states that the following behaviors constitute domestic violence:

  - (1) To intentionally or recklessly cause or attempt to cause bodily injury.
  - (2) Sexual assault.
  - (3) To place a person in reasonable apprehension of imminent serious bodily injury to that person or to another.
  - (4) To engage in any behavior that has been or could be enjoined pursuant to Section 6320.
      (b) Abuse is not limited to the actual infliction of physical injury or assault.
      
  This definition should be read alongside [Family Code section 6211](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=6211.&lawCode=FAM) (which defines "domestic violence") and [Family Code section 6320](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=6320.&lawCode=FAM) (which describes the circumstances under which a court may issue an emergency restraining order).
  
  Certain conduct described under the California Penal Code also constitutes domestic violence, and will be considered by a court on request for a Domestic Violence Restraining Order. 
---
#### start of fl-105 question blocks
question: |
  % if children.target_number >= 1:
    **Your Children's Address Information**
  % else: 
    **Your Child's Address Information**
  % endif
subquestion: |
  % if children.target_number >= 1:
  **Please note that the following section addresses domestic violence and abuse.** 
  
  California mandates that if a party (or his or her children) alleges to be a victim of domestic violence or abuse at the hands of the opposing party, that the victim and his or her children's current address must remain confidential if unknown to the other party.  
  
  % else: 
  
  **Please note that the following section addresses domestic violence and abuse.** 
  
  California mandates that if a party (or his or her children) alleges to be a victim of domestic violence or abuse at the hands of the opposing party, that the victim and his or her children's current address must remain confidential if unknown to the other party.
  % endif

  ${collapse_template(dv_explanation)}
  ${collapse_template(dv_types_explanation)}
  ${collapse_template(dv_law_explanation)}
fields: 
  - Do you allege that you or your children have experienced domestic violence or abuse perpetrated by ${resp}?: alleged_abuse 
    datatype: yesnoradio
    label above field: true
  - Does ${resp} know your and your children's current location/address?: confidential_address
    datatype: yesnoradio
    show if: alleged_abuse 
    label above field: true
  - note: "Please note that your children's current address information will remain confidential on your court forms UNLESS you used this address as your mailing address. If this is the case, please go back and fill in a different mailing address."
    show if: confidential_address
---
question: |
  **Your Children's Address Information**
fields: 
  - Have your children always lived together?: different_addresses
    datatype: noyesradio
    label above field: true
---
question: |
  **Your Children's Address Information**
subquestion: |
  Fill in your Children's **Current** Address Information
fields: 
  - Street: childrens_current_street
  - City: childrens_current_city
  - State: childrens_current_state
    code: states_list()
  - Zip Code: childrens_current_zip
  - Fill in the person with whom the children currently live: childrens_address1_livedwith 
    help: |
      If the children live with you, write your full name here. If the children live with their other parent or another adult, write his or her full name here. If the children live with both you and the other parent or other adult, list both of your names.   
  - What is this person's relationship to the child: childrens_address1_livedwith_relationship
    help: |
      For example: Mother and Father, Grandmother, Uncle, etc.
  - When did the children start living at this address? : childrens_address1_startdate
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date when the children started living at this address, you may write the month and year (e.g. December 2012). 
  - Have the children lived at any other addresses within in the past 5 years?: yes_address2
    datatype: yesnoradio
  
  - note: 
      "Your Children's **Second** Most Recent Address"
    show if: yes_address2
  - Write the City and State of your children's second most recent address: childrens_address2
    show if: yes_address2
  - Fill in the person with whom the children lived: childrens_address2_livedwith 
    show if: yes_address2
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: childrens_address2_livedwith_address
    show if: yes_address2
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What is this person's relationship to the child: childrens_address2_livedwith_relationship
    show if: yes_address2
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did the children start living at this address?: childrens_address2_startdate
    show if: yes_address2
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Have the children lived at any other addresses within in the past 5 years?: yes_address3
    datatype: yesnoradio
    show if: yes_address2
    
  - note: 
      "Your Children's **Third** Most Recent Address"
    show if: yes_address3
  - Write the City and State of your children's third most recent address: childrens_address3
    show if: yes_address3
  - Fill in the person with whom the children lived: childrens_address3_livedwith 
    show if: yes_address3
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: childrens_address3_livedwith_address
    show if: yes_address3
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What is this person's relationship to the child: childrens_address3_livedwith_relationship
    show if: yes_address3
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did the children start living at this address?: childrens_address3_startdate
    show if: yes_address3
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Have the children lived at any other addresses within in the past 5 years?: yes_address4
    datatype: yesnoradio
    show if: yes_address3
    
  - note: 
      "Your Children's **Fourth** Most Recent Address"
    show if: yes_address4
  - Write the City and State of your children's fourth most recent address: childrens_address4
    show if: yes_address4
  - Fill in the person with whom the children lived: childrens_address4_livedwith 
    show if: yes_address4
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: childrens_address4_livedwith_address
    show if: yes_address4
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What is this person's relationship to the child: childrens_address4_livedwith_relationship
    show if: yes_address4
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did the children start living at this address?: childrens_address4_startdate
    show if: yes_address4
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
---
question: |
  **${children.item(0).name}'s Address Information**
subquestion: |
  Fill in ${children.item(0).name}'s **Current** Address Information
fields: 
  - Street: child1_street
  - City: child1_city
  - State: child1_state
    code: states_list()
  - Zip Code: child1_zip
  - Fill in the person ${children.item(0).name} lives with: child1_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child1_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(0).name}?: child1_livedwith_relationship
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(0).name} start living at this address?: child1_startdate
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(0).name} lived at any other addresses within in the past 5 years?: child1_address2
    datatype: yesnoradio
  
  - note: "Fill in ${children.item(0).name}'s **second** most recent address"
    show if: child1_address2 
  - City: child1_address2_city
    show if: child1_address2
  - State: child1_address2_state
    code: states_list()
    show if: child1_address2
  - Fill in the person ${children.item(0).name} lived with: child1_address2_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child1_address2 
  - What is this person's complete current address: child1_address2_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
    show if: child1_address2 
  - What was this person's relationship to ${children.item(0).name}?: child1_address2_livedwith_relationship
    show if: child1_address2
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(0).name} start living at this address?: child1_address2_startdate
    show if: child1_address2
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(0).name} lived at any other addresses within in the past 5 years?: child1_address3
    datatype: yesnoradio
    show if: child1_address2

  - note: "Fill in ${children.item(0).name}'s **third** most recent address"
    show if: child1_address3
  - City: child1_address3_city
    show if: child1_address3
  - State: child1_address3_state
    code: states_list()
    show if: child1_address3
  - Fill in the person ${children.item(0).name} lived with: child1_address3_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived.
    show if: child1_address3
  - What is this person's complete current address: child1_address3_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown.
    show if: child1_address3
  - What was this person's relationship to ${children.item(0).name}?: child1_address3_livedwith_relationship
    show if: child1_address3
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(0).name} start living at this address?: child1_address3_startdate
    show if: child1_address3
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(0).name} lived at any other addresses within in the past 5 years?: child1_address4
    datatype: yesnoradio
    show if: child1_address3
  
  - note: "Fill in ${children.item(0).name}'s **fourth** most recent address"
    show if: child1_address4
  - City: child1_address4_city
    show if: child1_address4
  - State: child1_address4_state
    code: states_list()
    show if: child1_address4
  - Fill in the person ${children.item(0).name} lived with: child1_address4_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child1_address4
  - What is this person's complete current address: child1_address4_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown.
    show if: child1_address4
  - What was this person's relationship to ${children.item(0).name}?: child1_address4_livedwith_relationship
    show if: child1_address4
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(0).name} start living at this address?: child1_address4_startdate
    show if: child1_address4
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
---
question: |
  **${children.item(1).name}'s Information**
subquestion: |
  Fill in ${children.item(1).name}'s **Current** Address Information
fields: 
  - Street: child2_street
  - City: child2_city
  - State: child2_state
    code: states_list()
  - Zip Code: child2_zip
  - Fill in the person ${children.item(1).name} lives with: child2_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child2_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(1).name}?: child2_livedwith_relationship
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(1).name} start living at this address?: child2_startdate
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(1).name} lived at any other addresses within in the past 5 years?: child2_address2
    datatype: yesnoradio
  
  - note: "Fill in ${children.item(1).name}'s **second** most recent address"
    show if: child2_address2
  - City: child2_address2_city
    show if: child2_address2
  - State: child2_address2_state
    code: states_list()
    show if: child2_address2
  - Fill in the person ${children.item(1).name} lived with: child2_address2_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child2_address2
  - What is this person's complete current address: child2_address2_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
    show if: child2_address2
  - What was this person's relationship to ${children.item(1).name}?: child2_address2_livedwith_relationship
    show if: child2_address2
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(1).name} start living at this address?: child2_address2_startdate
    show if: child2_address2
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(1).name} lived at any other addresses within in the past 5 years?: child2_address3
    datatype: yesnoradio
    show if: child2_address2

  - note: "Fill in ${children.item(1).name}'s **third** most recent address"
    show if: child2_address3
  - City: child2_address3_city
    show if: child2_address3
  - State: child2_address3_state
    code: states_list()
    show if: child2_address3
  - Fill in the person ${children.item(1).name} lived with: child2_address3_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child2_address3
  - What is this person's complete current address: child2_address3_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
    show if: child2_address3
  - What was this person's relationship to ${children.item(1).name}?: child2_address3_livedwith_relationship
    show if: child2_address3
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(1).name} start living at this address?: child2_address3_startdate
    show if: child2_address3
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(1).name} lived at any other addresses within in the past 5 years?: child2_address4
    datatype: yesnoradio
    show if: child2_address3
  
  - note: "Fill in ${children.item(1).name}'s **fourth** most recent address"
    show if: child2_address4
  - City: child2_address4_city
    show if: child2_address4
  - State: child2_address4_state
    code: states_list()
    show if: child2_address4
  - Fill in the person ${children.item(1).name} lived with: child2_address4_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived.
    show if: child2_address4
  - What is this person's complete current address: child2_address4_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown.
    show if: child2_address4
  - What was this person's relationship to ${children.item(1).name}?: child2_address4_livedwith_relationship
    show if: child2_address4
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(1).name} start living at this address?: child2_address4_startdate
    show if: child2_address4
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
---
question: |
  **${children.item(2).name}'s Information**
subquestion: |
  Fill in ${children.item(2).name}'s **Current** Address Information
fields: 
  - Street: child3_street
  - City: child3_city
  - State: child3_state
    code: states_list()
  - Zip Code: child3_zip
  - Fill in the person ${children.item(2).name} lived with: child3_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child3_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(2).name}?: child3_livedwith_relationship
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(2).name} start living at this address?: child3_startdate
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(2).name} lived at any other addresses within in the past 5 years?: child3_address2
    datatype: yesnoradio
  
  - note: "Fill in ${children.item(2).name}'s **second** most recent address"
    show if: child3_address2
  - City: child3_address2_city
    show if: child3_address2
  - State: child3_address2_state
    code: states_list()
    show if: child3_address2
  - Fill in the person ${children.item(2).name} lived with: child3_address2_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child3_address2
  - What is this person's complete current address: child3_address2_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
    show if: child3_address2
  - What was this person's relationship to ${children.item(2).name}?: child3_address2_livedwith_relationship
    show if: child3_address2
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(2).name} start living at this address?: child3_address2_startdate
    show if: child3_address2
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(2).name} lived at any other addresses within in the past 5 years?: child3_address3
    datatype: yesnoradio
    show if: child3_address2

  - note: "Fill in ${children.item(2).name}'s **third** most recent address"
    show if: child3_address3
  - City: child3_address3_city
    show if: child3_address3
  - State: child3_address3_state
    code: states_list()
    show if: child3_address3
  - Fill in the person ${children.item(2).name} lived with: child3_address3_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child3_address3
  - What is this person's complete current address: child3_address3_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
    show if: child3_address3
  - What was this person's relationship to ${children.item(2).name}?: child3_address3_livedwith_relationship
    show if: child3_address3
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(2).name} start living at this address?: child3_address3_startdate
    show if: child3_address3
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(2).name} lived at any other addresses within in the past 5 years?: child3_address4
    datatype: yesnoradio
    show if: child3_address3
  
  - note: "Fill in ${children.item(2).name}'s **fourth** most recent address"
    show if: child3_address4
  - City: child3_address4_city
    show if: child3_address4
  - State: child3_address4_state
    code: states_list()
    show if: child3_address4
  - Fill in the person ${children.item(2).name} lived with: child3_address4_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child3_address4
  - What is this person's complete current address: child3_address4_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
    show if: child3_address4
  - What was this person's relationship to ${children.item(2).name}?: child3_address4_livedwith_relationship
    show if: child3_address4
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(2).name} start living at this address?: child3_address4_startdate
    show if: child3_address4
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
---
question: |
  **${children.item(3).name}'s Information**
subquestion: |
  Fill in ${children.item(3).name}'s **Current** Address Information
fields: 
  - Street: child4_street
  - City: child4_city
  - State: child4_state
    code: states_list()
  - Zip Code: child4_zip
  - Fill in the person ${children.item(3).name} lived with: child4_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child4_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(3).name}?: child4_livedwith_relationship
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(3).name} start living at this address?: child4_startdate
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(3).name} lived at any other addresses within in the past 5 years?: child4_address2
    datatype: yesnoradio
  
  - note: "Fill in ${children.item(3).name}'s **second** most recent address"
    show if: child4_address2
  - City: child4_address2_city
    show if: child4_address2
  - State: child4_address2_state
    code: states_list()
    show if: child4_address2
  - Fill in the person ${children.item(3).name} lived with: child4_address2_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child4_address2
  - What is this person's complete current address: child4_address2_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown.
    show if: child4_address2
  - What was this person's relationship to ${children.item(3).name}?: child4_address2_livedwith_relationship
    show if: child4_address2
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(3).name} start living at this address?: child4_address2_startdate
    show if: child4_address2
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(3).name} lived at any other addresses within in the past 5 years?: child4_address3
    datatype: yesnoradio
    show if: child4_address2

  - note: "Fill in ${children.item(3).name}'s **third** most recent address"
    show if: child4_address3
  - City: child4_address3_city
    show if: child4_address3
  - State: child4_address3_state
    code: states_list()
    show if: child4_address3
  - Fill in the person ${children.item(3).name} lived with: child4_address3_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived.
    show if: child4_address3
  - What is this person's complete current address: child4_address3_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown.
    show if: child4_address3
  - What was this person's relationship to ${children.item(3).name}?: child4_address3_livedwith_relationship
    show if: child4_address3
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(3).name} start living at this address?: child4_address3_startdate
    show if: child4_address3
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(3).name} lived at any other addresses within in the past 5 years?: child4_address4
    datatype: yesnoradio
    show if: child4_address3
  
  - note: "Fill in ${children.item(3).name}'s **fourth** most recent address"
    show if: child4_address4
  - City: child4_address4_city
    show if: child4_address4
  - State: child4_address4_state
    code: states_list()
    show if: child4_address4
  - Fill in the person ${children.item(3).name} lived with: child4_address4_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child4_address4
  - What is this person's complete current address: child4_address4_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
    show if: child4_address4
  - What was this person's relationship to ${children.item(3).name}?: child4_address4_livedwith_relationship
    show if: child4_address4
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(3).name} start living at this address?: child4_address4_startdate
    show if: child4_address4
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
---
question: |
  **${children.item(4).name}'s Information**
subquestion: |
  Fill in ${children.item(4).name}'s **Current** Address Information
fields: 
  - Street: child5_street
  - City: child5_city
  - State: child5_state
    code: states_list()
  - Zip Code: child5_zip
  - Fill in the person ${children.item(4).name} currently lives with: child5_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child5_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(4).name}?: child5_livedwith_relationship
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(4).name} start living at this address?: child5_startdate
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(4).name} lived at any other addresses within in the past 5 years?: child5_address2
    datatype: yesnoradio
  
  - note: "Fill in ${children.item(4).name}'s **second** most recent address"
    show if: child5_address2
  - City: child5_address2_city
    show if: child5_address2
  - State: child5_address2_state
    code: states_list()
    show if: child5_address2
  - Fill in the person ${children.item(4).name} lived with: child5_address2_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child5_address2
  - What is this person's complete current address: child5_address2_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown."
    show if: child5_address2
  - What was this person's relationship to ${children.item(4).name}?: child5_address2_livedwith_relationship
    show if: child5_address2
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(4).name} start living at this address?: child5_address2_startdate
    show if: child5_address2
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(4).name} lived at any other addresses within in the past 5 years?: child5_address3
    datatype: yesnoradio
    show if: child5_address2

  - note: "Fill in ${children.item(4).name}'s **third** most recent address"
    show if: child5_address3
  - City: child5_address3_city
    show if: child5_address3
  - State: child5_address3_state
    code: states_list()
    show if: child5_address3
  - Fill in the person ${children.item(4).name} lived with: child5_address3_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child5_address3
  - What is this person's complete current address: child5_address3_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown." 
    show if: child5_address3
  - What was this person's relationship to ${children.item(4).name}?: child5_address3_livedwith_relationship
    show if: child5_address3
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(4).name} start living at this address?: child5_address3_startdate
    show if: child5_address3
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(4).name} lived at any other addresses within in the past 5 years?: child5_address4
    datatype: yesnoradio
    show if: child5_address3
  
  - note: "Fill in ${children.item(4).name}'s **fourth** most recent address"
    show if: child5_address4
  - City: child5_address4_city
    show if: child5_address4
  - State: child5_address4_state
    code: states_list()
    show if: child5_address4
  - Fill in the person ${children.item(4).name} lived with: child5_address4_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
    show if: child5_address4
  - What is this person's complete current address: child5_address4_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown."
    show if: child5_address4
  - What was this person's relationship to ${children.item(4).name}?: child5_address4_livedwith_relationship
    show if: child5_address4
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(4).name} start living at this address?: child5_address4_startdate
    show if: child5_address4
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
---
question: |
  **${children.item(5).name}'s Information**
subquestion: |
  Fill in ${children.item(5).name}'s **Current** Address Information
fields: 
  - Street: child6_street
  - City: child6_city
  - State: child6_state
    code: states_list()
  - Zip Code: child6_zip
  - Fill in the person ${children.item(5).name} currently lives with: child6_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child6_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(5).name}?: child6_livedwith_relationship
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(5).name} start living at this address?: child6_startdate
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(5).name} lived at any other addresses within in the past 5 years?: child6_address2
    datatype: yesnoradio
  
  - note: "Fill in ${children.item(5).name}'s **second** most recent address"
    show if: child6_address2
  - City: child6_address2_city
    show if: child6_address2
  - State: child6_address2_state
    code: states_list()
    show if: child6_address2
  - Fill in the person ${children.item(5).name} lived with: child6_address2_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child6_address2_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(5).name}?: child6_address2_livedwith_relationship
    show if: child6_address2
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(5).name} start living at this address?: child6_address2_startdate
    show if: child6_address2
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(5).name} lived at any other addresses within in the past 5 years?: child6_address3
    datatype: yesnoradio
    show if: child6_address2

  - note: "Fill in ${children.item(5).name}'s **third** most recent address"
    show if: child6_address3
  - City: child6_address3_city
    show if: child6_address3
  - State: child6_address3_state
    code: states_list()
    show if: child6_address3
  - Fill in the person ${children.item(5).name} lived with: child6_address3_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child6_address3_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(5).name}?: child6_address3_livedwith_relationship
    show if: child6_address3
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(5).name} start living at this address?: child6_address3_startdate
    show if: child6_address3
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
  - Has ${children.item(5).name} lived at any other addresses within in the past 5 years?: child6_address4
    datatype: yesnoradio
    show if: child6_address3
  
  - note: "Fill in ${children.item(5).name}'s **fourth** most recent address"
    show if: child6_address4
  - City: child6_address4_city
    show if: child6_address4
  - State: child6_address4_state
    code: states_list()
    show if: child6_address4
  - Fill in the person ${children.item(5).name} lived with: child6_address4_livedwith
    help: |
      Only include the parent(s) or other adult (if a parent was not present) with whom the children lived. 
  - What is this person's complete current address: child6_address4_livedwith_address
    help: |
      If you do not know this person's current address, you may write "Address Unknown. 
  - What was this person's relationship to ${children.item(5).name}?: child6_address4_livedwith_relationship
    show if: child6_address4
    help: |
      E.g.: Mother, Father, Grandmother, Uncle, etc.
  - When did ${children.item(5).name} start living at this address?: child6_address4_startdate
    show if: child6_address4
    help: |
      If the children have lived at this address their entire lives, you may write "Birth." If you don't know the exact date on which the children start living at this address, you may list the month and year.
---
question: |
  % if children.target_number >= 2: 
    **Prior Cases Involving your Children**
  % else:
    **Prior Cases Involving your Child**
  % endif
fields: 
  - Were you involved in, or do you know of, any other court case or custody and visitation proceeding involving any of your children?: custodyvisitation_priorcase_yes
    datatype: yesnoradio
    label above field: true
  - note: "Select each type of case in which your children were involved."
    show if: custodyvisitation_priorcase_yes
    
  - Family Law Case: custodyvisitation_priorcase_family
    datatype: yesnowide
    show if: custodyvisitation_priorcase_yes
    help: |
      E.g.: Divorce, Parentage/Paternity, Child Custody, etc. *Do not include domestic violence restraining orders here*
  - Guardianship Case: custodyvisitation_priorcase_guardianship
    datatype: yesnowide
    show if: custodyvisitation_priorcase_yes
  - Juvenile Delinquency/Juvenile Dependency: custodyvisitation_priorcase_juvenile
    datatype: yesnowide
    show if: custodyvisitation_priorcase_yes
    help: |
      *Do not include juvenile delinquency/dependency restraining/protective orders here*
  - Adoption: custodyvisitation_priorcase_adoption
    datatype: yesnowide
    show if: custodyvisitation_priorcase_yes
  - Other: custodyvisitation_priorcase_other
    datatype: yesnowide
    show if: custodyvisitation_priorcase_yes
    help: |
      *Do not include active restraining/protective orders here*
  
  - note: "**Family Law Case Information**"
    show if: custodyvisitation_priorcase_family
  - Case Number: custodyvisitation_priorcase_family_casenumber
    show if: custodyvisitation_priorcase_family
  - Court Name, State, and Location: custodyvisitation_priorcase_family_court
    show if: custodyvisitation_priorcase_family
  - Court Order or Judgment Date: custodyvisitation_priorcase_family_date
    datatype: ThreePartsDate
    required: false
    help: |
      If the case is ongoing, leave this blank. 
    show if: custodyvisitation_priorcase_family
  - Name of each child involved in the case: custodyvisitation_priorcase_family_children
    show if: custodyvisitation_priorcase_family
  - What was your connection to the case?: custodyvisitation_priorcase_family_connection
    show if: custodyvisitation_priorcase_family 
    help: |
      E.g.: Witness, Party, etc.
  - Is the case ongoing (i.e. currently pending)?: custodyvisitation_priorcase_family_ongoing
    datatype: yesnoradio
    show if: custodyvisitation_priorcase_family
  - If possible, upload a copy of these orders: custodyvisitation_priorcase_family_file
    datatype: files
    show if: custodyvisitation_priorcase_family
    required: false
  
  - note: "**Guardianship Case Information**"
    show if: custodyvisitation_priorcase_guardianship
  - Case Number: custodyvisitation_priorcase_guardianship_casenumber
    show if: custodyvisitation_priorcase_guardianship
  - Court Name, State, and Location: custodyvisitation_priorcase_guardianship_court
    show if: custodyvisitation_priorcase_guardianship
  - Court Order or Judgment Date: custodyvisitation_priorcase_guardianship_date
    datatype: ThreePartsDate
    required: false
    help: |
      If the case is ongoing, leave this blank. 
    show if: custodyvisitation_priorcase_guardianship
  - Name of each child involved in the case: custodyvisitation_priorcase_guardianship_children
    show if: custodyvisitation_priorcase_guardianship
  - What was your connection to the case?: custodyvisitation_priorcase_guardianship_connection
    show if: custodyvisitation_priorcase_guardianship 
    help: |
      E.g.: Witness, Party, etc.
  - Is the case ongoing (i.e. currently pending)?: custodyvisitation_priorcase_guardianship_ongoing
    datatype: yesnoradio
    show if: custodyvisitation_priorcase_guardianship
  - If possible, upload a copy of these orders: custodyvisitation_priorcase_guardianship_file
    datatype: files
    show if: custodyvisitation_priorcase_guardianship
    required: false
  
  - note: "**Juvenile Delinquency/Juvenile Dependency Case Information**"
    show if: custodyvisitation_priorcase_juvenile
  - Case Number: custodyvisitation_priorcase_juvenile_casenumber
    show if: custodyvisitation_priorcase_juvenile
  - Court Name, State, and Location: custodyvisitation_priorcase_juvenile_court
    show if: custodyvisitation_priorcase_juvenile
  - If possible, upload a copy of these orders: custodyvisitation_priorcase_juvenile_file
    datatype: files
    show if: custodyvisitation_priorcase_juveile
    required: false
  
  - note: "**Adoption Case Information**"
    show if: custodyvisitation_priorcase_adoption
  - Case Number: custodyvisitation_priorcase_adoption_casenumber
    show if: custodyvisitation_priorcase_adoption
  - Court Name, State, and Location: custodyvisitation_priorcase_adoption_court
    show if: custodyvisitation_priorcase_adoption
  - If possible, upload a copy of these orders: custodyvisitation_priorcase_adoption_file
    datatype: files
    show if: custodyvisitation_priorcase_adoption
    required: false
  
  - note: "**Other Case Information**"
    show if: custodyvisitation_priorcase_other
  - Case Number: custodyvisitation_priorcase_other_casenumber
    show if: custodyvisitation_priorcase_other
  - Court Name, State, and Location: custodyvisitation_priorcase_other_court
    show if: custodyvisitation_priorcase_other
  - Court Order or Judgment Date: custodyvisitation_priorcase_other_date
    datatype: ThreePartsDate
    required: false
    help: |
      If the case is ongoing, leave this blank. 
    show if: custodyvisitation_priorcase_other
  - Name of each child involved in the case: custodyvisitation_priorcase_other_children
    show if: custodyvisitation_priorcase_other
  - What was your connection to the case?: custodyvisitation_priorcase_other_connection
    show if: custodyvisitation_priorcase_other
    help: |
      E.g.: Witness, Party, etc.
  - Is the case ongoing (i.e. currently pending)?: custodyvisitation_priorcase_other_ongoing
    datatype: yesnoradio
    show if: custodyvisitation_priorcase_other
  - If possible, upload a copy of these orders: custodyvisitation_priorcase_other_file
    datatype: files
    show if: custodyvisitation_priorcase_other
    required: false
---
question: |
  % if children.target_number >= 2: 
    **Active Restraining/Protective Orders Involving your Children**
  % else:
    **Active Restraining/Protective Orders Involving your Child**
  % endif
fields: 
  - Are there any domestic violence restraining orders or protective orders involving any of your children that are now in effect?: custodyvisitation_priorrestrainingorders_yes
    datatype: yesnoradio
    label above field: true
  - note: "Select each type of restraining/protective order currently in effect."
    show if: custodyvisitation_priorrestrainingorders_yes
    
  - Criminal: custodyvisitation_priorrestrainingorders_criminal
    datatype: yesnowide
    show if: custodyvisitation_priorrestrainingorders_yes
    help: |
      E.g.: Criminal Protective Order
  - Family: custodyvisitation_priorrestrainingorders_family
    datatype: yesnowide
    show if: custodyvisitation_priorrestrainingorders_yes
    help: |
      E.g.: Domestic Violence Restraining Order
  - Juvenile Delinquency/Juvenile Dependency: custodyvisitation_priorrestrainingorders_juvenile
    datatype: yesnowide
    show if: custodyvisitation_priorrestrainingorders_yes
  - Other: custodyvisitation_priorrestrainingorders_other
    datatype: yesnowide
    show if: custodyvisitation_priorrestrainingorders_yes
    help: |
      E.g.: Civil Harassment Restraining Order

  - note: "**Criminal Restraining/Protective Order Case Information**"
    show if: custodyvisitation_priorrestrainingorders_criminal
  - County: custodyvisitation_priorrestrainingorders_criminal_county
    show if: custodyvisitation_priorrestrainingorders_criminal
    code: counties_list
  - State: custodyvisitation_priorrestrainingorders_criminal_state
    show if: custodyvisitation_priorrestrainingorders_criminal
    code: states_list()
  - Case Number (*if known*): custodyvisitation_priorrestrainingorders_criminal_casenumber
    required: false
    show if: custodyvisitation_priorrestrainingorders_criminal
  - Orders Expire (*date): custodyvisitation_priorrestrainingorders_criminal_expiration
    datatype: ThreePartsDate
    show if: custodyvisitation_priorrestrainingorders_criminal
  - If possible, upload a copy of these orders: custodyvisitation_priorrestrainingorders_criminal_file
    datatype: files
    show if: custodyvisitation_priorrestrainingorders_criminal
    required: false
  
  - note: "**Family Restraining/Protective Order Case Information**"
    show if: custodyvisitation_priorrestrainingorders_family
  - County: custodyvisitation_priorrestrainingorders_family_county
    show if: custodyvisitation_priorrestrainingorders_family
    code: counties_list
  - State: custodyvisitation_priorrestrainingorders_family_state
    show if: custodyvisitation_priorrestrainingorders_family
    code: states_list()
  - Case Number (*if known*): custodyvisitation_priorrestrainingorders_family_casenumber
    required: false
    show if: custodyvisitation_priorrestrainingorders_family
  - Orders Expire (*date): custodyvisitation_priorrestrainingorders_family_expiration
    datatype: ThreePartsDate
    show if: custodyvisitation_priorrestrainingorders_family
  - If possible, upload a copy of these orders: custodyvisitation_priorrestrainingorders_family_file
    datatype: files
    show if: custodyvisitation_priorrestrainingorders_family
    required: false
    
  - note: "**Juvenile Delinquency/Dependency Restraining/Protective Order Case Information**"
    show if: custodyvisitation_priorrestrainingorders_juvenile
  - County: custodyvisitation_priorrestrainingorders_juvenile_county
    show if: custodyvisitation_priorrestrainingorders_juvenile
    code: counties_list
  - State: custodyvisitation_priorrestrainingorders_juvenile_state
    show if: custodyvisitation_priorrestrainingorders_juvenile
    code: states_list()
  - Case Number (*if known*): custodyvisitation_priorrestrainingorders_juvenile_casenumber
    required: false
    show if: custodyvisitation_priorrestrainingorders_juvenile
  - Orders Expire (*date): custodyvisitation_priorrestrainingorders_juvenile_expiration
    datatype: ThreePartsDate
    show if: custodyvisitation_priorrestrainingorders_juvenile
  - If possible, upload a copy of these orders: custodyvisitation_priorrestrainingorders_juvenile_file
    datatype: files
    show if: custodyvisitation_priorrestrainingorders_juvenile
    required: false
    
  - note: "**Other Restraining/Protective Order Case Information**"
    show if: custodyvisitation_priorrestrainingorders_other
  - County: custodyvisitation_priorrestrainingorders_other_county
    show if: custodyvisitation_priorrestrainingorders_other
    code: counties_list
  - State: custodyvisitation_priorrestrainingorders_other_state
    show if: custodyvisitation_priorrestrainingorders_other
    code: states_list()
  - Case Number (*if known*): custodyvisitation_priorrestrainingorders_other_casenumber
    required: false
    show if: custodyvisitation_priorrestrainingorders_other
  - Orders Expire (*date): custodyvisitation_priorrestrainingorders_other_expiration
    datatype: ThreePartsDate
    show if: custodyvisitation_priorrestrainingorders_other
  - If possible, upload a copy of these orders: custodyvisitation_priorrestrainingorders_other_file
    datatype: files
    show if: custodyvisitation_priorrestrainingorders_other
    required: false
---
question: |
  **Other People With or Claiming to Have Custody or Visitation Rights**
fields:
  - Do you know of anyone, who is not a party in this case, who has or claims to have custody or visitation rights over any of your children?: otherpeoplewithcustodyrights_exist
    datatype: yesnoradio
    label above field: true
  - note: "Fill in this person's full name and address"
    show if: otherpeoplewithcustodyrights_exist
  - Full name: custodyvisitationrights_person1_name
    show if: otherpeoplewithcustodyrights_exist
  - Street Address: custodyvisitationrights_person1_address1
    show if: otherpeoplewithcustodyrights_exist
  - City, State, and Zip: custodyvisitationrights_person1_address2
    show if: otherpeoplewithcustodyrights_exist
  - Does this person have physical custody of your child(ren)?: custodyvisitationrights_person1_hascustody
    datatype: yesnoradio
    show if: otherpeoplewithcustodyrights_exist
    help: |
      Select 'Yes' if any of your children currently live with this person. 
  - Does this person claim custody rights?: custodyvisitationrights_person1_claimscustody
    datatype: yesnoradio
    show if: 
      variable: custodyvisitationrights_person1_hascustody
      is: False
  - Does this person claim visitation rights?: custodyvisitationrights_person1_claimsvisitation
    datatype: yesnoradio
    show if: otherpeoplewithcustodyrights_exist
  - Over which children is this person claiming custody and/or visitation rights? Write each child's full name (*separated by commas, if applicable)*: custodyvisitationrights_person1_children
    show if: otherpeoplewithcustodyrights_exist
    label above field: true
    
  - Is there another person who has or claims to have custody or visitation rights for any of your children?: custodyvisitationrights_person2
    datatype: yesnoradio
    show if: otherpeoplewithcustodyrights_exist
  - Full Name: custodyvisitationrights_person2_name
    show if: custodyvisitationrights_person2
  - Street Address: custodyvisitationrights_person2_address1
    show if: custodyvisitationrights_person2
  - City, State, and Zip: custodyvisitationrights_person2_address2
    show if: custodyvisitationrights_person2
  - Does this person have physical custody of your child(ren)?: custodyvisitationrights_person2_hascustody
    datatype: yesnoradio
    help: |
      Select 'Yes' if any of your children currently live with this person. 
    show if: custodyvisitationrights_person2
  - Does this person claim custody rights?: custodyvisitationrights_person2_claimscustody
    datatype: yesnoradio
    show if: 
      variable: custodyvisitationrights_person2_hascustody
      is: False
  - Does this person claim visitation rights?: custodyvisitationrights_person2_claimsvisitation
    datatype: yesnoradio
    show if: custodyvisitationrights_person2
  - Over which children is this person claiming custody and/or visitation rights? Write each child's full name (*separated by commas, if applicable)*: custodyvisitationrights_person2_children
    label above field: true
    show if: custodyvisitationrights_person2
    
  - Is there another person who has or claims to have custody or visitation rights for any of your children?: custodyvisitationrights_person3
    datatype: yesnoradio
    show if: custodyvisitationrights_person2
  - Full Name: custodyvisitationrights_person3_name
    show if: custodyvisitationrights_person3
  - Street Address: custodyvisitationrights_person3_address1
    show if: custodyvisitationrights_person3
  - City, State, and Zip: custodyvisitationrights_person3_address2
    show if: custodyvisitationrights_person3
  - Does this person have physical custody of your child(ren)?: custodyvisitationrights_person3_hascustody
    datatype: yesnoradio
    help: |
      Select 'Yes' if any of your children currently live with this person. 
    show if: custodyvisitationrights_person3
  - Does this person claim custody rights?: custodyvisitationrights_person3_claimscustody
    datatype: yesnoradio
    show if: 
      variable: custodyvisitationrights_person3_hascustody
      is: False
  - Does this person claim visitation rights?: custodyvisitationrights_person3_claimsvisitation
    datatype: yesnoradio
    show if: custodyvisitationrights_person3
  - Over which children is this person claiming custody and/or visitation rights? Write each child's full name (*separated by commas, if applicable)*: custodyvisitationrights_person3_children
    label above field: true
    show if: custodyvisitationrights_person3
---
#### start of child custody and visitation question blocks 
question: |
  **Child Custody and Visitation**
subquestion: |
  The next few pages contain general information regarding child custody and visitation orders and how to request them in California. 
  
  We encourage parents to read through this information regardless of whether they are requesting custody and visitation orders.
continue button field: cc_intro
---
question: |
  **What is Child Custody and Visitation?**
subquestion: |
  Parents that separate need to agree between themselves, or have a court decide and order, how and when each parent will spend time with their children (this is physical custody and visitation), and how decisions will be made for their children (this is legal custody). This is the essence of child custody and visitation. The following pages provide an overview of child custody and visitation, and the possible orders that can be requested. At a basic level:

  - **Child Custody** refers to the rights and responsibilities between parents for taking care of their children.
  - **Visitation** (aka parenting time) refers to how and when each parent will spend time with the children.
  
  Sometimes parents can agree on custody and visitation, also referred frequently in the courts as a “parenting plan.” Other times parents need the court to decide on the specific custody and visitation orders because they cannot agree on these orders. 
  
  **Helpful Resources**
  
  For an overview of the child custody and visitation process, please read the [Child Custody Information Sheet](https://www.courts.ca.gov/documents/fl314info.pdf).
  
  We also highly encourage you to review the California Court System's [Families Change Website](https://www.familieschange.ca.gov/), which offers a [free course](https://pas.familieschange.ca.gov/en/course/25-parenting-plan) that helps parents, teens, and children deal with a family break up. You will find links to services that can help you and other types of resources.
continue button field: cc_info1
---
question: |
  **How to ask for Child Custody and Visitation Orders**
subquestion: |
  While custody and visitation arrangements are unique to each family's circumstances, there are two basic paths available to request custody and visitation orders through your divorce case. The path you take depends on whether you and ${otherparent.name.first} can agree on a parenting plan: 

  ${collapse_template(cc_agreements_explanation)}
  ${collapse_template(cc_disagreements_explanation)}
continue button field: cc_info2 
---
template: cc_agreements_explanation
subject: "(1) If you and ${otherparent.name.first} have, or are both creating, a written agreement regarding child custody and visitation"
content: |
  Courts encourage parents to make their own agreements for custody and visitation. Any agreement that you make with the other parent, and is adopted by the court, is binding and enforceable. This written parenting agreement needs to contain information about:

  - **Time-share:** A schedule for when the children will be with each parent, also sometimes called a visitation schedule; and
  - **Decision-making:** How the parents will make decisions about the health, education, and welfare of the children.
  
  A written, detailed agreement, should minimize conflicts between parents when it comes to their rights and responsibilities concerning their children. 

  Your parenting agreement (also often referred by the courts as a "parenting plan") becomes a binding court order after it is signed by both of you, your signatures are notarized, signed by the judge, and filed with the court. 

  The procedure for writing a parenting agreement and getting a judge to sign it so that it becomes a court order may be different from court to court, even if the court forms are the same statewide. Visit your county's court website or talk to the court clerk to learn about how to have your parenting agreement become a court order. The court's Families Change website provides a [worksheet](https://pas.familieschange.ca.gov/en/course/26-parenting-plan-worksheet) that can help you and the other parent specify the details of how you will co-parent your children. If you are working with a mediator, child custody recommending counselor, or other family law professional, this worksheet can provide you with ideas to discuss in greater detail with that individual. 
---
template: cc_disagreements_explanation
subject: "(2) If you and ${otherparent.name.first} disagree on or do not have an agreement for child custody and visitation"
content: |  
  If you and ${otherparent.name.first} have not agreed on child custody and visitation, then you need to let the court know what orders you want for child custody and visitation, and you can do this in your Petition, or through a Request for Orders. 

  Identifying your preferred orders in your Petition is beneficial, because if the other parent does not respond to the Petition, the court then can grant you these orders if you proceed through what is known as the “default prove up” process (KELLY, HERE WE SHOULD LINK TO THE DEFAULT EXPLANATION SECTION). 

  If you are not sure of the specific child custody and visitation orders that you want when you are filing your Petition, you do need to at least state in your Petition what physical and legal custody orders you want, and can state that you want “reasonable” visitation orders issued--meaning that visitation will be determined later. The specific visitation orders can later be determined through the default prove up process, or through the Request for Order process (KELLY, WE WILL LINK HERE TO OUR SECTION ON RFOs).  
---
question: |
  **Child Custody and Domestic Violence**
subquestion: |
  **In cases involving domestic violence, judges follow specific domestic violence laws in making orders on child custody and visitation.**
  
  If there’s been domestic violence in your family, the domestic violence laws will apply. Which law applies depends on when the domestic violence happened and if a court was involved.
  
  **If there was a conviction for domestic violence against a parent or a restraining order has issued against a parent for committing domestic violence**
  
  If a parent was convicted or found by a court to have committed domestic violence for an incident that happened in the last five years, then the court will presume that the abusive parent should not have joint or sole legal and physical custody of a child, and will require the abusive parent to prove to the court otherwise based on the law that governs these situations. 

  If the abusive parent cannot overcome the presumption against him or her having joint or sole legal and physical custody of a child, the court will typically grant the other parent sole legal and physical custody of the child, with the abusive parent having some form of visitation.

  **If one parent accuses the other parent of domestic violence**
  
  If a parent accuses the other parent of domestic violence, the court must determine whether domestic violence was actually committed by the other parent. If a court determines that domestic violence was committed, then the court must decide what form or custody and visitation would be best for the child. If the judge gives any custody or unsupervised visits to the parent who committed domestic violence, the judge must clearly explain the reasons for doing so.

continue button field: cc_info_dv
---
question: |
  **Requesting Orders:** Child Custody and Visitation  
fields:
  - Would you like to request a child custody and visitation order for your children?: custodyvisitation_requesting_orders
    datatype: yesnoradio
    label above field: true
  - Do you and ${otherparent.name.first} have, or are you both creating, a written agreement regarding child custody and visitation?: cc_agreement
    datatype: yesnoradio 
    label above field: true
    show if: custodyvisitation_requesting_orders
  - note: "If you select 'Yes,' you will be directed to answer questions that will fill in our Child Custody and Visitation Agreement template. Click [here](link) to view that template."
    show if: custodyvisitation_requesting_orders
  - note: "If you would rather request your preferred orders now (in your Petition) and wait for ${otherparent.name.first} to file a Response with his or her preferred orders prior to structuring your custody and visitation agreement, select 'No.'"
    show if: custodyvisitation_requesting_orders
  - note: "As a reminder, if you are not sure of the specific child custody and visitation orders that you want when you are filing your Petition, you do need to at least state in your Petition what physical and legal custody orders you want, and can state that you want “reasonable” visitation orders issued--meaning that visitation will be determined later. The specific visitation orders can later be determined through the default prove up process, or through the Request for Order process [insert link]"
    show if: custodyvisitation_requesting_orders
---
question: |
  **Child Custody and Visitation Agreement**
subquestion: |
  You have indicated that you and ${otherparent.name.first} have, or are both creating, a written agreement on child custody and visitation. 
  
  Once you have completed this **Divorce Petition** module, you may start the **Child Custody and Visitation Agreement Module** to begin filling in the court forms for your parenting plan.
continue button field: cc_agreement_info
---
question: |
  **Requesting *Temporary* Orders:** Child Custody and Visitation  
subquestion: |
  Child custody and visitation orders will not go into effect until a judge finalizes your divorce. California law states that the **earliest** you can be divorced is 6 months and 1 day from one of the following three dates (whichever occurs first):
  
  - (1) The date ${otherparent.name.first} was served with (given) your Petition and Summons;
  - (2) The date ${otherparent.name.first}'s Response was filed; or
  - (3) The date the Appearance, Stipulations, and Waivers was filed (in uncontested divorce cases)
  
  **BUT divorce cases can take much longer.** That said, you may request temporary child custody and visitation orders that, if granted, will go into effect temporarily until your divorce is finalized. 
fields:
  - Would you like to request a temporary child custody and visitation order: custodyvisitation_requesting_temporary_orders
    datatype: yesnoradio
    label above field: true
  - Are you requesting to change a prior custody and/or visitation order currently in effect?: amend_custodyvisitation
    datatype: yesnoradio
    show if: custodyvisitation_requesting_temporary_orders
  - When was this order filed?: amend_custodyvisitation_date
    show if: amend_custodyvisitation
    datatype: ThreePartsDate
---
question: |
  **Requesting *Ex Parte (Temporary Emergency)* Orders:** Child Custody and Visitation
subquestion: |
  Sometimes, if a person can show that there is a risk that the child will be harmed or removed from the state of California if the court does not do something that day or within a few days, he or she can ask the court to make temporary custody orders on an emergency basis.

  These emergency orders are also called “ex parte orders,” and they will only be in place for a short time. After making emergency orders, the court will schedule a regular hearing to consider whether the orders should be extended beyond the temporary period. The other parent must be told about that later hearing, and he or she has the right to be at that hearing.

  It is extremely hard to get temporary orders. You must prove to the court that there is an immediate risk of abduction or harm to the child. So make sure you explain in detail why you believe these temporary orders are necessary to protect your child. 
  
  “Immediate harm to the child” includes, but is not limited to, the following:

  - (1) Having a parent who has committed acts of domestic violence, where the court determines that the acts of domestic violence are of recent origin or are a part of a demonstrated and continuing pattern of acts of domestic violence.
  - (2) Sexual abuse of the child, where the court determines that the acts of sexual abuse are of recent origin or are a part of a demonstrated and continuing pattern of acts of sexual abuse.
fields: 
  - Do you need temporary emergency custody and visitation orders to protect your children from immediate and irreparable harm or abduction?: custodyvisitation_requesting_exparte_orders
    datatype: yesnoradio
    label above field: true
  - Would you like to request a visitation order under your request for temporary emergency orders?: visitation_exparte_orders
    datatype: yesnoradio
    show if: custodyvisitation_requesting_exparte_orders
  - Specify the visitation schedule that you are asking the court to immediately enforce per your request for temporary emergency orders: visitation_exparte_orders_specify
    input type: area
    show if: visitation_exparte_orders  
---
question: |
  **Requesting Orders:** Child Custody and Visitation
subquestion: |
  % if alleged_abuse:
  **Legal Custody:** This pertains to who makes important, long-term decisions about a child’s upbringing and welfare, such as, *Where will the child go to school? Who will be the child’s doctor? Whether the child should undergo any special medical or mental health treatment? What religion should a child practice? In what sports or activities should a child participate?* 
  
  **Joint Legal Custody:** Both parents make these decisions.
  
  **Sole Legal Custody:** One parent makes these decisions.
   
   Joint legal custody is most commonly awarded in cases unless the court finds one parent is unfit or incapable of making these decisions. The court makes its determination of custody based on what is best for the child—NOT the parents.
   
   Please note that joint legal custody is typically not appropriate for cases in which domestic violence, substance abuse, or child neglect is present.
   
   [Family Code Section 3044](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=3044) provides that if a parent is found by a court to have committed domestic violence and the couple have children together, then it is presumed that the parent that committed domestic violence should not have sole or joint physical and legal custody of the children. It then falls on the abusive parent to present evidence to the court that rebuts this presumption. 
    % else:
  **Legal Custody:** This pertains to who makes important, long-term decisions about a child’s upbringing and welfare, such as, *Where will the child go to school? Who will be the child’s doctor? Whether the child should undergo any special medical or mental health treatment? What religion should a child practice? In what sports or activities should a child participate?* 
  
  **Joint Legal Custody:** Both parents make these decisions.
  
  **Sole Legal Custody:** One parent makes these decisions.
   
  Joint legal custody is most commonly awarded in cases unless the court finds one parent is unfit or incapable of making these decisions. The court makes its determination of custody based on what is best for the child—NOT the parents.
   
   Please note that joint legal custody is typically not appropriate for cases in which domestic violence, substance abuse, or child neglect is present.
   
   % endif
continue button field: continue_to_legalcustody
---
template: legalcustody_explanation
subject: "What is **Legal Custody**?"
content: |
  Who makes important, long-term decisions about the children’s upbringing and welfare, such as:
  
  * Where do they go to school? 
  * What sports or activities do they do? 
  * Where do they receive healthcare and under whose insurance? 
  * What religion do they practice?
---
template: jointlegalcustody_explanation
subject: "Joint Legal Custody"
content: |
  Both parents make these decisions. 
---
template: solelegalcustody_explanation
subject: "Sole Legal Custody" 
content: |
  One parent makes these decisions.
---
template: otherlegalcustody_explanation
subject: "Other Legal Custody Information"
content: |
  Joint legal custody is most commonly awarded in cases unless the court finds one parent to be unfit or incapable of making these decisions. The court makes its determination of custody based on what is best for the child--NOT the parents. 
  
  **Please note, joint legal custody is most often unfit for cases in which domestic violence, substance abuse, or child neglect is present.**
---
question: |
  **Requesting Orders:** Child Custody and Visitation
subquestion: |
  **Legal Custody:** What type of legal custody order would you like to request for **${ children[i] }**?
right: |
  ${collapse_template(legalcustody_explanation)}
  ${collapse_template(jointlegalcustody_explanation)}
  ${collapse_template(solelegalcustody_explanation)}
  ${collapse_template(otherlegalcustody_explanation)}
under: |
  Please note that if you request joint legal custody, you may still request special decision-making authority under the "Additional Provisions" section (on the following pages). This enables the court to grant one parent final decision-making authority over specific issues. 

  *For example, a mother may wish to request special decision-making authority over her daughter's reproductive healthcare, which the court may grant on the condition that she is required to first consult with the other parent concerning any significant decisions (except in cases of emergency).* 
fields: 
  - no label: children[i].type_of_legal_custody
    choices:
      - Sole Legal Custody to ${ pet }: solelegalcustody_to_pet
      - Sole Legal Custody to ${ otherparent }: solelegalcustody_to_otherparent
      - Joint Legal Custody to ${ pet } and ${ otherparent }: jointlegalcustody_to_pet_and_otherparent
---
template: physicalcustody_explanation
subject: "What is **Physical Custody**?"
content: |
  Who the children live with.
---
template: jointphysicalcustody_explanation
subject: "Joint Physical Custody"
content: |
  The children live with both parents and alternates households based on an agreed upon visitation schedule.
---
template: primaryphysicalcustody_explanation
subject: "Primary Physical Custody"
content: |
  The children live primarily with one parent (i.e., significantly more that 50% of the custodial time).
---
template: solephysicalcustody_explanation
subject: "Sole Physical Custody"
content: |  
  The children live in one parent’s household.
---
template: otherphysicalcustody_explanation
subject: "Physical Custody vs. Visitation"
content: |  
  Please note the difference between custody and vistation. Physical custody determines where the child lives, whereas visitation outlines the days/times that the child spends with each parent. 
   
   *For example, if you request sole physical custody of your child, this means that you're requesting that your child will live in your household--NOT that they do not get to spend time with ${otherparent.name.first}.* 
---
question: |
  **Requesting Orders:** Child Custody and Visitation
subquestion: |
  **Physical Custody:** Who the children live with. 
  
  **Joint Physical Custody:** The children live with both parents and alternates households based on an agreed upon visitation schedule.
  
  **Primary Physical Custody** The children live primarily with one parent (i.e., significantly more that 50% of the custodial time).
  
  **Sole Physical Custody:** The children live in one parent’s household. 
   
   *Please note the difference between custody and vistation. Physical custody determines where the child lives, whereas visitation outlines the days/times that the child spends with each parent.* 
   
   *For example, if you request sole physical custody of your child, this means that you're requesting that your child will live in your household--NOT that they do not get to spend time with ${otherparent.name.first}.* 
continue button field: continue_to_physicalcustody
---
question: |
  **Requesting Orders:** Child Custody and Visitation 
subquestion: |
  **Physical Custody:** What type of physical custody order would you like to request for **${ children[i] }**?
right: |
  ${collapse_template(physicalcustody_explanation)}
  ${collapse_template(jointphysicalcustody_explanation)}
  ${collapse_template(primaryphysicalcustody_explanation)}
  ${collapse_template(solephysicalcustody_explanation)}
  ${collapse_template(otherphysicalcustody_explanation)}
fields: 
  - no label: children[i].type_of_physical_custody
    choices:
      - Sole Physical Custody to ${ pet }: solephysicalcustody_to_pet
      - Sole Physical Custody to ${ otherparent }: solephysicalcustody_to_otherparent
      - Primary Physical Custody to ${ pet }: primaryphysicalcustody_to_pet
      - Primary Physical Custody to ${ otherparent }: primaryphysicalcustody_to_otherparent
      - Joint Physical Custody to ${ pet } and ${ otherparent }: jointphysicalcustody_to_pet_and_otherparent
---
question: |
  **Requesting Orders:** Child Custody and Visitation
subquestion: |
  **Review Your Requested Custody Orders**
  
  Based on your responses, you have requested:
  
  % if children.item(0).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(0).name} to yourself
  % elif (children.item(0).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(0).otherparent_exists:
  - Sole legal custody of ${children.item(0).name} to ${resp}
  % elif (children.item(0).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(0).otherparent_exists:
  - Sole legal custody of ${children.item(0).name} to ${other}
  % elif children.item(0).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(0).name} between yourself and ${otherparent}
  % endif
  % if children.item(1).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(1).name} to yourself
  % elif (children.item(1).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(1).otherparent_exists:
  - Sole legal custody of ${children.item(1).name} to ${resp}
  % elif (children.item(1).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(1).otherparent_exists:
  - Sole legal custody of ${children.item(1).name} to ${other}
  % elif children.item(1).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(1).name} between yourself and ${otherparent}
  % endif
  % if children.item(2).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(2).name} to yourself
  % elif (children.item(2).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(2).otherparent_exists:
  - Sole legal custody of ${children.item(2).name} to ${resp}
  % elif (children.item(2).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(2).otherparent_exists:
  - Sole legal custody of ${children.item(2).name} to ${other}
  % elif children.item(2).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(2).name} between yourself and ${otherparent}
  % endif
  % if children.item(3).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(3).name} to yourself
  % elif (children.item(3).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(3).otherparent_exists:
  - Sole legal custody of ${children.item(3).name} to ${resp}
  % elif (children.item(3).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(3).otherparent_exists:
  - Sole legal custody of ${children.item(3).name} to ${other}
  % elif children.item(3).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(3).name} between yourself and ${otherparent}
  % endif
  % if children.item(4).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(4).name} to yourself
  % elif (children.item(4).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(4).otherparent_exists:
  - Sole legal custody of ${children.item(4).name} to ${resp}
  % elif (children.item(4).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(4).otherparent_exists:
  - Sole legal custody of ${children.item(4).name} to ${other}
  % elif children.item(4).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(4).name} between yourself and ${otherparent}
  % endif
  % if children.item(5).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(5).name} to yourself
  % elif (children.item(5).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(5).otherparent_exists:
  - Sole legal custody of ${children.item(5).name} to ${resp}
  % elif (children.item(5).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(5).otherparent_exists:
  - Sole legal custody of ${children.item(5).name} to ${other}
  % elif children.item(5).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(5).name} between yourself and ${otherparent}
  % endif
  % if children.item(6).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(6).name} to yourself
  % elif (children.item(6).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(6).otherparent_exists:
  - Sole legal custody of ${children.item(6).name} to ${resp}
  % elif (children.item(6).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(6).otherparent_exists:
  - Sole legal custody of ${children.item(6).name} to ${other}
  % elif children.item(6).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(6).name} between yourself and ${otherparent}
  % endif
  % if children.item(7).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(7).name} to yourself
  % elif (children.item(7).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(7).otherparent_exists:
  - Sole legal custody of ${children.item(7).name} to ${resp}
  % elif (children.item(7).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(7).otherparent_exists:
  - Sole legal custody of ${children.item(7).name} to ${other}
  % elif children.item(7).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(7).name} between yourself and ${otherparent}
  % endif
  % if children.item(8).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(8).name} to yourself
  % elif (children.item(8).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(8).otherparent_exists:
  - Sole legal custody of ${children.item(8).name} to ${resp}
  % elif (children.item(8).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(8).otherparent_exists:
  - Sole legal custody of ${children.item(8).name} to ${other}
  % elif children.item(8).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(8).name} between yourself and ${otherparent}
  % endif
  % if children.item(9).type_of_legal_custody == 'solelegalcustody_to_pet':
  - Sole legal custody of ${children.item(9).name} to yourself
  % elif (children.item(9).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(9).otherparent_exists:
  - Sole legal custody of ${children.item(9).name} to ${resp}
  % elif (children.item(9).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(9).otherparent_exists:
  - Sole legal custody of ${children.item(9).name} to ${other}
  % elif children.item(9).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
  - Joint legal custody of ${children.item(9).name} between yourself and ${otherparent}
  % endif
  
  % if children.item(0).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(0).name} to yourself
  % elif (children.item(0).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(0).otherparent_exists:
  - Sole physical custody of ${children.item(0).name} to ${resp}
  % elif (children.item(0).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(0).otherparent_exists:
  - Sole physical custody of ${children.item(0).name} to ${other}
  % elif children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(0).name} to yourself
  % elif (children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(0).otherparent_exists:
  - Primary physical custody of ${children.item(0).name} to ${resp}
  % elif (children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(0).otherparent_exists:
  - Primary physical custody of ${children.item(0).name} to ${other}
  % elif children.item(0).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(0).name} between yourself and ${otherparent}
  % endif
  % if children.item(1).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(1).name} to yourself
  % elif (children.item(1).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(1).otherparent_exists:
  - Sole physical custody of ${children.item(1).name} to ${resp}
  % elif (children.item(1).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(1).otherparent_exists:
  - Sole physical custody of ${children.item(1).name} to ${other}
  % elif children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(1).name} to yourself
  % elif (children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(1).otherparent_exists:
  - Primary physical custody of ${children.item(1).name} to ${resp}
  % elif (children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(1).otherparent_exists:
  - Primary physical custody of ${children.item(1).name} to ${other}
  % elif children.item(1).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(1).name} between yourself and ${otherparent}
  % endif
  % if children.item(2).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(2).name} to yourself
  % elif (children.item(2).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(2).otherparent_exists:
  - Sole physical custody of ${children.item(2).name} to ${resp}
  % elif (children.item(2).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(2).otherparent_exists:
  - Sole physical custody of ${children.item(2).name} to ${other}
  % elif children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(2).name} to yourself
  % elif (children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(2).otherparent_exists:
  - Primary physical custody of ${children.item(2).name} to ${resp}
  % elif (children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(2).otherparent_exists:
  - Primary physical custody of ${children.item(2).name} to ${other}
  % elif children.item(2).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(2).name} between yourself and ${otherparent}
  % endif
  % if children.item(3).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(3).name} to yourself
  % elif (children.item(3).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(3).otherparent_exists:
  - Sole physical custody of ${children.item(3).name} to ${resp}
  % elif (children.item(3).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(3).otherparent_exists:
  - Sole physical custody of ${children.item(3).name} to ${other}
  % elif children.item(3).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(3).name} to yourself
  % elif (children.item(3).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(3).otherparent_exists:
  - Primary physical custody of ${children.item(3).name} to ${resp}
  % elif (children.item(3).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(3).otherparent_exists:
  - Primary physical custody of ${children.item(3).name} to ${other}
  % elif children.item(3).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(3).name} between yourself and ${otherparent}
  % endif
  % if children.item(4).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(4).name} to yourself
  % elif (children.item(4).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(4).otherparent_exists:
  - Sole physical custody of ${children.item(4).name} to ${resp}
  % elif (children.item(4).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(4).otherparent_exists:
  - Sole physical custody of ${children.item(4).name} to ${other}
  % elif children.item(4).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(4).name} to yourself
  % elif (children.item(4).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(4).otherparent_exists:
  - Primary physical custody of ${children.item(4).name} to ${resp}
  % elif (children.item(4).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(4).otherparent_exists:
  - Primary physical custody of ${children.item(4).name} to ${other}
  % elif children.item(4).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(4).name} between yourself and ${otherparent}
  % endif
  % if children.item(5).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(5).name} to yourself
  % elif (children.item(5).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(5).otherparent_exists:
  - Sole physical custody of ${children.item(5).name} to ${resp}
  % elif (children.item(5).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(5).otherparent_exists:
  - Sole physical custody of ${children.item(5).name} to ${other}
  % elif children.item(5).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(5).name} to yourself
  % elif (children.item(5).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(5).otherparent_exists:
  - Primary physical custody of ${children.item(5).name} to ${resp}
  % elif (children.item(5).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(5).otherparent_exists:
  - Primary physical custody of ${children.item(5).name} to ${other}
  % elif children.item(5).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(5).name} between yourself and ${otherparent}
  % endif
  % if children.item(6).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(6).name} to yourself
  % elif (children.item(6).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(6).otherparent_exists:
  - Sole physical custody of ${children.item(6).name} to ${resp}
  % elif (children.item(6).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(6).otherparent_exists:
  - Sole physical custody of ${children.item(6).name} to ${other}
  % elif children.item(6).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(6).name} to yourself
  % elif (children.item(6).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(6).otherparent_exists:
  - Primary physical custody of ${children.item(6).name} to ${resp}
  % elif (children.item(6).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(6).otherparent_exists:
  - Primary physical custody of ${children.item(6).name} to ${other}
  % elif children.item(6).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(6).name} between yourself and ${otherparent}
  % endif
  % if children.item(7).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(7).name} to yourself
  % elif (children.item(7).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(7).otherparent_exists:
  - Sole physical custody of ${children.item(7).name} to ${resp}
  % elif (children.item(7).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(7).otherparent_exists:
  - Sole physical custody of ${children.item(7).name} to ${other}
  % elif children.item(7).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(7).name} to yourself
  % elif (children.item(7).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(7).otherparent_exists:
  - Primary physical custody of ${children.item(7).name} to ${resp}
  % elif (children.item(7).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(7).otherparent_exists:
  - Primary physical custody of ${children.item(7).name} to ${other}
  % elif children.item(7).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(7).name} between yourself and ${otherparent}
  % endif
  % if children.item(8).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(8).name} to yourself
  % elif (children.item(8).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(8).otherparent_exists:
  - Sole physical custody of ${children.item(8).name} to ${resp}
  % elif (children.item(8).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(8).otherparent_exists:
  - Sole physical custody of ${children.item(8).name} to ${other}
  % elif children.item(8).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(8).name} to yourself
  % elif (children.item(8).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(8).otherparent_exists:
  - Primary physical custody of ${children.item(8).name} to ${resp}
  % elif (children.item(8).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(8).otherparent_exists:
  - Primary physical custody of ${children.item(8).name} to ${other}
  % elif children.item(8).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(8).name} between yourself and ${otherparent}
  % endif
  % if children.item(9).type_of_physical_custody == 'solephysicalcustody_to_pet':
  - Sole physical custody of ${children.item(9).name} to yourself
  % elif (children.item(9).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(9).otherparent_exists:
  - Sole physical custody of ${children.item(9).name} to ${resp}
  % elif (children.item(9).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(9).otherparent_exists:
  - Sole physical custody of ${children.item(9).name} to ${other}
  % elif children.item(9).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
  - Primary physical custody of ${children.item(9).name} to yourself
  % elif (children.item(9).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not children.item(9).otherparent_exists:
  - Primary physical custody of ${children.item(9).name} to ${resp}
  % elif (children.item(9).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and children.item(9).otherparent_exists:
  - Primary physical custody of ${children.item(9).name} to ${other}
  % elif children.item(9).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
  - Joint physical custody of ${children.item(9).name} between yourself and ${otherparent}
  % endif
  
  If this is incorrect, please go back and correct your responses.
continue button field: custody_review
---
question: |
  **Requesting Orders:** Child Custody and Visitation
subquestion: |
  **What is Visitation?**
  
  Visitation is the schedule for how and when you and the other parent will share time with your children, and it is typically granted to a parent who has the children less than half of the time. There are different types of Visitation:
  
  **Visitation According to a Schedule:** This is a specific schedule, whether weekly or monthly, under which you will share time with your children with the other parent. It may be as specific or as general as you’d like, and can state a specific schedule for when you and the other parent will have the children--e.g., days, times, weekends, holidays, vacations, how transportation of the children between parents will be shared, locations of visitation exchanges, limitations on travel, and other details. A specific schedule is preferred. If you request visitation according to a schedule for Debra, you may also request that it be supervised. 
  
  **Supervised Visitation:** This type of visitation plan is most often ordered when a parent is determined to present a risk to the children’s safety or well-being, warranting the presence of a third party to supervise visits with the other parent. This third party can be you, another adult (such as a friend or relative), or a professional monitor. Supervised visitation is also used in reunification situations—where a parent and the children have not seen each other for quite some. 
  
  **Reasonable Visitation:** This type of visitation is not per a specific schedule, but is left open-ended for you and your spouse/partner to resolve between yourselves once visitation is ordered by the court. Reasonable visitation plans are often suited for parents with an amicable relationship (the parents get along) and communicate well with one another. Reasonable Visitation is/becomes problematic if you and your spouse/partner cannot agree on when visitation will be after reasonable visitation is ordered.
  
  **No Visitation:** This option is used when visitation with the other parent, even under supervision, is not appropriate. This may be due to past emotional or physical harm that the children have suffered as a result of the other parent, domestic violence by one parent against the other, or some other circumstance.
   
continue button field: continue_to_visitation
---
template: visitation_explanation
subject: "What is **Visitation**?" 
content: |
  Visitation is the schedule for how you and the other parent will share time with your children, and it is typically granted to a parent who has the children less than half of the time.
---
template: scheduledvisitation_explanation
subject: "Visitation According to a Schedule"
content: |
  This is a specific schedule, whether weekly or monthly, under which you will share time with your children with the other parent. It may be as specific or as general as you’d like, and can state a specific schedule for when you and the other parent will have the children--e.g., days, times, weekends, holidays, vacations, how transportation of the children between parents will be shared, locations of visitation exchanges, limitations on travel, and other details. A specific schedule is preferred. If you request visitation according to a schedule for Debra, you may also request that it be supervised. 
---
template: supervisedvisitation_explanation
subject: "Supervised Visitation"
content: |
  This type of visitation plan is most often ordered when a parent is determined to present a risk to the children’s safety or well-being, warranting the presence of a third party to supervise visits with the other parent. This third party can be you, another adult (such as a friend or relative), or a professional monitor. Supervised visitation is also used in reunification situations—where a parent and the children have not seen each other for quite some. 
---
template: reasonablevisitation_explanation
subject: "Reasonable Visitation"
content: |
  This type of visitation is not per a specific schedule, but is left open-ended for you and your spouse/partner to resolve between yourselves once visitation is ordered by the court. Reasonable visitation plans are often suited for parents with an amicable relationship (the parents get along) and communicate well with one another. Reasonable Visitation is/becomes problematic if you and your spouse/partner cannot agree on when visitation will be after reasonable visitation is ordered.
---
template: novisitation_explanation
subject: "No Visitation"
content: |
  This option is used when visitation with the other parent, even under supervision, is not appropriate. This may be due to past emotional or physical harm that the children have suffered as a result of the other parent, domestic violence by one parent against the other, or some other circumstance.
---
question: |
  **Requesting Orders:** Visitation 
right: |
  ${collapse_template(visitation_explanation)}
  ${collapse_template(scheduledvisitation_explanation)}
  ${collapse_template(reasonablevisitation_explanation)}
  ${collapse_template(novisitation_explanation)}
  ${collapse_template(supervisedvisitation_explanation)}
fields: 
  - Would you like to request that ${ noncustodialparty.name.first } is granted visitation?: granted_visitation
    datatype: yesnoradio
    label above field: true
  - note: "Based on your responses, you are requesting that ${ noncustodialparty.name.first } be denied visitation (i.e. granted ** no visitation**)."
    show if: 
      variable: granted_visitation
      is: false
  - note: "*If this is incorrect, please review and correct your answer above.*"
    show if: 
      variable: granted_visitation
      is: false
    
  - Would you like to request visitation according to a schedule? (Note that if you would like to hold off on requesting a specific visitation schedule right now, select "No" and you may request your preferred schedule later in your case through the Request for Order process or at trial.): scheduled_visitation
    datatype: yesnoradio
    show if: granted_visitation
    label above field: true
    
  - note: "Based on your responses, you have indicated that you would like to request reasonable visitation with ${otherparent.name.first} (i.e. an arrangement in which you and ${otherparent.name.first} will decide between yourselves on a go forward basis when ${otherparent.name.first} will see the children)."
    show if: 
      variable: scheduled_visitation
      is: False
  - note: "If this is incorrect, please review and correct your responses to the above questions." 
    show if: 
      variable: scheduled_visitation
      is: False
  - note: "Please note that this type of visitation schedule is difficult to enforce, and may require the parents to go to court to establish a specific visitation schedule if the parents cannot agree on reasonable visitation between them."
    show if: 
      variable: scheduled_visitation
      is: False
---
template: requesting_scheduledvisitation_explanation
subject: "**As a Reminder:** What is a Visitation Schedule?"
content: |
  You have indicated that you want to request a specific visitation schedule. This is a specific schedule, whether weekly or monthly, under which you will share time with your children with the other parent. It may be as specific or as general as you'd like and can outline a specific schedule of days, times, weekends, holidays, vacations, transportation, pick-up and drop-off, limitations on travel, and other details. A specific schedule is preferred. 
---
images:
  visitation_image: "Visitation_Template_Image.png"
---
template: visitation_samples_explanation
subject: Sample Parenting Plans and Visitation Schedules 
content: |
  The Superior Court of Los Angeles has prepared several [helpful pamphlets](https://www.lacourt.org/selfhelp/familiesandchildren/pdf/parentingplan.pdf) outlining the Do's and Dont's of creating a parenting plan for divorcing parents.

  These pamphlets contain information about creating a parenting plan (including sample visitation schedules) for children:
  
    - [Under 3 years old,](https://www.lacourt.org/selfhelp/familiesandchildren/pdf/parentingunder3.pdf)
    - [3 to 5 years old,](https://www.lacourt.org/selfhelp/familiesandchildren/pdf/parenting3to5.pdf) 
    - [6 to 9 years old,](https://www.lacourt.org/selfhelp/familiesandchildren/pdf/parenting6to9.pdf)
    - [10 to 13 years old, and](https://www.lacourt.org/selfhelp/familiesandchildren/pdf/parenting10to13.pdf) 
    - [14 to 18 years old](https://www.lacourt.org/selfhelp/familiesandchildren/pdf/parenting14to18.pdf)
    
    *Click the blue links to open the pamphlets in a new tab.*
---
template: specialvisitation_samples_explanation
subject: "Resources for Parents with Special Situations"
content: |
  The Arizona Supreme Court has created a [Guide for Parents Living Apart](https://www.azcourts.gov/portals/31/parentingTime/PPWguidelines.pdf) with sample plans for children of different ages. It also has information for special situations, like if parents live far apart, the child has special needs, or a parent is in the military. 
  
  *Click the blue link to open the guide in a new tab.*
---
template: enforcingvisitationorders_explanation
subject: "What can I do if I think that ${otherparent.name.first} won't follow the orders?"
content: |
  Have a clear and detailed order. An order with clear details about decision making and visitation:
  - Can prevent misunderstandings
  - Makes clear what's expected
  - Is easier to enforce
  - If you ever need the police to enforce your order, they will need to be able to easily understand what the order says each of you must do or not do.

  For example, if there's a time something must be done, like drop off for visitation, the order should give a specific time of day and exact location. It can also say how the exchange will work. For example, a parent stays in the car or you all meet inside a public place.
---
question: |
  **Requesting Orders:** Visitation 
right: |
  ${collapse_template(requesting_scheduledvisitation_explanation)}
  ${collapse_template(visitation_samples_explanation)}
  ${collapse_template(specialvisitation_samples_explanation)}
  ${collapse_template(enforcingvisitationorders_explanation)}
subquestion: |
  **Visitation Schedule**
  
  Pictured below is form [form FL-311's](https://www.courts.ca.gov/documents/fl311.pdf) section 2e: the court’s template for identifying the visitation you want the court to order. If you would like to state your preferred visitation schedule using this template, answer ‘Yes’ to questions A and/or B below, and continue to answer the other questions that appear. Your answers to these questions will be used to fill in the visitation form.
  
  [FILE visitation_image, 100%]
  
  You also have the option to write your preferred visitation schedule yourself, not using the court form. If you would like to do this instead of using the form’s template, answer ‘No’ to questions A and B and select ‘Yes’ to question C.
  
  Lastly, if you would like to use the court’s visitation template AND write specific visitation days and restrictions, you may use questions A, B, and C to do so.
fields:     
  - note: "**Weekend Visitation**"
  - A. Would you like to grant ${ noncustodialparty.name.first } visitation on weekends?: visitation_weekends
    datatype: yesnoradio
    required: false
    label above field: true
  - When would you like this weekend visitation to start?: visitation_weekends_starting
    show if: visitation_weekends
  - note: '(Enter "Upon Judgment." If you want temporary visitation orders prior to the entry of judgement, you need to follow the Request for Order Process, which is addressed later in this interview.)'
    show if: visitation_weekends
  - note: 
      "On which weekends would you like to grant ${ noncustodialparty.name.first } visitation? (Note that you can propose a single weekend or multiple weekends.)"
    show if: visitation_weekends
  - 1st weekend (The 1st weekend of the month with a Saturday): visitation_weekends_first
    datatype: yesnowide
    show if: visitation_weekends
  - 2nd weekend of the month: visitation_weekends_second
    datatype: yesnowide
    show if: visitation_weekends
  - 3rd weekend of the month: visitation_weekends_third
    datatype: yesnowide
    show if: visitation_weekends
  - 4th weekend of the month: visitation_weekends_fourth
    datatype: yesnowide
    show if: visitation_weekends
  - 5th weekend of the month (if applicable): visitation_weekends_fifth
    datatype: yesnowide
    show if: visitation_weekends
    
  - note: "You have the option of requesting that if a month has 5 weekends, that the 5th weekend be alternated."
    show if: visitation_weekends_fifth
  - Would you like to request that ${ custodialparty.name.first } and ${ noncustodialparty.name.first } alternate fifth weekends?: alternate_fifth
    datatype: yesnoradio
    show if: visitation_weekends_fifth
  - Would you like to grant that ${ noncustodialparty.name.first } will have the fifth weekend on any odd numbered months?: alternate_fifth_by_month_odd
    datatype: yesnoradio
    show if: alternate_fifth
  - Would you like to grant that ${ noncustodialparty.name.first } will have the fifth weekend on any even numbered months?: alternate_fifth_by_month_even
    datatype: yesnoradio
    show if: 
      variable: alternate_fifth_by_month_odd
      is: False  
  - For each weekend you've selected, on what day would you like for visitation to start?: visitation_weekends_start_day
    choices:
      - Friday: visitation_weekends_start_day_Friday
      - Saturday: visitation_weekends_start_day_Saturday
      - Sunday: visitation_weekends_start_day_Sunday
    show if: visitation_weekends
  - At what time?: visitation_weekends_start_time
    datatype: time
    show if: visitation_weekends
  - note: "If applicable, please check the appropriate box below" 
    show if: visitation_weekends
  - Before School: visitation_weekends_start_time_beforeschool
    datatype: yesnowide
    show if: visitation_weekends
  - After School: visitation_weekends_start_time_afterschool
    datatype: yesnowide
    show if: visitation_weekends
  - For each weekend you've selected, on what day would you like for visitation to end?: visitation_weekends_end_day
    choices:
      - Saturday: visitation_weekends_end_day_Saturday
      - Sunday: visitation_weekends_start_day_Sunday
      - Monday: visitation_weekends_start_day_Monday
    show if: visitation_weekends
  - At what time?: visitation_weekends_end_time
    datatype: time
    show if: visitation_weekends
  - note: "If applicable, please check the appropriate box below" 
    show if: visitation_weekends
  - Before School: visitation_weekends_end_time_beforeschool
    datatype: yesnowide
    show if: visitation_weekends
  - After School: visitation_weekends_end_time_afterschool
    datatype: yesnowide
    show if: visitation_weekends
      
  - note: "**Weekday Visitation**"
  - B. Would you like to grant ${ noncustodialparty.name.first } visitation on weekdays? (Note that if you want the days of the week to change from week to week, you cannot do that here, but you can under question C.): visitation_weekdays
    datatype: yesnoradio
    required: false
    label above field: true
  - When would you like weekday visitation to start?: visitation_weekdays_starting
    show if: visitation_weekdays
  - note: '(Enter "Upon Judgment." If you want temporary visitation orders prior to the entry of judgement, you need to follow the Request for Order Process, which is addressed later in this interview.)'
    show if: visitation_weekdays
  - On what weekday would you like for visitation to start?: visitation_weekdays_start_day
    choices:
      - Monday: visitation_weekdays_start_day_Monday
      - Tuesday: visitation_weekdays_start_day_Tuesday
      - Wednesday: visitation_weekdays_start_day_Wednesday
      - Thursday: visitation_weekdays_start_day_Thursday
      - Friday: visitation_weekdays_start_day_Friday
    show if: visitation_weekdays
  - At what time?: visitation_weekdays_start_time
    datatype: time
    show if: visitation_weekdays
  - note: "If applicable, please check the appropriate box below" 
    show if: visitation_weekdays
  - Before School: visitation_weekdays_start_time_beforeschool
    datatype: yesnowide
    show if: visitation_weekdays
  - After School: visitation_weekdays_start_time_afterschool
    datatype: yesnowide
    show if: visitation_weekdays
  
  - On what weekday would you like for visitation to end?: visitation_weekdays_end_day
    choices:
      - Monday: visitation_weekdays_end_day_Monday
      - Tuesday: visitation_weekdays_end_day_Tuesday
      - Wednesday: visitation_weekdays_end_day_Wednesday
      - Thursday: visitation_weekdays_end_day_Thursday
      - Friday: visitation_weekdays_end_day_Friday
    show if: visitation_weekdays
  - At what time?: visitation_weekdays_end_time
    datatype: time
    show if: visitation_weekdays 
  - note: "If applicable, please check the appropriate box below" 
    show if: visitation_weekdays
  - Before School: visitation_weekdays_end_time_beforeschool
    datatype: yesnowide
    show if: visitation_weekdays
  - After School: visitation_weekdays_end_time_afterschool
    datatype: yesnowide
    show if: visitation_weekdays
 
  - note: "**Write your own Visitation Schedule**"
  - C. Would you like to write your preferred visitation schedule yourself and/or any restrictions on visitation?: visitation_other
    datatype: yesnoradio
    required: False
    label above field: true
  
  - Write the days and times that you would like to grant ${ noncustodialparty.name.first } visitation and/or any restrictions you want to request: visitation_other_description
    input type: area
    show if: visitation_other
  - note: "On the next few pages, this interview will ask you about the additional custody orders and restrictions you can request. If the orders you want to request under question **C** are about additional custody orders or restrictions, you may fill them in above or request them in the following sections."
    show if: visitation_other
---
question: |
  **Requesting Orders:** Additional Custody and Visitation Provisions
subquestion: |
  **Children's Holiday Schedule**
fields: 
  - Would you like to create a schedule for how you and ${otherparent.name.first} will split up holidays with the children?: holiday_schedule 
    datatype: yesnoradio
    label above field: true
---
question: |
  **Requesting Orders:** Additional Custody and Visitation Provisions
subquestion: |
  **Additional Physical Custody Provisions**
fields:
  - Would you like to request more detailed physical custody provisions on topics such as child care, canceled visitation, and limitations on contact and appropriate behavior around the children?: additional_physical_custody_provisions
    datatype: yesnoradio
    label above field: true
---
question: |
  **Requesting Orders:** Additional Custody and Visitation Provisions
subquestion: |
  **Additional Joint Legal Custody Provisions**
fields: 
  - Would you like to request more detailed legal custody provisions on topics such as special decision-making designations, healthcare and school notifications, and the consequences if a parent doesn't obtain the consent of another in making a major decision?: joint_legal_custody_provisions
    datatype: yesnoradio
    label above field: true
---
question: |
  **Requesting Orders:** Children's Holiday Schedule
subquestion: |
  You can create a holiday/summer break schedule on the following pages. Note that this form only has Federal holidays. 

  You may choose to schedule as many, or as few, holidays as you’d like. Additionally, you will have the option to schedule any holidays that aren’t identified (*such as Christmas, Hanukkah, Kwanzaa, etc.*).
  
  For each selected holiday, you will be given two scheduling options:
  
  - (1) Have the children alternate between you and ${otherparent.name.first} every year by assigning even-numbered calendar years to one parent and odd-numbered calendar years to the other, or
  - (2) Request that the children spend a specific holiday with only one parent every year (either you or ${otherparent.name.first})
  
  Note that unless you state otherwise, a holiday/summer break schedule order has priority over regular parenting time (i.e. your regular visitation schedule).
  
  If you don’t know how you want to share a specific holiday or summer break each year, or if you think sharing a particular holiday or summer break may change from year to year, you may choose not to request that the particular holiday or break be part of the holiday/summer break schedule. Note, however, that in any such instance that it will be up to you and ${otherparent.name.first} to decide who the children will be with for that specific holiday or break, and that you will not have an enforceable court order regarding that holiday/break. 
continue button field: holiday_info
---
question: |
  **Children's Holiday Schedule**
fields: 
  - note: "Select a start time and an end time that will apply to each single-day holiday that you schedule:"
    help: |
      The "start time" is when a parent's custodial time with the children begins, and the "end time" is when this custodial time ends. 
      Unless otherwise noted, all scheduled, single-day holidays will start and end at these times, BUT you will have the option to specify different start and end times for each holiday, should you prefer. 
  - Start Time: holiday_start_time
    datatype: time
    required: false
    help: "The time at which the custodial parent's time with the children begins"
  - End Time: holiday_end_time
    datatype: time
    required: false
    help: "The time at which the custodial parent's time with the children ends"

  - note: |
      Select each holiday for which you'd like to create schedule (*Check all that apply*) 
      
  - December 31st (New Year's Eve): newyearseve
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: newyearseve_times
    datatype: yesnoradio
    show if: newyearseve
  - Start Time: newyearseve_start
    show if: newyearseve_times 
    datatype: time
  - End Time: newyearseve_end
    show if: newyearseve_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend New Years Eve each year?: newyearseve_alternate
    datatype: yesnoradio
    show if: newyearseve
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every New Years Eve, would you like to have the children on even numbered years or odd numbered years?: newyearseve_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: newyearseve_alternate_even
      - I want to have the children on Odd Numbered Years: newyearseve_alternate_odd
    show if: newyearseve_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend New Years Eve every year?: newyearseve_everyyear
    choices: 
      code: parties
    show if: 
      variable: newyearseve_alternate
      is: False
  
  - January 1st (New Year's Day): newyearsday
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: newyearsday_times
    datatype: yesnoradio
    show if: newyearsday
  - Start Time: newyearsday_start
    show if: newyearsday_times 
    datatype: time
  - End Time: newyearsday_end
    show if: newyearsday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend New Years Day each year?: newyearsday_alternate
    datatype: yesnoradio
    show if: newyearsday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every New Years Day, would you like to have the children on even numbered years or odd numbered years?: newyearsday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: newyearsday_alternate_even
      - I want to have the children on Odd Numbered Years: newyearsday_alternate_odd
    show if: newyearsday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend New Years Day every year?: newyearsday_everyyear
    choices:
      code: parties
    show if: 
      variable: newyearsday_alternate
      is: False

  - Martin Luther King's Birthday Weekend: mlkday
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: mlkday_times
    datatype: yesnoradio
    show if: mlkday
  - Start Day: mlkday_startday
    show if: mlkday_times
  - Start Time: mlkday_starttime
    show if: mlkday_times 
    datatype: time
  - End Day: mlkday_endday
    show if: mlkday_times
  - End Time: mlkday_endtime
    datatype: time
    show if: mlkday_times 
  - Would you like the children to alternate the household at which they spend MLK Weekend each year?: mlkday_alternate
    datatype: yesnoradio
    show if: mlkday
    help: "For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every MLK Weekend, would you like to have the children on even numbered years or odd numbered years?: mlkday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: mlkday_alternate_even
      - I want to have the children on Odd Numbered Years: mlkday_alternate_odd
    show if: mlkday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend MLK Weekend every year?: mlkday_everyyear
    choices: 
      code: parties
    show if: 
      variable: mlkday_alternate
      is: False
      
  - February 12th (Lincoln's) Birthday: feb12
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: feb12_times
    datatype: yesnoradio
    show if: feb12
  - Start Time: feb12_start
    show if: feb12_times 
    datatype: time
  - End Time: feb12_end
    show if: feb12_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Lincoln's Birthday (February 12th) each year?: feb12_alternate
    datatype: yesnoradio
    show if: feb12
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Lincoln's Birthday (February 12th), would you like to have the children on even numbered years or odd numbered years?: feb12_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: feb12_alternate_even
      - I want to have the children on Odd Numbered Years: feb12_alternate_odd
    show if: feb12_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Lincoln's Birthday (February 12th) every year?: feb12_everyyear
    choices: 
      code: parties
    show if: 
      variable: feb12_alternate
      is: False
      
  - President's Day Weekend: presidentsday
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: presidentsday_times
    datatype: yesnoradio
    show if: presidentsday
  - Start Day: presidentsday_startday
    show if: presidentsday_times
  - Start Time: presidentsday_starttime
    show if: presidentsday_times 
    datatype: time
  - End Day: presidentsday_endday
    show if: presidentsday_times
  - End Time: presidentsday_endtime
    datatype: time
    show if: presidentsday_times 
  - Would you like the children to alternate the household at which they spend President's Day Weekend each year?: presidentsday_alternate
    datatype: yesnoradio
    show if: presidentsday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every President's Day Weekend, would you like to have the children on even numbered years or odd numbered years?: presidentsday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: presidentsday_alternate_even
      - I want to have the children on Odd Numbered Years: presidentsday_alternate_odd
    show if: presidentsday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend President's Day Weekend every year?: presidentsday_everyyear
    choices: 
      code: parties
    show if: 
      variable: presidentsday_alternate
      is: False

  - President's Week Recess, first half: presidentsweek_1sthalf
    help: |
      In some school districts, President's Week Recess is also known as "Ski Week"
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: presidentsweek_1sthalf_times
    datatype: yesnoradio
    show if: presidentsweek_1sthalf
  - Start Day: presidentsweek_1sthalf_startday
    show if: presidentsweek_1sthalf_times
  - Start Time: presidentsweek_1sthalf_starttime
    show if: presidentsweek_1sthalf_times 
    datatype: time
  - End Day: presidentsweek_1sthalf_endday
    show if: presidentsweek_1sthalf_times
  - End Time: presidentsweek_1sthalf_endtime
    datatype: time
    show if: presidentsweek_1sthalf_times 
  - Would you like the children to alternate the household at which they spend the first half of President's Week Recess each year?: presidentsweek_1sthalf_alternate
    datatype: yesnoradio
    show if: presidentsweek_1sthalf
    help: "i.e. The children will switch households every year for the break. For example, if you get the children this year, their other parent will get to spend the break with them the following year"
  - Since the children will be alternating between households every year, would you like to have the children on even numbered years or odd numbered years?: presidentsweek_1sthalf_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: presidentsweek_1sthalf_alternate_even
      - I want to have the children on Odd Numbered Years: presidentsweek_1sthalf_alternate_odd
    show if: presidentsweek_1sthalf_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend the first half of President's Week Recess every year?: presidentsweek_1sthalf_everyyear
    choices: 
      code: parties
    show if: 
      variable: presidentsweek_1sthalf_alternate
      is: False
      
  - President's Week Recess, second half: presidentsweek_2ndhalf
    help: |
      In some school districts, President's Week Recess is also known as "Ski Week"
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: presidentsweek_2ndhalf_times
    datatype: yesnoradio
    show if: presidentsweek_2ndhalf
  - Start Day: presidentsweek_2ndhalf_startday
    show if: presidentsweek_2ndhalf_times
  - Start Time: presidentsweek_2ndhalf_starttime
    show if: presidentsweek_2ndhalf_times 
    datatype: time
  - End Day: presidentsweek_2ndhalf_endday
    show if: presidentsweek_2ndhalf_times
  - End Time: presidentsweek_2ndhalf_endtime
    datatype: time
    show if: presidentsweek_2ndhalf_times 
  - Would you like the children to alternate the household at which they spend the second half of President's Week Recess each year?: presidentsweek_2ndhalf_alternate
    datatype: yesnoradio
    show if: presidentsweek_2ndhalf
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every year, would you like to have the children on even numbered years or odd numbered years?: presidentsweek_2ndhalf_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: presidentsweek_2ndhalf_alternate_even
      - I want to have the children on Odd Numbered Years: presidentsweek_2ndhalf_alternate_odd
    show if: presidentsweek_2ndhalf_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend the second half of President's Week Recess every year?: presidentsweek_2ndhalf_everyyear
    choices: 
      code: parties
    show if: 
      variable: presidentsweek_2ndhalf_alternate
      is: False
      
  - Spring Break, first half: springbreak_1sthalf
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: springbreak_1sthalf_times
    datatype: yesnoradio
    show if: springbreak_1sthalf
  - Start Day: springbreak_1sthalf_startday
    show if: springbreak_1sthalf_times
  - Start Time: springbreak_1sthalf_starttime
    show if: springbreak_1sthalf_times 
    datatype: time
  - End Day: springbreak_1sthalf_endday
    show if: springbreak_1sthalf_times
  - End Time: springbreak_1sthalf_endtime
    datatype: time
    show if: springbreak_1sthalf_times 
  - Would you like the children to alternate the household at which they spend the first half of Spring Break each year?: springbreak_1sthalf_alternate
    datatype: yesnoradio
    show if: springbreak_1sthalf
    help: "i.e. The children will switch households every year for the break. For example, if you get the children this year, their other parent will get to spend the break with them the following year"
  - Since the children will be alternating between households every year, would you like to have the children on even numbered years or odd numbered years?: springbreak_1sthalf_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: springbreak_1sthalf_alternate_even
      - I want to have the children on Odd Numbered Years: springbreak_1sthalf_alternate_odd
    show if: springbreak_1sthalf_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend the first half of Spring Break every year?: springbreak_1sthalf_everyyear
    choices: 
      code: parties
    show if: 
      variable: springbreak_1sthalf_alternate
      is: False

  - Spring Break, second half: springbreak_2ndhalf
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: springbreak_2ndhalf_times
    datatype: yesnoradio
    show if: springbreak_2ndhalf
  - Start Day: springbreak_2ndhalf_startday
    show if: springbreak_2ndhalf_times
  - Start Time: springbreak_2ndhalf_starttime
    show if: springbreak_2ndhalf_times 
    datatype: time
  - End Day: springbreak_2ndhalf_endday
    show if: springbreak_2ndhalf_times
  - End Time: springbreak_2ndhalf_endtime
    datatype: time
    show if: springbreak_2ndhalf_times 
  - Would you like the children to alternate the household at which they spend the second half of Spring Break each year?: springbreak_2ndhalf_alternate
    datatype: yesnoradio
    show if: springbreak_2ndhalf
    help: "i.e. The children will switch households every year for the break. For example, if you get the children this year, their other parent will get to spend the break with them the following year"
  - Since the children will be alternating between households every year, would you like to have the children on even numbered years or odd numbered years?: springbreak_2ndhalf_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: springbreak_2ndhalf_alternate_even
      - I want to have the children on Odd Numbered Years: springbreak_2ndhalf_alternate_odd
    show if: springbreak_2ndhalf_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend the second half of Spring Break every year?: springbreak_2ndhalf_everyyear
    choices: 
      code: parties
    show if: 
      variable: springbreak_2ndhalf_alternate
      is: False

  - Mother's Day: mothersday
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: mothersday_times
    datatype: yesnoradio
    show if: mothersday
  - Start Time: mothersday_start
    show if: mothersday_times 
    datatype: time
  - End Time: mothersday_end
    show if: mothersday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Mother's Day each year?: mothersday_alternate
    datatype: yesnoradio
    show if: mothersday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Mother's Day, would you like to have the children on even numbered years or odd numbered years?: mothersday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: mothersday_alternate_even
      - I want to have the children on Odd Numbered Years: mothersday_alternate_odd
    show if: mothersday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Mother's Day every year?: mothersday_everyyear
    choices: 
      code: parties
    show if: 
      variable: mothersday_alternate
      is: False
      
  - Memorial Day Weekend: memorialday
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: memorialday_times
    datatype: yesnoradio
    show if: memorialday
  - Start Day: memorialday_startday
    show if: memorialday_times
  - Start Time: memorialday_starttime
    show if: memorialday_times 
    datatype: time
  - End Day: memorialday_endday
    show if: memorialday_times
  - End Time: memorialday_endtime
    datatype: time
    show if: memorialday_times 
  - Would you like the children to alternate the household at which they spend Memorial Day Weekend each year?: memorialday_alternate
    datatype: yesnoradio
    show if: memorialday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Memorial Day Weekend, would you like to have the children on even numbered years or odd numbered years?: memorialday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: memorialday_alternate_even
      - I want to have the children on Odd Numbered Years: memorialday_alternate_odd
    show if: memorialday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Memorial Day Weekend every year?: memorialday_everyyear
    choices: 
      code: parties
    show if: 
      variable: memorialday_alternate
      is: False
    
  - Father's Day: fathersday
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: fathersday_times
    datatype: yesnoradio
    show if: fathersday
  - Start Time: fathersday_start
    show if: fathersday_times 
    datatype: time
  - End Time: fathersday_end
    show if: fathersday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Father's Day each year?: fathersday_alternate
    datatype: yesnoradio
    show if: fathersday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Father's Day, would you like to have the children on even numbered years or odd numbered years?: fathersday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: fathersday_alternate_even
      - I want to have the children on Odd Numbered Years: fathersday_alternate_odd
    show if: fathersday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Father's Day every year?: fathersday_everyyear
    choices: 
      code: parties
    show if: 
      variable: fathersday_alternate
      is: False
      
  - July 4th (Independence Day): july4th
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: july4th_times
    datatype: yesnoradio
    show if: july4th
  - Start Time: july4th_start
    show if: july4th_times 
    datatype: time
  - End Time: july4th_end
    show if: july4th_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend the 4th of July each year?: july4th_alternate
    datatype: yesnoradio
    show if: july4th
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every 4th of July, would you like to have the children on even numbered years or odd numbered years?: july4th_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: july4th_alternate_even
      - I want to have the children on Odd Numbered Years: july4th_alternate_odd
    show if: july4th_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend the 4th of July every year?: july4th_everyyear
    choices: 
      code: parties
    show if: 
      variable: july4th_alternate
      is: False
    
  - Summer Break: summerbreak
    datatype: yesnowide
  - Would you like the children to alternate the household in which they spend Summer Break each year?: summerbreak_alternate
    datatype: yesnoradio
    show if: summerbreak
    help: "i.e. The children will switch households every year for the break. For example, if you get the children this year, their other parent will get to spend the break with them the following year"
  - Since the children will be alternating between households every Summer Break, would you like to have the children on even numbered years or odd numbered years?: summerbreak_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: summerbreak_alternate_even
      - I want to have the children on Odd Numbered Years: summerbreak_alternate_odd
    show if: summerbreak_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Summer Break every year?: summerbreak_everyyear
    choices: 
      code: parties
    show if: 
      variable: summerbreak_alternate
      is: False
    
  - Labor Day Weekend: laborday 
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: laborday_times
    datatype: yesnoradio
    show if: laborday
  - Start Day: laborday_startday
    show if: laborday_times
  - Start Time: laborday_starttime
    show if: laborday_times 
    datatype: time
  - End Day: laborday_endday
    show if: laborday_times
  - End Time: laborday_endtime
    datatype: time
    show if: laborday_times 
  - Would you like the children to alternate the household at which they spend Labor Day Weekend each year?: laborday_alternate
    datatype: yesnoradio
    show if: laborday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Labor Day Weekend, would you like to have the children on even numbered years or odd numbered years?: laborday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: laborday_alternate_even
      - I want to have the children on Odd Numbered Years: laborday_alternate_odd
    show if: laborday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Labor Day Weekend every year?: laborday_everyyear
    choices: 
      code: parties
    show if: 
      variable: laborday_alternate
      is: False
    
  - Columbus Day/Indigenous Peoples' Day Weekend: columbusday
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: columbusday_times
    datatype: yesnoradio
    show if: columbusday
  - Start Day: columbusday_startday
    show if: columbusday_times
  - Start Time: columbusday_starttime
    show if: columbusday_times 
    datatype: time
  - End Day: columbusday_endday
    show if: columbusday_times
  - End Time: columbusday_endtime
    datatype: time
    show if: columbusday_times 
  - Would you like the children to alternate the household at which they spend Columbus Day Weekend each year?: columbusday_alternate
    datatype: yesnoradio
    show if: columbusday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Columbus Day Weekend, would you like to have the children on even numbered years or odd numbered years?: columbusday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: columbusday_alternate_even
      - I want to have the children on Odd Numbered Years: columbusday_alternate_odd
    show if: columbusday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Columbus Day Weekend every year?: columbusday_everyyear
    choices: 
      code: parties
    show if: 
      variable: columbusday_alternate
      is: False

  - Halloween: halloween
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: halloween_times
    datatype: yesnoradio
    show if: halloween
  - Start Time: halloween_start
    show if: halloween_times 
    datatype: time
  - End Time: halloween_end
    show if: halloween_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Halloween each year?: halloween_alternate
    datatype: yesnoradio
    show if: halloween
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Halloween, would you like to have the children on even numbered years or odd numbered years?: halloween_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: halloween_alternate_even
      - I want to have the children on Odd Numbered Years: halloween_alternate_odd
    show if: halloween_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Halloween every year?: halloween_everyyear
    choices: 
      code: parties
    show if: 
      variable: halloween_alternate
      is: False
    
  - Veteran's Day: veteransday 
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: veteransday_times
    datatype: yesnoradio
    show if: veteransday
  - Start Time: veteransday_start
    show if: veteransday_times 
    datatype: time
  - End Time: veteransday_end
    show if: veteransday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Veteran's Day each year?: veteransday_alternate
    datatype: yesnoradio
    show if: veteransday
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Veteran's Day, would you like to have the children on even numbered years or odd numbered years?: veteransday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: veteransday_alternate_even
      - I want to have the children on Odd Numbered Years: veteransday_alternate_odd
    show if: veteransday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Veteran's Day every year?: veteransday_everyyear
    choices: 
      code: parties
    show if: 
      variable: veteransday_alternate
      is: False
    
  - Thanksgiving Day: thanksgiving 
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: thanksgiving_times
    datatype: yesnoradio
    show if: thanksgiving
  - Start Time: thanksgiving_start
    show if: thanksgiving_times 
    datatype: time
  - End Time: thanksgiving_end
    show if: thanksgiving_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Thanksgiving Day each year?: thanksgiving_alternate
    datatype: yesnoradio
    show if: thanksgiving
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Thanksgiving Day, would you like to have the children on even numbered years or odd numbered years?: thanksgiving_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: thanksgiving_alternate_even
      - I want to have the children on Odd Numbered Years: thanksgiving_alternate_odd
    show if: thanksgiving_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Thanksgiving Day every year?: thanksgiving_everyyear
    choices: 
      code: parties
    show if: 
      variable: thanksgiving_alternate
      is: False
    
  - Thanksgiving Weekend: thanksgivingweekend 
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: thanksgivingweekend_times
    datatype: yesnoradio
    show if: thanksgivingweekend
  - Start Day: thanksgivingweekend_startday
    show if: thanksgivingweekend_times
  - Start Time: thanksgivingweekend_starttime
    show if: thanksgivingweekend_times 
    datatype: time
  - End Day: thanksgivingweekend_endday
    show if: thanksgivingweekend_times
  - End Time: thanksgivingweekend_endtime
    datatype: time
    show if: thanksgivingweekend_times 
  - Would you like the children to alternate the household at which they spend Thanksgiving Weekend each year?: thanksgivingweekend_alternate
    datatype: yesnoradio
    show if: thanksgivingweekend
    help: "i.e. The children will switch households every year for the holiday. For example, if you get the children this year, their other parent will get to spend the holiday with them the following year"
  - Since the children will be alternating between households every Thanksgiving Weekend, would you like to have the children on even numbered years or odd numbered years?: thanksgivingweekend_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: thanksgivingweekend_alternate_even
      - I want to have the children on Odd Numbered Years: thanksgivingweekend_alternate_odd
    show if: thanksgivingweekend_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Thanksgiving Weekend every year?: thanksgivingweekend_everyyear
    choices: 
      code: parties
    show if: 
      variable: thanksgivingweekend_alternate
      is: False

  - Winter Break (December/January School Break): winterbreak 
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: winterbreak_times
    datatype: yesnoradio
    show if: winterbreak
  - Start Day: winterbreak_startday
    required: False
    show if: winterbreak_times
  - Start Time: winterbreak_starttime
    show if: winterbreak_times 
    datatype: time
  - End Day: winterbreak_endday
    required: false
    show if: winterbreak_times
  - End Time: winterbreak_endtime
    datatype: time
    show if: winterbreak_times 
  - Would you like the children to alternate the household at which they spend Winter Break each year?: winterbreak_alternate
    datatype: yesnoradio
    show if: winterbreak
    help: "i.e. The children will switch households every year for the break. For example, if you get the children this year, their other parent will get to spend the break with them the following year"
  - Since the children will be alternating between households every Winter Break, would you like to have the children on even numbered years or odd numbered years?: winterbreak_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: winterbreak_alternate_even
      - I want to have the children on Odd Numbered Years: winterbreak_alternate_odd
    show if: winterbreak_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Winter Break every year?: winterbreak_everyyear
    choices: 
      code: parties
    show if: 
      variable: winterbreak_alternate
      is: False

  - ${children.item(0).name}'s Birthday: child1_birthday
    datatype: yesnowide
  - Date: child1_birthday_date
    show if: child1_birthday
  - Would you like to specify **different** start and end times from the ones you filled in above?: child1_birthday_times
    datatype: yesnoradio
    show if: child1_birthday
  - Start Time: child1_birthday_start
    show if: child1_birthday_times 
    datatype: time
  - End Time: child1_birthday_end
    show if: child1_birthday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend ${children.item(0).name}'s Birthday each year?: child1_birthday_alternate
    datatype: yesnoradio
    show if: child1_birthday
    help: "i.e. The children will switch households every year for this birthday. For example, if you get the children this year, their other parent will get to spend the birthday with them the following year"
  - Since the children will be alternating between households every year for ${children.item(0).name}'s Birthday, would you like to have the children on even numbered years or odd numbered years?: child1_birthday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: child1_birthday_alternate_even
      - I want to have the children on Odd Numbered Years: child1_birthday_alternate_odd
    show if: child1_birthday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend ${children.item(0).name}'s Birthday every year?: child1_birthday_everyyear
    choices: 
      code: parties
    show if: 
      variable: child1_birthday_alternate
      is: False

  - ${children.item(1).name}'s Birthday: child2_birthday
    required: false
    datatype: yesnowide
    show if: 
      code: children.target_number >= 2
  - Date: child2_birthday_date
    show if: child2_birthday
  - Would you like to specify **different** start and end times from the ones you filled in above?: child2_birthday_times
    required: false
    datatype: yesnoradio
    show if: child2_birthday
  - Start Time: child2_birthday_start
    required: false
    show if: child2_birthday_times 
    datatype: time
  - End Time: child2_birthday_end
    required: false
    show if: child2_birthday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend ${children.item(1).name}'s Birthday each year?: child2_birthday_alternate
    datatype: yesnoradio
    show if: child2_birthday
    help: "i.e. The children will switch households every year for this birthday. For example, if you get the children this year, their other parent will get to spend the birthday with them the following year"
  - Since the children will be alternating between households every year for ${children.item(1).name}'s Birthday, would you like to have the children on even numbered years or odd numbered years?: child2_birthday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: child2_birthday_alternate_even
      - I want to have the children on Odd Numbered Years: child2_birthday_alternate_odd
    show if: child2_birthday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend ${children.item(1).name}'s Birthday every year?: child2_birthday_everyyear
    choices: 
      code: parties
    show if: 
      variable: child2_birthday_alternate
      is: False

  - ${children.item(2).name}'s Birthday: child3_birthday 
    required: false
    datatype: yesnowide 
    show if: 
      code: children.target_number >= 3
  - Date: child3_birthday_date
    required: false
    show if: child3_birthday
  - Would you like to specify **different** start and end times from the ones you filled in above?: child3_birthday_times
    required: false
    datatype: yesnoradio
    show if: child3_birthday
  - Start Time: child3_birthday_start
    required: false
    show if: child3_birthday_times 
    datatype: time
  - End Time: child3_birthday_end
    required: false
    show if: child3_birthday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend ${children.item(2).name}'s Birthday each year?: child3_birthday_alternate
    datatype: yesnoradio
    show if: child3_birthday
    help: "i.e. The children will switch households every year for this birthday. For example, if you get the children this year, their other parent will get to spend the birthday with them the following year"
  - Since the children will be alternating between households every year for ${children.item(2).name}'s Birthday, would you like to have the children on even numbered years or odd numbered years?: child3_birthday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: child3_birthday_alternate_even
      - I want to have the children on Odd Numbered Years: child3_birthday_alternate_odd
    show if: child3_birthday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend ${children.item(2).name}'s Birthday every year?: child3_birthday_everyyear
    choices: 
      code: parties
    show if: 
      variable: child3_birthday_alternate
      is: False
      
  - Mom's Birthday: moms_birthday 
    datatype: yesnowide
    help: |
      We extend our apologies to any same-sex parents for whom this language may seem exclusionary or hetero-normative, as these questions diectly correspond with the fields on the court's Holiday Parenting Schedule (form FL-341(C)). 
      
      If you and ${otherparent} are same-sex parents and would like to create holiday schedules for both your birthdays, please check 'Other Parent's Birthday' below. 
  - Date: moms_birthday_date
    show if: moms_birthday
  - Would you like to specify **different** start and end times from the ones you filled in above?: moms_birthday_times
    datatype: yesnoradio
    show if: moms_birthday
  - Start Time: moms_birthday_start
    show if: moms_birthday_times 
    datatype: time
  - End Time: moms_birthday_end
    show if: moms_birthday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Mom's Birthday each year?: moms_birthday_alternate
    datatype: yesnoradio
    show if: moms_birthday
    help: "i.e. The children will switch households every year for this birthday. For example, if you get the children this year, their other parent will get to spend the birthday with them the following year"
  - Since the children will be alternating between households every year for Mom's Birthday, would you like to have the children on even numbered years or odd numbered years?: moms_birthday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: moms_birthday_alternate_even
      - I want to have the children on Odd Numbered Years: moms_birthday_alternate_odd
    show if: moms_birthday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Mom's Birthday every year?: moms_birthday_everyyear
    choices: 
      code: parties
    show if: 
      variable: moms_birthday_alternate
      is: False
    
  - Dad's Birthday: dads_birthday
    datatype: yesnowide
    help: |
      We extend our apologies to any same-sex parents for whom this language may seem exclusionary or hetero-normative, as these questions diectly correspond with the fields on the court's Holiday Parenting Schedule (form FL-341(C)). 
      
      If you and ${otherparent} are same-sex parents and would like to create holiday schedules for both your birthdays, please 'Other Parent's Birthday' below. 
  - Date: dads_birthday_date
    show if: dads_birthday
  - Would you like to specify **different** start and end times from the ones you filled in above?: dads_birthday_times
    datatype: yesnoradio
    show if: dads_birthday
  - Start Time: dads_birthday_start
    show if: dads_birthday_times 
    datatype: time
  - End Time: dads_birthday_end
    show if: dads_birthday_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Dad's Birthday each year?: dads_birthday_alternate
    datatype: yesnoradio
    show if: dads_birthday
    help: "i.e. The children will switch households every year for this birthday. For example, if you get the children this year, their other parent will get to spend the birthday with them the following year"
  - Since the children will be alternating between households every year for Dad's Birthday, would you like to have the children on even numbered years or odd numbered years?: dads_birthday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: dads_birthday_alternate_even
      - I want to have the children on Odd Numbered Years: dads_birthday_alternate_odd
    show if: moms_birthday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Dad's Birthday every year?: dads_birthday_everyyear
    choices: 
      code: parties
    show if: 
      variable: dads_birthday_alternate
      is: False
      
  - Other Parent's Birthday: otherparent_birthday
    datatype: yesnowide
    show if:
      code: |
        any(child.otherparent_exists for child in children)
  - Date: otherparent_birthday_date
    show if: otherparent_birthday
  - Would you like to specify **different** start and end times from the ones you filled in above?: otherparent_birthday_times
    datatype: yesnoradio
    show if: otherparent_birthday
  - Start Time: otherparent_birthday_start
    show if: otherparent_birthday_times 
    datatype: time
  - End Time: otherparent_birthday_end
    show if: otherparent_birthday_times 
    datatype: time
  - Would you and ${otherparent} like to alternate spending ${otherparent.name.first}'s Birthday with the children every year?: otherparent_birthday_alternate
    datatype: yesnoradio
    show if: otherparent_birthday
    help: "i.e. The children will switch households every year for this birthday. For example, if you get the children this year, their other parent will get to spend the birthday with them the following year"
  - Since the children will be alternating between households every year, would you like to have the children on even numbered years or odd numbered years?: otherparent_birthday_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: otherparent_birthday_alternate_even
      - I want to have the children on Odd Numbered Years: otherparent_birthday_alternate_odd
    show if: otherparent_birthday_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend ${otherparent.name.first}'s Birthday every year?: otherparent_birthday_everyyear
    choices:
      code: parties
    show if: 
      variable: otherparent_birthday_alternate
      is: False

  - Breaks for Year-Round Schools: breaks_yearroundschools
    datatype: yesnowide
  - Would you like to specify **different** start and end times from the ones you filled in above?: breaks_yearroundschools_times
    datatype: yesnoradio
    show if: breaks_yearroundschools
  - Start Day: breaks_yearroundschools_startday
    show if: breaks_yearroundschools_times 
    datatype: time
  - Start Time: breaks_yearroundschools_starttime
    show if: breaks_yearroundschools_times 
    datatype: time
  - End Day: breaks_yearroundschools_endday
    show if: breaks_yearroundschools_times 
    datatype: time
  - End Time: breaks_yearroundschools_endtime
    show if: breaks_yearroundschools_times 
    datatype: time
  - Would you like the children to alternate the household at which they spend Breaks for Year-Round Schools each year?: breaks_yearroundschools_alternate
    datatype: yesnoradio
    show if: breaks_yearroundschools
    help: "i.e. The children will switch households every year for the break. For example, if you get the children this year, their other parent will get to spend the break with them the following year"
  - Since the children will be alternating between households every break, would you like to have the children on even numbered years or odd numbered years?: breaks_yearroundschools_alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: breaks_yearroundschools_alternate_even
      - I want to have the children on Odd Numbered Years: breaks_yearroundschools_alternate_odd
    show if: breaks_yearroundschools_alternate
  - Since the children won't be alternating households, with whom would you like the children to spend Breaks for Year-Round Schools every year?: breaks_yearroundschools_everyyear
    choices: 
      code: parties
    show if: 
      variable: breaks_yearroundschools_alternate
      is: False
---
question: |
  **Children's Holiday Schedule**
subquestion: |
  **Schedule Additional Holidays**
fields:
  - Would you like to create a schedule for any additional holidays?: additionalholidays.there_are_any
    datatype: yesnoradio
    label above field: true
---
question: |
  **Children's Holiday Schedule**
subquestion: |
  **Schedule Additional Holidays**
  
  Tell us about the ${ordinal(i)} additional holiday you would like to schedule.
fields:
  - Holiday: additionalholidays[i].name.text
    help: |
      If this is a single-day holiday, please also include the date (*for example: Christmas Day, 12/25*). If this is a multi-day holiday/break, please specify different start and end times below.
  - Would you like to specify **different** start and end times from the ones you filled in previously?: additionalholidays[i].times
    datatype: yesnoradio
  - Start time: additionalholidays[i].starttime
    datatype: time
    required: false
    show if: additionalholidays[i].times
  - Start day: additionalholidays[i].startday
    required: false
    show if: additionalholidays[i].times
  - Start date: additionalholidays[i].startdate
    required: false
    show if: additionalholidays[i].times
  - End time: additionalholidays[i].endtime
    required: false
    datatype: time
    show if: additionalholidays[i].times
  - End day: additionalholidays[i].endday
    required: false
    show if: additionalholidays[i].times
  - End date: additionalholidays[i].enddate
    required: false
    show if: additionalholidays[i].times
  - Would you and ${otherparent} like to alternate spending this holiday with the children every year?: additionalholidays[i].alternate 
    datatype: yesnoradio
  - Since the children will be alternating this holiday between you and ${otherparent} every year, would you like to have the children on even numbered years or odd numbered years?: additionalholidays[i].alternate_evenodd
    choices: 
      - I want to have the children on Even Numbered Years: additionalholidays[i].alternate_even
      - I want to have the children on Odd Numbered Years: additionalholidays[i].alternate_odd
    show if: additionalholidays[i].alternate  
  - With whom would you like the children to spend this holiday every year?: additionalholidays[i].everyyear
    choices:
      - ${pet}: additionalholidays[i].everyyear_pet
      - ${otherparent}: additionalholidays[i].everyyear_otherparent
    show if: 
      variable: additionalholidays[i].alternate
      is: False
  - Are there any other holidays that you would like to schedule?: additionalholidays.there_is_another
    datatype: yesnoradio
---
question: |
  **Requesting Orders:** Children's Holiday Schedule
fields: 
  - Would you like to request that any three-day weekend that wasn't specified on the previous pages will be spent with the parent who would normally have that weekend?: threeday_weekends
    datatype: yesnoradio
  - Would you like to request any additional orders related to holiday scheduling?: other_holiday_orders
    datatype: yesnoradio
  - Please explain: other_holiday_orders_explain
    datatype: area
    show if: other_holiday_orders
  - Would you like to create custody and visitation orders regarding vacations?: vacations
    datatype: yesnoradio
---
question: |
  **Requesting Orders:** Children's Vacation Schedule
subquestion: |
  Select each parent to whom you'd like the following vacation provisions/schedule to apply (check all that apply):
fields: 
  - ${pet}: vacations_pet
    datatype: yesnowide
  - ${otherparent}: vacations_otherparent
    datatype: yesnowide
  - How many vacations can each parent selected above take with the children each year?: vacation_number
    datatype: integer
    required: false
  - Each vacation with the children can last up to how many days?: vacation_length
    datatype: integer
    required: false
  - Would you like to request that each parent selected above must notify the other parent of their vacation plans, in writing, and provide them with a basic itinerary that includes dates of leaving and returning, destinations, flight information, and telephone numbers for emergency purposes?: vacation_notification
    datatype: yesnoradio
    label above field: true
  - How many days in advance of the vacation must each parent selected above provide this notification to the other parent?: vacation_notification_length 
    datatype: integer
    show if: vacation_notification
  - Would you like to set a time limit specifying how many days the other parent has to respond if there is a problem with the vacation schedule?: vacation_notification_problem
    datatype: yesnoradio
    show if: vacation_notification
  - How many days?: vacation_notification_problem_specify
    datatype: integer
    show if: vacation_notification_problem
  - note: "If you and ${otherparent} cannot agree on vacation plans: (*Check all that you'd like to apply*)"
    show if: vacation_notification
  - You and ${otherparent} must confer (discuss) to try and resolve any disagreement before filing for a court hearing: vacation_confer
    datatype: yesnowide
    show if: vacation_notification
  - In even-numbered years, you and ${otherparent} will follow one parent's suggestions: vacation_even
    datatype: yesnowide
    show if: vacation_notification
  - Which parent's?: vacation_even_party
    choices:
      - ${pet}: vacation_even_pet
      - ${otherparent}: vacation_even_otherparent
    show if: vacation_even
  - In odd-numbered years, you and ${otherparent} will follow one parent's suggestions: vacation_odd
    datatype: yesnowide
    show if: vacation_notification
  - Which parent's?: vacation_odd_party
    choices:
      - ${pet}: vacation_odd_pet
      - ${otherparent}: vacation_odd_otherparty
    show if: vacation_odd
  - Other: vacation_other
    datatype: yesnowide
    show if: vacation_notification
  - Please specify: vacation_other_specify
    show if: vacation_other 
  - Can each parent selected above vacation with the children outside of the state of California?: vacation_outside_ca
    datatype: yesnoradio
  - Would you like to request that any vacation with the children taken outside of California require the prior written consent of the other parent or a court order?: vacation_outside_ca_permission
    datatype: yesnoradio
    show if: vacation_outside_ca
  - Would you like to request that any vacation with the children taken outside of the United States require the prior written consent of the other parent or a court order?: vacation_outside_us_permission
    datatype: yesnoradio
    show if: vacation_outside_ca
  
  - Are there any additional holiday or vacation orders that you would like to request at this time?: holidayvacation_other
    datatype: yesnoradio
  - Please explain: holidayvacation_other_specify
    input type: area
    show if: holidayvacation_other

#### end of children's holiday question block 
---
question: |
  **Requesting Orders:** Additional Physical Custody Provisions
subquestion: |
  **All of the additional physical custody provisions below are optional. Check each provision that you would like to apply** 
fields: 
  - note: |
      Select each person to whom you'd like the following physical custody provisions to apply: 
  - ${pet}: add_physicalcustody_pet
    datatype: yesnowide
  - ${otherparent}: add_physicalcustody_otherparent
    datatype: yesnowide
      
  - note: "**Notification of parents' current address and contact information**"
  - note: "Each parent selected above must notify the other parent of any change in his or her:" 
    help: |
      Please note that neither you nor ${otherparent.name.first} may use the information below for the purposes of harassing, annoying, or disturbing the peace of the other or invading the other's privacy. 
  - Residential Address: address_residence
    datatype: yesnowide
    help: "Please note, no residence or work address is needed of a party has an address with the State of California's Safe at Home confidential address program."
  - Mailing Address: address_mailing 
    datatype: yesnowide
  - Work Address: address_work
    datatype: yesnowide
    help: "Please note, no residence or work address is needed of a party has an address with the State of California's Safe at Home confidential address program." 
  - Email Address: address_email
    datatype: yesnowide
  - Home Phone Number: phonenumber_home
    datatype: yesnowide
  - Cell Phone Number: phonenumber_cell
    datatype: yesnowide
  - Work Phone Number: phonenumber_work
    datatype: yesnowide
  - Children's Schools Phone Number(s): phonenumber_childrens_schools
    datatype: yesnowide
  - Within how many days must each selected parent notify the other of any of the changes in information checked above?: notification_days
    datatype: integer
    required: false
  
  - note: "**Notification of proposed move of child**"
  - Each parent must notify the other before any planned change in residence of the children (i.e. before the children move/change home addresses). The notification must state, to the extent known, the planned address of the children, including the county and state of the new residence. The notification must be sent by mail, return receipt requested: notify_proposed_move_of_children
    datatype: yesnowide
  - Within how many days of the proposed move must each selected parent provide this notification to the other?: notify_proposed_move_of_children_days
    datatype: integer 
    required: false
  
  - note: "**Child Care**"
  - The children must not be left alone without age-appropriate supervision: childcare_supervision
    datatype: yesnowide
  - Parents must let each other know the name, address, and phone number of the children's regular child-care providers: childcare_provider_contact
    datatype: yesnowide
  - Excluding regular child care needed when a parent is working, the other parent will be given the first opportunity, with as much prior notice as possible, to care for the children before other arrangements are made: childcare_right_of_first_option
    datatype: yesnowide
    help: |
      In other words, if a parent needs to hire a babysitter/get someone to care for the children during his or her custodial (parenting) time, he or she must offer to let the other parent take care of the children before securing another child care provider. *Unless specifically agreed or ordered by the court, this order does not include regular child care needed when the custodial parent is working.*
  - The above child care provision will take effect in the event that a parent requires child care for a minimum of how many hours?: childcare_right_of_first_option_hours
    required: false
    datatype: integer
  
  - note: "**Canceled Visitation (parenting time)**"
  - If the noncustodial parent fails to arrive at the appointed time and fails to notify the custodial parent that he or she will be late, then the custodial parent need wait for only a certain amount of time before considering the visitation canceled.: canceled_visitation_late
    datatype: yesnowide
  - How many minutes must the custodial party wait before considering visitation cancelled?: canceled_visitation_late_minutes
    datatype: integer
    required: false

  - If the noncustodial parent is unable to exercise visitation (parenting time) on a given occasion, he or she must notify the other parent at the earliest possible opportunity: canceled_visitation_notification
    datatype: yesnowide
  - If the children are ill and unable to participate in the scheduled visitation, what must the custodial parent provide to the noncustodial parent?: canceled_visitation_illness
    required: false
    choices: 
      - as much notice as possible: asap
      - a doctor's excuse: doctors_excuse
  
  - note: "**Phone contact between parents and children**"
  - The children may have access to the parents at reasonable times, for reasonable durations: telephoneaccess_children
    datatype: yesnowide
  - Parents may have telephone acces to the children at reasonable times, for reasonable durations: telephoneaccess_parents
    datatype: yesnowide 
  - The custodial parent must make the children available for scheduled telephone contact: scheduled_telephone_contact
    datatype: yesnowide
  - Fill in the schedule below: scheduled_telephone_contact_specify
    datatype: area
    show if: scheduled_telephone_contact
  - No parent or any other third party may listen to, monitor, or interfere with the calls.: no_interference
    datatype: yesnowide
  
  - note: "**No Negative Comments**" 
  - Parents will not make or allow others to make negative comments about each other or about their past or present relationships, family, or friends within hearing distance of the children: no_negative_comments
    datatype: yesnowide
  - note: "**Discussion of the court proceedings with the children**"
  - Other than age-appropriate discussion of the parenting plan and the children's role in mediation or other court proceedings, parents will not disscuss with the children any court proceedings relating to custody or visitation: no_discussion_of_proceedings
    datatype: yesnowide
  - note: "**No use of the children as messengers**"
  - Parents will communicate directly with each other on matters concerning the children and may not use the chdren as messengers between them.: no_use_as_messengers
    datatype: yesnowide 
  - note: "**Alcohol and substance abuse**" 
  - The parent(s) may not consume alcoholic beverages, narcotics, or restricted dangerous drugs (except by prescription) before or during periods with the children: no_alcohol_or_drugs
    datatype: yesnowide
  - Within how many hours of contact with the children must the parent not consume alcohol, narcotics, or drugs?: no_alcohol_or_drugs_hours
    datatype: integer
    required: false
  - The parent(s) may not permit any third party to consume alcoholic beverages, narcotics, or restricted dangerous drugs (except by prescription) before or during periods with the children: no_alcohol_or_drugs_thirdparty
    datatype: yesnowide
  - To whom would you like the above alcohol and substance abuse provisions to apply?: no_alcohol_or_drugs_party
    datatype: multiselect
    choices: 
      - ${pet}: no_alcohol_or_drugs_pet
      - ${otherparent}: no_alcohol_or_drugs_otherparent
    required: false
    help: |
      To make multiple selections, hold down the Shift, Ctrl (Control), or Command key on your keyboard and click each item you'd like to select.
  
  - note: "**No exposure to cigarette or marijuana smoke**"
  - Parents will not expose the children to secondhand cigarette or medical marijuana smoke: no_smoking
    datatype: yesnowide
    help: 'Please note that California court forms have not been updated to include additional provisions for e-cigarette use (vaping). You may request to restrict this behavior around the children under "Other Additonal Custody Provisions" below.' 
    
  - note: "**No interference with schedule of any parent without that parent's consent**"
  - Parents will not schedule activities for the children during the other parent's scheduled visitation without the other parent's prior agreement: no_schedule_interference
    datatype: yesnowide 
  
  - note: "**Third-party contact**"
  - Is there anyone with which you would like the children to have no contact?: thirdparty_no_contact
    datatype: yesnoradio
    required: false
  - Who? (*Specify their full name*): thirdparty_no_contact_who
    show if: thirdparty_no_contact
  - Is there anyone with whom the children must not be left alone?: thirdparty_no_leaving_alone
    datatype: yesnoradio
    required: false
  - Who? (*specify their full name*): thirdparty_no_leaving_alone_who
    show if: thirdparty_no_leaving_alone
  
  - note: "**Children's clothing and belongings**"
  - Each party will maintain clothing for the chidren so that the children do not have to make exchanges additioal clothing: exchanges_additional_clothing
    datatype: yesnowide
  - The children will be returned to the other party with the clothing and belongings they had when they arrived: exhanges_with_clothing 
    datatype: yesnowide 
  
  - note: "**Log Book**"
  - Parents will maintain a "log book" and make sure that the book is sent with the children between their homes. Using businesslike notes (no personal comments), parents will record information related to the health, education, and welfare issues that arise during the time the children are with them.: log_book
    datatype: yesnowide
  
  - note: "**Terms and conditions of the order may be changed**"
  - The terms and conditions of this order may be added to or changed as the needs of the children and parents change. Such changes will be in writing, dated and signed by the parents, each party will retain a copy. If parents want a change to be a court order, it must be filed with the court in the form of a court document: changing_orders
    datatype: yesnowide
    
  - note: "**Other Additional Physical Custody Provisions**"
  - Are there any other physical custody provisions you would like to request?: other_add_physicalcustody_provisions
    datatype: yesnoradio
    required: false
  - Write them here: other_add_physicalcustody_provisions_specify
    datatype: area
    show if: other_add_physicalcustody_provisions
#### end of additional physical custody provisions
---
question: |
  **Requesting Orders:** Additional Joint Legal Custody Provisions
subquestion: |
  **All of the additional legal custody provisions below are optional. Check each provision that you would like to apply** 
fields: 
  - note: "**The parties must discuss and consent in making decisions on the following matters:** (*Check all that apply*)"
  - Enrollment in or leaving a particular private or public school or daycare center: changing_schools
    datatype: yesnowide
  - Beginning or ending psychiatric, psychological, or other mental health counseling or therapy: counseling_or_therapy
    datatype: yesnowide
  - Participation in extracurricular activities: extracurricular_activities
    datatype: yesnowide
  - Selection of a doctor, dentist, or other health professional (except in emergency situations): healthcare_provider_selection
    datatype: yesnowide
  - Participation in articular religious activities or institutions: religious_activities
    datatype: yesnowide
  - Out-of-country or out-of-state travel: discuss_travel
    datatype: yesnowide
  - Other: discuss_other
    datatype: yesnowide
  - Please explain: discuss_other_specify
    datatype: area
    show if: discuss_other
    
  - note: "**If a party does not obtain the consent of the other parent to those items selected above, which are granted as court orders:**" 
  - note: "- He or she may be subject to criminal penalties; and"
  - note: "- The court may change the legal and physical custody of the minor children" 
  - Would you like to request any additional consequences (not mentioned above)?: additional_consequences
    datatype: yesnoradio 
    required: false
  - Please specify: additional_consequences_specify 
    datatype: area
    show if: additional_consequences
    
  - note: "**Special decision making designation**"
  - Would you like designate any special decision making power over one or more topics to either ${pet.name.first} or ${otherparent.name.first}?: decision_making_power
    datatype: yesnoradio
    required: false
    help: |
      A parent may wish to request special decision making power over a topic in which he or she has greater expertise than the other parent. For example, a mother may wish to have special decision making power over her daughter's healthcare regarding menstruation and birth control.
  - To whom would you like to grant special decision making power?: decision_making_power_party
    show if: decision_making_power
    required: false
    choices: 
      - ${pet}: decision_making_power_pet
      - ${otherparent}: decision_making_power_otherparent
  - The parent selected above will be responsible for making decisions regarding the following issues (*please specify*): decision_making_power_specify
    datatype: area
    required: false
    show if:  decision_making_power
    
  - note: "**Health-Care Notification**"
  - Each parent must notify the other of the name and address of each health practicioner who examines or treats the children: healthcare_notification
    datatype: yesnowide
  - Such notification must be made within how many days of the first treatment or examination?: healthcare_notification_days
    datatype: integer
    required: false
    show if: healthcare_notification
  - Each party is authorized to take any and all actions necessary to protect the health and welfare of the children, incuding but not limited toconsent to emergency surgical procedures or treatment.: healthcare_emergencies
    datatype: yesnowide
    help: |
      The party authorizing such emergency treatment must notify the the other party as soon as possible of the emergency situation and of all procedures or treatment administered to the children
  - Parents are required to administer any prescribed medications for the children: healthcare_medications
    datatype: yesnowide
  
  - note: "**School Notification**"
  - Each parent will be designated as a person the children's school will contact in the event of an emergency: school_notification
    datatype: yesnowide
  
  - note: "**Children's Names**"
  - Parents will not change the last name of the children or have a different name used on the children's medical, school, or other records without written consent of the other parent.: no_name_changes
    datatype: yesnowide
    
  - note: "**Other Joint Legal Custody Provisions**" 
  - Would you like to request any additional joint legal custody provisions?: other_legalcustody_provisions
    datatype: yesnoradio
    required: false
  - Please explain: other_legalcustody_provisions_specify
    datatype: area
    required: false
    show if: other_legalcustody_provisions
#### end of joint legal custody provisions
---
question: |
  **Requesting Orders:** Other Custody and Visitation Orders
fields: 
  - Are there any other custody and/or visitation orders that you would like to request at this time?: custodyvisitation_otherorders
    datatype: yesnoradio
  - Please explain: custodyvisitation_otherorders_specify
    datatype: area
    hide if: 
      variable: custodyvisitation_otherorders
      is: false
---
#### supervised visitation question block
template: nonprofessionalsupervisor_explanation
subject: "What is a **Nonprofessional Supervision Provider**?"
content: |
  [Family Code section 3200.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=3200.5.) states: 
  
  (1) “Nonprofessional provider” means any person who is not paid for providing supervised visitation services.
---
template: nonprofessionalsupervisorrequirements_explanation
subject: "Nonprofessional Provider Requirements"
content: |
  [Family Code section 3200.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=3200.5.) states: (d) Unless otherwise ordered by the court or stipulated by the parties, a nonprofessional provider shall:

  - (1) Have no record of a conviction for child molestation, child abuse, or other crimes against a person.
  - (2) Have proof of automobile insurance if transporting the child.
  - (3) Have no current or past court order in which the provider is the person being supervised.
  - (4) Agree to adhere to and enforce the court order regarding supervised visitation.
---
template: professionalsupervisor_explanation
subject: "What is a **Professional Supervision Provider**?"
content: |
  [Family Code section 3200.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=3200.5.) states: 
  
  (2) “Professional provider” means any person paid for providing supervised visitation services, or an independent contractor, employee, intern, or volunteer operating independently or through a supervised visitation center or agency.
---
template: professionalsupervisorrequirements_explanation
subject: "Professional Provider Requirements"
content: |
  [Family Code section 3200.5](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=3200.5.) states: (e) A professional provider shall:

  - (1) Be at least 21 years of age.
  - (2) Have no record of a conviction for driving under the influence (DUI) within the last five years.
  - (3) Not have been on probation or parole for the last 10 years.
  - (4) Have no record of a conviction for child molestation, child abuse, or other crimes against a person.
  - (5) Have proof of automobile insurance if transporting the child.
  - (6) Have no civil, criminal, or juvenile restraining orders within the last 10 years.
  - (7) Have no current or past court order in which the provider is the person being supervised.
  - (8) Be able to speak the language of the party being supervised and of the child, or the provider must provide a neutral interpreter over 18 years of age who is able to do so.
  - (9) Agree to adhere to and enforce the court order regarding supervised visitation.
  - (10) (A) Complete 24 hours of training prior to providing visitation services, including at least 12 hours of classroom instruction in the following subjects (*click the family code section's link above to see the full list*)
---
question: |
  **Requesting Orders:** Supervised Visitation 
subquestion: |
  **As a reminder:** Supervised visitation is typically ordered when a parent is determined to present a risk to the children's safety or well-being, warranting the presence of a third party to supervise visits with the other parent. This third party can be you, another adult (such as a friend or relative), or a professional monitor. Supervised visitation can also be used in reunification situations--where a parent and the children have not seen each other for quite some.    
fields:
  - Would you like to request that ${ noncustodialparty.name.first }'s visitation is supervised?: supervisedvisitation
    datatype: yesnoradio
    label above field: true
  - Would you like to request that the visitation supervisor meet the requirements listed below for professional and non-professional supervision providers?: supervisor_requirements
    datatype: yesnoradio
    label above field: true
    show if: supervisedvisitation
  - note: "${collapse_template(nonprofessionalsupervisor_explanation)}"
    show if: supervisedvisitation
  - note: "${collapse_template(nonprofessionalsupervisorrequirements_explanation)}"
    show if: supervisedvisitation
  - note: "${collapse_template(professionalsupervisor_explanation)}"
    show if: supervisedvisitation
  - note: "${collapse_template(professionalsupervisorrequirements_explanation)}"
    show if: supervisedvisitation
  - Would you like to request that supervision be conducted by a professional supervisor?: supervisedvisitation_professional_supervisor
    datatype: yesnoradio
    show if: supervisedvisitation
    label above field: true
  - note: 'If you know the professional supervisor who you would like to supervise visitation, fill in their information below. If you do not know the identity of the individual who will provide professional supervision, write "Unknown" in each box.' 
    show if: supervisedvisitation_professional_supervisor
  - Full Name: supervisedvisitation_professional_supervisor_name
    required: false
    show if: supervisedvisitation_professional_supervisor
  - Phone number: supervisedvisitation_professional_supervisor_phone
    required: false
    show if: supervisedvisitation_professional_supervisor
  - Most programs that provide professional supervised visitation cost money. What percentage of the costs would you like ${ noncustodialparty } to pay? (*Write a number between 1 and 100*): supervisedvisitation_cost
    datatype: number
    min: 0
    max: 100
    label above field: true
    show if: supervisedvisitation_professional_supervisor
    help: "For example, if you want to split the cost of supervision evenly between yourself and the other parent, write 50%. If you want ${noncustodialparty} to pay for the entire cost of supervision, write 100%." 
  - note: 'If you know the non-professional supervisor (i.e. a family member, friend, etc.) who you would like to supervise visitation, please fill in their information below. (Note that this individual will need to sign a declaration for filing with the court that he/she satisfies the conditions for being a non-professional supervisor.) If you do not know the identity of the individual who will provide non-professional supervision, write "Unknown" in each box.' 
    show if: 
      variable: supervisedvisitation_professional_supervisor
      is: False
  - Full Name: supervisedvisitation_nonprofessional_supervisor_name
    required: false
    show if: 
      variable: supervisedvisitation_professional_supervisor
      is: False
  - Phone Number: supervisedvisitation_nonprofessional_supervisor_phone
    required: false
    show if: 
      variable: supervisedvisitation_professional_supervisor
      is: False
---
#### start of responsibility for transportation question block 
question: |
  **Requesting Orders:** Responsibility for Transportation 
fields:
  - Would you like to request orders outlining specific drop off and pickup arrangements to and from ${ noncustodialparty.name.first }'s visitation?: responsibility_for_transportation
    datatype: yesnoradio
    label above field: true
  - note: 
      "Transportation **to** Visitation (*optional*):"
    show if: responsibility_for_transportation  
  - Would you like to specify how the children will be transported to visitation?: transportation_to_visitation
    datatype: yesnoradio
    required: false
    show if: responsibility_for_transportation
  - Would you like to request that the court order ${ custodialparty.name.first } to take the children to ${ noncustodialparty.name.first }'s visitation?: transportation_to_visitation_pet
    datatype: yesnoradio
    show if: transportation_to_visitation
  - Would you like to request that the court order ${ noncustodialparty.name.first } to pick up the children for visitation?: transportation_to_visitation_noncustodialparent
    datatype: yesnoradio
    show if:
      variable: transportation_to_visitation_pet
      is: False
  - You indicated that you don't want the court to order that ${ custodialparty.name.first } or ${ noncustodialparty.name.first } be responsible for taking the children to visitation. Who would you like to pick up and take the children to visitation instead?: transportation_to_visitation_other
    required: false
    show if:
      variable: transportation_to_visitation_noncustodialparent
      is: False  
  - note: 
      "Transportation **from** Visitation (*optional*):"
    show if: responsibility_for_transportation 
  - Would you like to specify how the children will be transported from visitation?: transportation_from_visitation
    datatype: yesnoradio
    show if: responsibility_for_transportation
    required: false
  - Would you like to request that the court order ${ custodialparty.name.first } to pick up the children from ${ noncustodialparty.name.first }'s visitation?: transportation_from_visitation_pet
    datatype: yesnoradio
    show if: transportation_from_visitation
  - Would you like to request that the court order ${ noncustodialparty.name.first } to drop off the children after visitation?: transportation_from_visitation_noncustodialparent
    datatype: yesnoradio
    show if:
      variable: transportation_from_visitation_pet
      is: False
  - You indicated that you don't want the court to order that ${ custodialparty.name.first } or ${ noncustodialparty.name.first } be responsible for dropping off the children after visitation. Who would you like to pick up and drop-off the children after visitation instead?: transportation_from_visitation_other
    required: false
    show if:
      variable: transportation_from_visitation_noncustodialparent
      is: False
  - note: 
      "Pick-up/Drop-off Address (*optional*):"
    show if: responsibility_for_transportation 
  - note: "${visitation_exchangepoint_options_explanation}"
    show if: responsibility_for_transportation 
  - Would you like to request that the court order a specific exchange point for the **start** of visitation?: responsibility_for_transportation_address_start
    datatype: yesnoradio
    required: false
    show if: responsibility_for_transportation
  - Specify the exchange point's address: responsibility_for_transportation_address_start_specify
    show if: responsibility_for_transportation_address_start
  - Would you like to request that the court order a specific exchange point for the **end** of visitation?: responsibility_for_transportation_address_end
    datatype: yesnoradio
    required: false
    show if: responsibility_for_transportation
  - Specify the exchange point's address: responsibility_for_transportation_address_end_specify
    show if: responsibility_for_transportation_address_end  
  - note: 
      "Other Arrangement (*optional*):"
    show if: responsibility_for_transportation 
  - Would you like to request that during exchanges, if the children are being driven, that the party driving the children wait in the car, and the other party receiving the children wait in his or her home, or other exchange location, while the children go between the car and the home or other exchange location?: wait_in_car
    datatype: yesnoradio
    required: false
    show if: responsibility_for_transportation 
  - Would you like to include any additional orders/details and/or write your own transportation for visitation arrangement?: responsibility_for_transportation_other
    datatype: yesnoradio
    show if: responsibility_for_transportation 
  - Please explain: responsibility_for_transportation_other_specify
    input type: area
    show if: responsibility_for_transportation_other
---
template: visitation_exchangepoint_options_explanation
subject: "Options for Visitation Exchanges"
content: |
  This pertains to where your children will be picked up/dropped off to commence visitation, and where your children will be picked up/dropped off at the end of visitation. Exchanges at school tend to be easiest, unless the visitation does not begin or end on a school day. If you prefer, you can request that all exchanges be at a specific parent's home, that visitation begin at one parent's home and end at the other parent's home (i.e., the children are picked up from the other parent's home at the end of visitation), or that the pick up and drop off exchanges be at another location (e.g., a McDonalds, police station, other family member's home, etc.).
---
#### start of travel restrictions question block 
question: |
  **Requesting Orders:** Travel With Children
fields: 
  - note: |
      **Restricting Out-of-State Travel**
  - Would you like the court to order that you and/or ${otherparent.name.first} must get the other's written permission before traveling **out of state** with the children?: travel_with_children_state
    datatype: yesnoradio
  
  - note: |
      **Restricting Out-of-County Travel**
  - Would you like the court to order that you and/or ${otherparent.name.first} must get the other's written permission before traveling **out of the county** with the children?: travel_with_children_county
    datatype: yesnoradio
  - Which counties?: travel_with_children_county_specify
    show if: travel_with_children_county
  
  - note: |
      **Restricting Travel Outside of Another Location**
  - Would you like the court to order that both you and ${otherparent.name.first} must get each other's written permission before traveling out of another place/location with the children?: travel_with_children_other
    datatype: yesnoradio
  - Specify the other place(s): travel_with_children_other_specify
    show if: travel_with_children_other
  
  - note: "To whom would you like the above travel restrictions to apply? (*Check each party that must get the other parent's permission prior to each type of travel selected above*)"
  - ${pet.name}: travel_with_children_pet
    datatype: yesnowide
  - ${otherparent.name}: travel_with_children_otherparent
    datatype: yesnowide
---
#### start of child abduction prevention question block 
question: | 
  **Requesting Orders:** Child Abduction Risk
subquestion: |
  Do you believe that there is a risk that ${ noncustodialparty.name.first } will take your children out of California and hide them from you? 
fields: 
  - no label: child_abduction_risk
    datatype: yesnoradio
  - Do you think ${ otherparent.name.first } might take the children without your permission to another county in California?: notravel_another_CA_county
    datatype: yesnoradio
    required: false
    hide if: 
      variable: child_abduction_risk
      is: False
  - Which county?: notravel_another_CA_county_specify
    required: false
    show if: notravel_another_CA_county
  - Do you think ${ otherparent.name.first } might take the children without your permission to another State?: notravel_another_state
    datatype: yesnoradio
    required: false
    hide if: 
      variable: child_abduction_risk
      is: False
  - Which state?: notravel_another_state_specify
    code: states_list()
    required: false
    show if: notravel_another_state
  - Do you think ${ otherparent.name.first } might take the children without your permission to a foreign country?: notravel_another_country
    datatype: yesnoradio
    required: false
    hide if: 
      variable: child_abduction_risk
      is: False
  - Which country?: notravel_another_country_specify
    code: countries_list()
    required: false
    show if: notravel_another_country
  - Is ${ otherparent.name.first } a citizen of this country?: notravel_another_country_citizen 
    datatype: yesnoradio
    required: false
    show if: notravel_another_country
  - Does ${ otherparent.name.first } have family or emotional ties to this country?: notravel_another_country_emotionalties
    datatype: yesnoradio
    required: false
    show if: notravel_another_country
  - Please explain: notravel_another_country_emotionalties_explanation
    input type: area
    required: false
    show if: notravel_another_country_emotionalties
---
question: | 
  **Requesting Orders:** Child Abduction Risk
fields: 
  - Has ${ otherparent.name.first } violated, or threatened to violate, a custody or visitation order in the past?: flightrisk_violated_custody_orders
    datatype: yesnoradio
    show if: custodyvisitation_priorcase_yes
  - Explain: flightrisk_violated_custody_orders_explain
    input type: area
    show if: flightrisk_violated_custody_orders
    required: False
---
question: | 
  **Requesting Orders:** Child Abduction Risk
subquestion: |
  Indicate each reason you think ${otherparent.name.first} might take the children without your permission. 
fields:
  - Does ${ otherparent.name.first } lack strong ties to California? In other words, do you think it would be easy for ${ otherparent.name.first } to move out of state on short notice?: flightrisk_no_ties
    datatype: yesnoradio 
  - Explain any work, financial, social, or family situation that makes it easy for ${ otherparent.name.first } to leave California.: flightrisk_no_ties_explain
    required: False
    input type: area
    hide if: 
      variable: flightrisk_no_ties
      is: False
  - note: 
      "Select 'Yes' for each action that ${ noncustodialparty.name.first } has recently taken that would make it easy for him or her to take the children away without your permission."
  - Has ${ otherparent.name.first } recently quit their job?: flightrisk_quit_job
    datatype: yesnoradio
  - Has ${ otherparent.name.first } recently closed a bank account?: flightrisk_closed_bank_account
    datatype: yesnoradio
  - Has ${ otherparent.name.first } recent sold or gotten rid of assets?: flightrisk_sold_assets
    datatype: yesnoradio
  - Has ${ otherparent.name.first } recently sold his or her home home?: flightrisk_sold_home
    datatype: yesnoradio 
  - Has ${ otherparent.name.first } recently ended a lease?: flightrisk_ended_lease
    datatype: yesnoradio
  - Has ${ otherparent.name.first } recently hidden or destroyed documents?: flightrisk_hidden_documents
    datatype: yesnoradio
  - Has ${ otherparent.name.first } recently applied for a passport, birth certificate, or school or medical records?: flightrisk_applied_for_passport
    datatype: yesnoradio
  - Has ${ otherparent.name.first } recently done any other things that make it easy for him or her to take the children without your permission?: flightrisk_other
    datatype: yesnoradio
  - Please explain: flightrisk_other_specify
    required: False
    input type: area
    hide if: 
      variable: flightrisk_other
      is: False
  - note: "**${ otherparent.name.first } has a history of (*Check all that apply*)**"
    label above field: true
  - Domestic Violence: flightrisk_history_of_dv
    datatype: yesnowide
  - Child Abuse: flightrisk_history_of_child_abuse
    datatype: yesnowide
  - Not cooperating with me in parenting: flightrisk_history_of_not_cooperating
    datatype: yesnowide
  - Child abduction: flightrisk_history_of_child_abduction
    datatype: yesnowide
  - In your own words, please explain your answers above and summarize why you think ${ otherparent.name.first } might take the children without your permission.: flightrisk_history_explanation
    input type: area
    label above field: True
  - Does ${ otherparent.name.first } have a criminal record?: flightrisk_criminal_record
    datatype: yesnoradio
  - Please explain: flightrisk_criminal_record_explain
    required: False
    datatype: area
    hide if: 
      variable: flightrisk_criminal_record
      is: False
---
question: | 
  **Requesting Orders:** Child Abduction Risk
fields: 
  - Would you like to ask the court to order ${ otherparent.name.first } to post a bond (i.e. give money to the court) that you can use to bring the children back if ${ otherparent.name.first } takes the children without your permission?: post_a_bond
    datatype: yesnoradio
    help: |
      In other words, if you believe that ${ otherparent.name.first } may take the children to another state or country without your permission, you can ask the court to make ${ otherparent.name.first } put an amount of money (of your choosing) into a bond, which the court will then give to you to retrieve your children should ${ otherparent.name.first } abduct them. *Please note that it's very difficult to get the court to order ${ otherparent } to post a bond.* 
  - For how much?: post_a_bond_amount
    datatype: currency
    hide if: 
      variable: post_a_bond
      is: False
  - Would you like to ask the court to order ${ otherparent.name.first } not to move with the children without first getting your written permission or a court order?: do_not_move
    datatype: yesnoradio
  - note: "Check each of the following locations from which you want the court to order ${otherparent} not to move"
    show if: do_not_move
  - Current residence: do_not_move_currentresidence
    show if: do_not_move
    datatype: yesnowide
  - Current school district: do_not_move_schooldistrict
    show if: do_not_move
    datatype: yesnowide
  - Please specify: do_not_move_schooldistrict_specify
    show if: do_not_move_schooldistrict
  - Current county: do_not_move_county
    show if: do_not_move
    datatype: yesnowide
  - Other location: do_not_move_other
    show if: do_not_move
    datatype: yesnowide
  - Please specify: do_not_move_other_specify
    show if: do_not_move_other
  
  - Would you like to ask the court to order ${ otherparent.name.first } to register this order in another state before the children can travel to that state for visits? (*You can still request this protection even if you are currently requesting no visitation*): notify_other_state
    datatype: yesnoradio
  - Which state?: notify_other_state_specify
    code: states_list()
    hide if:
      variable: notify_other_state
      is: False
  - Would you like to ask the court to order ${ otherparent.name.first } to turn in and *not* apply for passports or other documents (such as visas or birth certificates) that can be used for travel?: turn_in_passports
    datatype: yesnoradio
  - Specify which documents you want the court to order ${otherparent.name.first} to turn in: turn_in_passports_specify
    show if: turn_in_passports
  - note: "If ${ otherparent.name.first } is allowed to travel with the children (whether now or in the future), would you like to ask the court to order ${ otherparent.name.first } to provide you any of the following? (*Check all that apply*)"
    label above field: true
  - The children's travel itinerary: provide_travel_docs_itinerary
    datatype: yesnowide
  - Copies of round-trip airline tickets: provide_travel_docs_airline_tickets
    datatype: yesnowide
  - Addresses and phone numbers where the children can be reached: provide_travel_docs_addresses_and_phone_numbers
    datatype: yesnowide
  - An open airline ticket for you, in case the children are not returned: provide_travel_docs_open_airline_ticket
    datatype: yesnowide
  - Other: provide_travel_docs_other
    datatype: yesnowide
  - Please specify: provide_travel_docs_other_specify
    required: false
    show if: provide_travel_docs_other
  - Would you like to ask the court to order ${ otherparent.name.first } to notify the embassy or consulate of a foreign country you fear they might take the children to without your permission with this order?: notify_foreign_embassy
    datatype: yesnoradio
  - Which country?: notify_foreign_embassy_specify
    code: countries_list()
    hide if: 
      variable: notify_foreign_embassy
      is: False
  - If this order is granted, within how many calendar days would you like ${ otherparent.name.first } to provide the court with proof of that notification?: notify_foreign_embassy_days
    datatype: integer
    hide if: 
      variable: notify_foreign_embassy
      is: False
  - Would you like to ask the court to order ${ otherparent.name.first } to get a custody and visitation order equal to the most recent U.S. order before your children can travel to that country for visits? (Please note, foreign orders may be changed or enforced depending on the laws of the country): foreign_custody_and_visitation_order
    datatype: yesnoradio
    hide if: 
      variable: notify_foreign_embassy
      is: False
  - If granted, the court will authorize any law enforcement officer to enforce this order (if need be). As such please look up and fill in the **phone number** and **address** of your county's Child Abduction Unit of the Office of the District Attorney: child_abduction_unit_office
    input type: area
  - Are there any other child abduction prevention orders you would like to request at this time?: child_abduction_orders_other
    datatype: yesnoradio
  - Please specify: child_abduction_orders_other_specify
    input type: area
    label above field: true
    hide if: 
      variable: child_abduction_orders_other
      is: False
#### end of child abduction prevention question block
---
question: |
  **Requesting **Temporary** Orders:** Child Custody and Visitation
fields: 
  - In your own words, please explain why the child custody and visitation orders you're requesting are in the best interest of the children: explain_custodyvisitation
    datatype: area
    label above field: true
---
template: exparte_ccfactstosupport_explanation
subject: "What should I include in my written declaration?"
content: |
  **(A)** Provide a detailed description explaining either: (1) why and how the child could be harmed, as described in [Family Code Section 3064(b)](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=3064.) below, or (2) why and how there is an immediate risk that the parent will take the child outside California.
  
  Remember, “Immediate harm to the child” includes, but is not limited to, the following:

  - (1) Having a parent who has committed acts of domestic violence, where the court determines that the acts of domestic violence are of recent origin or are a part of a demonstrated and continuing pattern of acts of domestic violence.
  - (2) Sexual abuse of the child, where the court determines that the acts of sexual abuse are of recent origin or are a part of a demonstrated and continuing pattern of acts of sexual abuse.

  **(B)** Identify the date of each incident.

  **(C)** Describe any existing custody and visitation (parenting time) arrangements and/or orders and explain how they would be changed by the emergency orders being requested.

  **(D)** Describe in detail the current living arrangements of the child.

  Keep in mind that an ex parte order is temporary. The temporary order will stay in place until the Request for Order hearing is held. Court hearings are generally set within 20 days.  At the last hearing, the judge will decide whether the order shall remain permanently in effect.
---
question: |
  **Requesting *Temporary Emergency* Orders:** Child Custody and Visitation
subquestion: |
  To get temporary emergency orders, you must prove to the court that your children are at risk of immediate and irreparable harm or abduction. So make sure you explain in detail why you believe these temporary orders are necessary to protect your child. 
  
  ${collapse_template(exparte_ccfactstosupport_explanation)}
fields: 
  - In your own words, please explain why the child custody and visitation orders you're requesting are in the best interest of the children: explain_custodyvisitation_exparte
    input type: area
    rows: 20
    label above field: true
---
question: |
  **Requesting *Temporary* Orders:** Child Custody and Visitation
fields:
  - Is there a child custody order currently in place for any of your children?: current_custody_order
    datatype: yesnoradio
  - When was this custody order filed?: current_custody_order_date
    datatype: ThreePartsDate
    hide if: 
      variable: current_custody_order
      is: false
  - Briefly explain what the court ordered: current_custody_order_explain
    datatype: area
    hide if: 
      variable: current_custody_order
      is: false
    
  - Is there a visitation order currently in place for any of your children?: current_visitation_order
    datatype: yesnoradio
  - When was this visitation order filed?: current_visitation_order_date
    datatype: ThreePartsDate
    hide if: 
      variable: current_visitation_order
      is: false
  - Briefly explain what the court ordered: current_visitation_order_explain
    datatype: area
    hide if: 
      variable: current_visitation_order
      is: false
---
#### start of child support question blocks 
question: |
  **Child Support**
subquestion: |
  The next few pages contain basic information regarding child support orders and how they're determined in California. 
  
  We encourage parents to read through this information regardless of whether or not they are requesting child support.
continue button field: cs_intro 
---
question: |
  **What is Child Support?**
subquestion: |
  Child support is the amount of money that a court orders a parent or both parents to pay every month to help pay for the support of the child (or children) and the child’s living expenses.
  
  **Child Support Resources**
  
  We highly encourage you to review the California Court System's [Families Change Website](https://www.familieschange.ca.gov/), which helps parents, teens, and children deal with a family break up. Their [Parent Guide to Separation and Divorce - Child Support](https://www.familieschange.ca.gov/en/parents/child-support) explains parents’ child support responsibilities, describes how to figure out what a parent should pay or expect to receive, and details how to calculate other types of expenses. You will also find links to services that can help you and other types of resources.
continue button field: cs_info1
---
question: |
  **How to ask for Child Support**
subquestion: |
  There are two primary ways for married parents (or parents who are registered domestic partners) to request an order for child support: 
  
  - **(1) Through your divorce case:** Either parent can ask the judge to make a child support order as part of their divorce, legal separation, or annulment.
  - **(2) Through a case filed by your Local Child Support Agency:** Your LCSA is the local government agency located in your county that provides services to establish parentage and establish and enforce child support orders. 
continue button field: cs_info2
---
question: |
  **How to ask for Child Support**
subquestion: |
  **Option 1: How to ask for Child Support through your Divorce Case**
  
  **(a) If you and ${otherparent.name.first} do NOT agree on child support:**
  
  To ask for child support through your divorce case, you must file a Request for Order (form FL-300) and Income and Expense Declaration (form FL-150) alongside your Petition. Upon filing your forms, you will get a hearing date from the clerk. At your hearing, you must show the court why your requested orders are in the best interest of the children, and the judge will decide whether or not to order child support.

  **(b) If you and ${otherparent.name.first} have, or are you both creating, a written agreement regarding child support:**

  If you and ${otherparent.name.first} have, or can come to, an agreement regarding child support, you do not have to request a hearing for the judge to order child support. Instead, you and ${resp} can draft a child support stipulation (form FL-350) that outlines the agreed-upon amounts for support payments, as well as other issues. A judge will review your stipulation once you have completed and filed it with the court.   

  The procedure for writing up your child support agreement and getting a judge's signature so that it becomes a court order may be a little different from court to court, even if the forms are the same statewide. Make sure you ask your court clerk about the procedures for your court. Additionally, you can use the Stipulation to Establish or Modify Child Support and Order ([form FL-350](https://www.courts.ca.gov/documents/fl350.pdf)). The form walks you through all the issues you need to address in your agreement, so make sure you read it carefully.
continue button field: cs_info3
---
question: |
  **How to ask for Child Support**
subquestion: |
  **Option 2: How to ask for Child Support through a case filed by your Local Child Support Agency (LCSA)**
  
  - **(a)** If you or ${otherparent.name.first} have been getting public assistance (like TANF -Temporary Assistance for Needy Families), the LCSA automatically files a child support case against the noncustodial parent.  The case also includes as a party the custodial parent that is receiving public assistance.
  - **(b)** Either parent can ask the LCSA to provide child support services, which will then start a child support case.
  - **(c)** If a child is in foster care, the LCSA may start a child support case against one or both parents.
  - **(d)** Either parent can ask the LCSA to take over enforcement of a child support order in a family law case (like a divorce or parentage case). 
  
  For more information on the LCSA child support process, please visit the California Court website's page, [Asking for a Child Support Order](https://www.courts.ca.gov/1194.htm#acc11469), and click the tab labelled "Starting a case with the local child support agency"
continue button field: cs_info4
---
template: cs_ordertiming_explanation
subject: '(1) If there are minor children born to or adopted by you and ${otherparent.name.first} before this marriage or domestic partnership, the court will make orders for the support of the children upon request and submission of financial forms by the requesting party.'
content: |
  If you and ${otherparent.name.first} had children before getting married, the court will order child support once you submit your financial disclosure documents. These forms will be generated after you fill out the sections "Your Income and Employment" and "Your Assets and Debts."
---
template: cs_eao_explanation
subject: '(2) An earnings assignment may be issued without further notice.' 
content: |
  After the judge decides the amount of child or spousal support, he or she may issue an earnings assignment order (aka a wage assignment or income withholding order), which is a document that tells the employer how much to deduct from each paycheck and where to send the payment. 
  
  If the parent ordered to pay support is regularly employed, the employer will take support payments directly out of his or her paycheck.  Most support is paid this way, and federal and state laws require it in almost all child support cases. It is the employer's responsibility to withhold the wages if there is a wage assignment. If the parent has other wage assignments in place, child support is deducted first, before other withholding orders. Spousal or partner support assignments come after child support wage assignments.
---
template: cs_arrearages_explanation
subject: '(3) Any party required to pay support must pay interest on overdue amounts at the "legal" rate, which is currently 10 percent.'
content: |
  If the parent ordered to pay support is late in his or her payments, he or she must pay an additional 10% in interest.
---
question: |
  **Requesting Child Support**
fields: 
  - Would you like to request (or request to change) child support orders?: requesting_childsupport
    datatype: yesnoradio
    label above field: true
  - note: "**Please review the information below:**"
    show if: requesting_childsupport
  - note: "${collapse_template(cs_ordertiming_explanation)}"
    show if: requesting_childsupport
  - note: "${collapse_template(cs_eao_explanation)}"
    show if: requesting_childsupport
  - note: "${collapse_template(cs_arrearages_explanation)}"
    show if: requesting_childsupport
---
question: |
  **Requesting Child Support**
fields: 
  - Are there any additional child support orders you would like to request at this time?: requesting_cs_other
    datatype: yesnoradio
  - Please specify: requesting_cs_other_specify
    label above field: true
    input type: area
    show if: requesting_cs_other
    maxlength: 146
  - Check here if you need more space: requesting_cs_other_ms
    datatype: yesno
    show if: requesting_cs_other
  - Please continue writing the additional child support orders you want in the space below.: requesting_cs_other_attachment
    label above field: true
    input type: area
    show if: requesting_cs_other_ms
    help: "Note that since your response is too long to fit in the field in which it would normally be generated, this overflow text will fill in an attachment to your court forms instead."
---
question: |
  **Requesting Child Support**
fields: 
  - Do you and ${otherparent.name.first} have, or are you both creating, a written agreement regarding child support?: cs_agreement
    datatype: yesnoradio 
    label above field: true
  - note: "If you select 'Yes,' this interview will skip the next sections on child support, and you will be directed to complete our Child Support Agreement module once you have completed this interview."
    show if: cs_agreement
  - note: "If you would rather request your preferred orders now (in your Petition) and wait for ${otherparent.name.first} to file a Response with his or her preferred orders BEFORE trying to create a child support agreement, select 'No.'"
    show if: cs_agreement
---
question: |
  **Requesting Child Support:** Previous Orders
fields: 
  - Do you have child support order that is currently in effect?: cs_previousorder
    datatype: yesnoradio
    label above field: true
  - When was the current order filed?: cs_previousorder_date
    datatype: ThreePartsDate
    show if: cs_previousorder
  - Describe the current child support order: cs_previousorder_description
    datatype: area
    show if: cs_previousorder
  - If possible, upload a copy of the order: cs_previousorder_file
    datatype: file
    show if: cs_previousorder
---
question: |
  **Child Support Agreement**
subquestion: |
  You have indicated that you and ${otherparent.name.first} have, or are both creating, a written agreement on child support. 
  
  Once you have completed this **Divorce Petition** module, you may start the **Child Support Agreement Module** to begin populating the court forms for your child support agreement.
continue button field: cs_agreement_info
---
question: |
  **Calculating Child Support**
subquestion: |
  You will be promted to input your income and expense information on the following pages. Once you have completed your forms, you will need to attach copies of your pay stubs for the last two months and proof of any other income to your Income and Expense Declaration. Additionally, you will need to bring a copy of your latest federal tax return to your court hearing. 
  
  **Gather the following documents/financial information before proceeding to the next page:** 
  
  - Tax returns
  - Paycheck stubs
  - W2s or 1099s
  
  As well as any documents that describe:
  
  - Disability or Unemployment Benefits 
  - Childcare Expenses
  - Health Insurance Premiums
  - Mandatory Retirement Contributions
  - Job Related Expenses
  - Spousal Support paid to other relationships
  - Extraordinary health care expenses
  - Uninsured catastrophic losses
  - Child Support paid for children of other relationships

continue button field: cs_documents
---
template: guidelinecalculator_explanation
subject: "How does the court calculate guideline support?"
content: |
  The guideline support calculator will consider the following information:

  * Each parent’s monthly gross income
  * The percentage of time each child spends with each parent
  * Any available income tax deductions that the parents can claim, such as mortgage interest
  * Mandatory payroll deductions, such as health insurance, pensions, and union dues, and child care costs incurred by either parent.
  
  Once you plug this financial information into the calculator, it will generate estimated child support payment amounts for one or both parents.
  
  For more information on how guideline child support determinations are made, please review [Family Code Sections 4050-4076](https://leginfo.legislature.ca.gov/faces/codes_displayText.xhtml?lawCode=FAM&division=9.&title=&part=2.&chapter=2.&article=2.).
---
question: |
  **Requesting Child Support**
subquestion: |
  **Guideline Support**
  
  California law requires courts to adhere to statewide uniform guidelines in setting child support orders (i.e. determining the appropriate amount for child support payments). You may estimate the guideline child support payments in your case by using the California Child Support Service's [Guideline Calculator](https://childsupport.ca.gov/guideline-calculator/), which applies the statewide uniform guideline calculation once you enter your income and expense information into it. 
  
  ${collapse_template(guidelinecalculator_explanation)} 
fields: 
  - Would you like to request support for each child based on the child support guideline?: cs_guideline
    datatype: yesnoradio
  
  - note: "**Non-Guideline Support**"
    show if: 
      variable: cs_guideline
      is: False 
  - note: "Only in very limited circumstances, under which you have proved to the court that the application of the guideline support formula would be unjust or inappropriate in the particular case, can the judge order something other than the guideline amount."
    show if: 
      variable: cs_guideline
      is: False
  - note: "For more information about the limited circumstances under which a judge may issue a non-guideline child support order, please review [Family Code Section 4057](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=4057.&nodeTreePath=11.2.2.2&lawCode=FAM)."
    show if: 
      variable: cs_guideline
      is: False
  
  - What is the monthly non-guideline child support payment amount you are requesting for each child?: cs_nonguideline_amount
    datatype: currency
    show if: 
      variable: cs_guideline
      is: False 
  
  - note: "**Explain your support requests**"
  - In your own words, please explain why the court should make or change your requested child support orders: explain_cs
    datatype: area
    label above field: true
    help: |
      This is where you must explain to the court why the child support orders you're requesting are in the best interest of your child or children.
---
question: |
  **Requesting *Temporary* Orders:** Child Support
subquestion: |
  Child support orders will not go into effect until a judge finalizes your divorce. California law states that the **earliest** you can be divorced is 6 months and 1 day from one of the following three dates (whichever occurs first):
  
  - (1) The date ${resp.name.first} was served with (given) your Petition and Summons;
  - (2) The date ${resp.name.first}'s Response was filed; or
  - (3) The date the Appearance, Stipulations, and Waivers was filed (in uncontested divorce cases)
  
  **BUT divorce cases can take much longer.** That said, you may request temporary child support orders that, if granted, will go into effect temporarily until your divorce is finalized. 
fields:
  - Would you like to request a temporary child support order: childsupport_requesting_temporary_orders
    datatype: yesnoradio
    label above field: true
---
#### start of property division question blocks 
#### start of assets question blocks 
question: |
  **Property Division** 
subquestion: |
  Normally, separating couples can work out a separation of property that they both feel is fair. But remember, until a judge signs off on your agreement and issues a final order, your property and debts still belong to both of you and do not become separate even if you have agreed on how to divide them between yourselves.

  When you divide your property and debt, you should come up with an agreement that divides everything fairly equally, so that you each end up with roughly the same value of your property (and debt). Dividing your property does not necessarily mean a physical division.

  On the following pages, you will be asked to:
  
  - (1) List ALL of your and ${resp}'s assets (aka property) and debts, and 
  - (2) Propose how you'd like to divide these assets and debts between you and ${resp} 
  
  A good way to start is to make a list of everything that you own. Please note that you and ${resp} must declare all assets and debts to the other. The most important thing to do is to be open and honest in listing everything of value you own. If you keep anything hidden, it tends to come to the surface sooner or later, and the penalties for hiding something of value can be very serious.  
continue button field: propertydivision_info1
---
question: |
  **Property Division:** Community vs. Separate Property 
subquestion: |
  In order to request property division orders, you will need to categorize each asset and debt as either community or separate property. See our [video explaining Separate vs. Community Property](link Youtube video). 
  
  **What is Community Property?** 
  
  Any property acquired between your date of marriage and date of separation is presumed to be community property (unless such property qualifies as separate property under the law), and belongs to both you and ${resp}. Community property also includes separate property that is changed to community property after marriage in compliance with the law (*read [California Family Code Section 852](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=852.&lawCode=FAM) on transmutation*). 
  
  **What is Separate Property?**
  
  Separate property refers to all property acquired (1) by you or ${resp} before your date of marriage; (2) after your date of separation; (3) by gift or inheritance at any time; (4) between your date of marriage and date of separation and acquired with separate property; or (5) that is initially acquired as community property but subsequently changed separate property in compliance with the law. 
  
  For more information, please click the following links to navigate to the California Family Code's definitions of: 
  
  - [Separate Property](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=770.); 
  - [Community Property](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=760.); and
  - [Quasi-Community Property](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=125.).  
  
  We recommend that you to read California [Family Code Sections 760-853](https://leginfo.legislature.ca.gov/faces/codes_displayexpandedbranch.xhtml?lawCode=FAM&division=4.&title=&part=2.&chapter=1.&article=&goUp=Y) regarding Characterization of Marital Property, and also [California Family Code Section 70](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=70.&lawCode=FAM) which defines “date of separation.” 
continue button field: propertydivision_info2
--- 
question: |
  **Property Division:** Assets
subquestion: |
  On the following pages, you will be asked to list and categorize each of your assets, including the following information about each: 
  
  **Date Acquired:** the date that you and/or ${resp} obtained ownership of the asset. 
  
  - If you do not know the exact date, you can list a month and year or write "before marriage," "during marriage," or "after separation." However, make sure that whatever you list makes it clear whether or not the asset or debt should be considered separate or community property. 
  - For example, if your date of separation was July 4, 2022, you could not list "July 2022" as the date of acquisition, because this is not specific enough to determine whether the asset was acquired during the marriage or after the date of separation.  
  
  **Gross Fair Market Value:** the current value you estimate an asset is worth. 
  
  - If you don't know an asset's worth, do some research online for the same or similar assets and look for the price at which they are currently selling.
  - When you list the current gross fair market value, please note that you must list the current value of the items (*think, how much could I get for this at a garage sale or on Craigslist?*), NOT the value that you purchased the item at or how much it would cost to replace it.  
  
  **Amount of Debt:** how much money is still owed on the purchase of an asset.
  
  - For example, if you bought a car for $11,000, but have a remaining loan of $4,000, you would write $4,000 under *Amout of Debt*.  
  
continue button field: propertydivision_info3
---
template: date_acquired
subject: "**Date Acquired**"
content: |
  The date that you and/or ${resp} obtained ownership of the asset. 
  
  If you do not know the exact date, you can list a month and year or write "before marriage," "during marriage," or "after separation." However, make sure that whatever you list makes it clear whether or not the asset or debt should be considered separate or community property. 
  
  For example, if your date of separation was July 4, 2022, you could not list "July 2022" as the date of acquisition, because this is not specific enough to determine whether the asset was acquired during the marriage or after the date of separation.
---
template: gross_fair_market_value
subject: "**Gross Fair Market Value**"
content: |
  The current value you estimate an asset is worth. 
  
  If you don't know an asset's worth, do some research online for the same or similar assets and look for the price at which they are currently selling.
  
  When you list the current gross fair market value, please note that you must list the current value of the items (*think, how much could I get for this at a garage sale or on Craigslist?*), NOT the value that you purchased the item at or how much it would cost to replace it.
---
template: amount_of_debt
subject: "**Amount of Debt**"
content: |
  How much money is still owed on the purchase of an asset.
  
  For example, if you bought a car for $11,000, but have a remaining loan of $4,000, you would write $4,000 under *Amout of Debt*.
---
template: missing_files_explanation
subject: "What if I can't upload the requested files right now?"
content: |
  Please note that if you cannot upload copies of each requested document at this time, this interview will generate instructions listing all of the documents that you must attach to your FL-160 (Property Division) forms before filing your paperwork with the court. These instructions will appear alongside the PDFs of your completed court forms at the end of the interview.
---
template: property_type
subject: "**As a Reminder:** Property Types"
content: |
  **What is Community Property?** 
  
  Any property acquired between your date of marriage and date of separation is presumed to be community property (unless such property qualifies as separate property under the law), and belongs to both you and ${resp}. Community property also includes separate property that is changed to community property after marriage in compliance with the law (*read [California Family Code Section 852](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=852.&lawCode=FAM) on transmutation*). 
  
  **What is Separate Property?**
  
  Separate property refers to all property acquired (1) by you or ${resp} before your date of marriage; (2) after your date of separation; (3) by gift or inheritance at any time; (4) between your date of marriage and date of separation and acquired with separate property; or (5) that is initially acquired as community property but subsequently changed separate property in compliance with the law. 
  
  For more information, please click the following links to navigate to the California Family Code's definitions of: 
  
  - [Separate Property](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=770.); 
  - [Community Property](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=760.); and
  - [Quasi-Community Property](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?lawCode=FAM&sectionNum=125.).  
  
  We recommend that you to read California [Family Code Sections 760-853](https://leginfo.legislature.ca.gov/faces/codes_displayexpandedbranch.xhtml?lawCode=FAM&division=4.&title=&part=2.&chapter=1.&article=&goUp=Y) regarding Characterization of Marital Property, and also [California Family Code Section 70](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=70.&lawCode=FAM) which defines “date of separation.” 
---
question: |
  **Your and ${resp.name.first}'s Assets:** Real Estate
subquestion: |
  If applicable, on the following pages, please fill in the requested information regarding each property that you and/or ${resp} own. Do NOT include any properties that you are renting. Examples of real estate include, but are not limited to: homes, condos, and raw land.    
fields: 
  - Do you and/or ${resp} own any real estate?: realestate.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Real Estate
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** real estate property.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Property Address: realestate[i].name.text
  - Date Acquired: realestate[i].date
  - Gross Fair Market Value: realestate[i].value
    datatype: currency
  - Amount of Debt: realestate[i].debt
    datatype: currency
    
  - Property type: realestate[i].property_type
    choices: 
      - Community Property: community
      - Quasi-Community Property: quasi_community
      - ${pet.name.first}'s Separate Property: pet_separate
      - ${resp.name.first}'s Separate Property: resp_separate 
  - note: "${collapse_template(property_type)}"
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
  - Deed: realestate[i].deed
    datatype: file
    required: false
  - Latest mortgage statement: realestate[i].mortgage_statement_current
    datatype: file
    required: false
  - Mortgage statement from your date of separation: realestate[i].mortgage_statement_dos
    datatype: file
    required: false
  - Statements (current and date of separation) for any other loans you may have taken out on the property, such as a home equity line of credit or second mortgage: realestate[i].mortgage_loan_statements
    datatype: files
    required: false
    
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} own any other real estate properties?: realestate.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Household Furniture, Furnishings, Appliances
subquestion: |
  In this section, you do not need to itemize and list every single piece of furniture in your home. First, make sure you list any items that are your or ${resp}'s separate property. Then, think about and list any particularly valuable items. Next, think room by room and try to group your furniture into sets (for example, "TV set," "Dining room set," or "Master bedroom set."  
fields:
  - Do you and/or ${resp} own any Household Furniture, Furnishings, Appliances?: furniture.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Household Furniture, Furnishings, Appliances
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** valuable piece or set of household furniture, furnishings, or appliances.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Item/Set: furniture[i].name.text
  - Date Acquired: furniture[i].date
  - Gross Fair Market Value: furniture[i].value
    datatype: currency
  - note: "Remember, when you list an item's gross fair market value, you must list the current value of the items (*think, how much could I get for this at a garage sale or on Craigslist?*), NOT the value at which you purchased the item or the cost of replacing it."
  - Amount of Debt: furniture[i].debt
    datatype: currency
  
  - Property type: furniture[i].property_type
    choices: 
      - Community Property: community
      - Quasi-Community Property: quasi_community
      - ${pet.name.first}'s Separate Property: pet_separate
      - ${resp.name.first}'s Separate Property: resp_separate 
  - note: "${collapse_template(property_type)}"
  
  - Do you and/or ${resp} own any other pieces or sets of household furniture, furnishings, or appliances?: furniture.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Jewelry, Antiques, Art, Coin Collections, etc.
subquestion: |
  If you and/or your ${resp} own these items or other collectibles worth more than $500, list them on the following page. Please note that any items given as gifts (such as engagement rings, wedding rings, or other jewelry) both during and outside of the marriage should be the separate property of the recipient (the person to whom they were given).
fields:
  - People generally own these types of personal items at a nominal value. Do you and/or ${resp} own any jewelry, antiques, art collections, or other collectibles worth more than $500?: collectibles.there_are_any
    datatype: yesnoradio
    label above field: true
  - Check here if you do own these types of personal items at a nominal value (i.e. you have these items but they're worth less than $500): jewelry_nominal_value 
    datatype: yesnowide
    show if: 
      variable: collectibles.there_are_any
      is: false
---
question: |
  **Your and ${resp.name.first}'s Assets:** Jewelry, Antiques, Art, Coin Collections, etc.
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** piece/set of jewelry, antiques, art, coin collections, or other collectibles.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Item/Set: collectibles[i].name.text
  - Date Acquired: collectibles[i].date
  - Gross Fair Market Value: collectibles[i].value
    datatype: currency
  - Amount of Debt: collectibles[i].debt
    datatype: currency
  
  - Property type: collectibles[i].property_type
    choices: 
      - Community Property: community
      - Quasi-Community Property: quasi_community
      - ${pet.name.first}'s Separate Property: pet_separate
      - ${resp.name.first}'s Separate Property: resp_separate 
  - note: "${collapse_template(property_type)}"
  
  - Do you and/or ${resp} own any other pieces or sets of jewelry, antiques, art, coin collections, or other collectibles?: collectibles.there_is_another
    datatype: yesnoradio
---
question: |
  **Property Division, Assets:** Vehicles, Boats, Trailers
subquestion: |
  If you and/or ${resp} own any vehicles (such as cars), boats, or trailers, please list them on the following page alongside their year, make, model, license plate number (*if applicable*), and who has possession of the vehicle. You will need to attach copies of any title documents or statements (both current and from your date of separation) for any loans/amounts owed on the vehicle. 
fields:  
  - Do you and/or ${resp} own any vehicles, boats, or trailers?: vehicles.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Vehicles, Boats, Trailers
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** vehicle, boat, or trailer.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Fill in the year, make, model, license plate number, and who has possession of the vehicle: vehicles[i].name.text
    help: |
      For example: 2017 Toyota Camry LE #123ABC (Currently driven by ${resp})
  - Date Acquired: vehicles[i].date
  - Gross Fair Market Value: vehicles[i].value
    datatype: currency
  - Amount of Debt: vehicles[i].debt
    datatype: currency
    
  - Property type: vehicles[i].property_type
    choices: 
      - Community Property: community
      - Quasi-Community Property: quasi_community
      - ${pet.name.first}'s Separate Property: pet_separate
      - ${resp.name.first}'s Separate Property: resp_separate 
  - note: "${collapse_template(property_type)}"
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
  - Title: vehicles[i].title
    datatype: file
    required: false
  - If applicable, latest car loan statement: vehicles[i].carloan_statement_current
    datatype: file
    required: false
  - If applicable, car loan statement from your date of separation: vehicles[i].carloan_statement_dos
    datatype: file
    required: false 
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} own any other vehicles, boats, or trailers?: vehicles.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Savings Accounts
subquestion: |
  If you and/or ${resp} have any savings accounts, you'll need to list all accounts, whether held jointly or separately. Make sure to indicate if there is a joint account which only one party (you or ${resp}) has been using since your date of separation. For each account, you'll need to attach a current statement and a statement from your date of separation. 
fields: 
  - Do you and/or ${resp} have any savings accounts?: savingsaccounts.there_are_any
    datatype: yesnoradio
---
question: |
  **Property Division, Assets:** Savings Accounts
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** savings account.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Account Number (last 4 digits) and Financial Institution's Name: savingsaccounts[i].name.text
    help: |
      For example: Chase (#1234), used solely by ${pet} since Date of Separation
  - Date Acquired: savingsaccounts[i].date
  - Gross Fair Market Value: savingsaccounts[i].value
    datatype: currency
  - Amount of Debt: savingsaccounts[i].debt
    datatype: currency
  
  - Property type: savingsaccounts[i].property_type
    choices: 
      - Community Property: community
      - Quasi-Community Property: quasi_community
      - ${pet.name.first}'s Separate Property: pet_separate
      - ${resp.name.first}'s Separate Property: resp_separate 
  - note: "${collapse_template(property_type)}"
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
  - Latest statement: savingsaccounts[i].statement_current
    datatype: file
    required: false
  - Statement from your date of separation: savingsaccounts[i].statement_dos
    datatype: file
    required: false 
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any other savings accounts?: savingsaccounts.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Checking Accounts
subquestion: |
  If you and/or ${resp} have any checking accounts, you'll need to list all accounts, whether held jointly or separately. Make sure to indicate if there is a joint account which only one party (you or ${resp}) has been using since your date of separation. For each account, you'll need to attach a current statement and a statement from your date of separation. 
fields: 
  - Do you and/or ${resp} have any checking accounts?: checkingaccounts.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Checking Accounts
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** checking account.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Account Number (last 4 digits) and Financial Institution's Name: checkingaccounts[i].name.text
    help: |
      For example: Chase (#1234), used solely by ${pet} since Date of Separation
  - Date Acquired: checkingaccounts[i].date
  - Gross Fair Market Value: checkingaccounts[i].value
    datatype: currency
  - Amount of Debt: checkingaccounts[i].debt
    datatype: currency
  
  - Property type: checkingaccounts[i].property_type
    choices: 
      - Community Property: community
      - Quasi-Community Property: quasi_community
      - ${pet.name.first}'s Separate Property: pet_separate
      - ${resp.name.first}'s Separate Property: resp_separate 
  - note: "${collapse_template(property_type)}"
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
  - Latest statement: checkingaccounts[i].statement_current
    datatype: file
    required: false
  - Statement from your date of separation: checkingaccounts[i].statement_dos
    datatype: file
    required: false 
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any other checking accounts?: checkingaccounts.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Credit Union, Other Depository Accounts
subquestion: |
  If you and/or ${resp} have any credit union or other depository accounts, you'll need to list all accounts, whether held jointly or separately. Make sure to indicate if there is a joint account which only one party (you or ${resp}) has been using since your date of separation. For each account, you'll need to attach a current statement and a statement from your date of separation. 
fields: 
  - Do you and/or ${resp} have any credit union or ther depository accounts?: creditunion.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Credit Union, Other Depository Accounts
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** credit union or other depository account.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Account Number (last 4 digits) and Financial Institution's Name: creditunion[i].name.text
    help: |
      For example: Chase (#1234), used solely by ${pet} since Date of Separation
  - Date Acquired: creditunion[i].date
  - Gross Fair Market Value: creditunion[i].value
    datatype: currency
  - Amount of Debt: creditunion[i].debt
    datatype: currency
    
	- Property type: creditunion[i].property_type
    choices: 
      - Community Property: community
      - Quasi-Community Property: quasi_community
      - ${pet.name.first}'s Separate Property: pet_separate
      - ${resp.name.first}'s Separate Property: resp_separate 
  - note: "${collapse_template(property_type)}"
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Latest statement: creditunion[i].statement_current
	  datatype: file
    required: false
	- Statement from your date of separation: creditunion[i].statement_dos
    datatype: file
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any other credit union or ther depository accounts?: creditunion.there_is_another
    datatype: yesnoradio
  
---
question: |
  **Your and ${resp.name.first}'s Assets:** Cash
subquestion: |
  Generally, people only carry or have a nominal amount of cash. However, if there is a large sum of cash in a safe deposit box or other location, please list each amount and location on the following page. 
fields:
  - Do you and/or ${resp} have one or more sums of cash worth more than $500?: cash.there_are_any
    datatype: yesnoradio
    label above field: true
  - Check here if you or ${resp} do have cash, but at a nominal value (i.e. you have less than $500 in cash): cash_nominal_value 
    datatype: yesnowide
    show if: 
      variable: cash.there_are_any
      is: false
---
question: |
  **Your and ${resp.name.first}'s Assets:** Cash
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** sum of cash worth more than $500.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Amount and Location: cash[i].name.text
    help: |
      For example: $2,000 in BoA Safe Deposit Box 
  - Date Acquired: cash[i].date
  - Amount: cash[i].value
    datatype: currency
    
	- If applicable, upload copies of any documents demonstrating the amount and/or location of the cash: cash[i].statement_current
	  datatype: file
    required: false
    
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any more sums of cash worth more than $500?: cash.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Tax Refund
subquestion: |
  If there is a dispute between you and ${resp} over how a tax refund should be allocated, please write the details on the following page.
fields: 
  - Are you and/or ${resp} currently owed one or more tax refunds?: taxrefund.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Tax Refund
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** tax refund.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Fill in the tax refund's fiscal year and whether or not there is a dispute over how it should be allocated: taxrefund[i].name.text
    help: |
      For example: 2019 Tax Refund 
  - Date Acquired: taxrefund[i].date
  - Amount to be refunded: taxrefund[i].value
    datatype: currency
    
  - If there is a dispute over how a tax refund should be allocated, write the details here: taxrefund[i].file
    input type: area
  
  - Do you and/or ${resp} have any more tax refunds?: taxrefund.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Life Insurance Policy with Cash Surrender or Loan Value 
subquestion: |
  If you or ${resp} holds a life insurance policy with a cash-out value (this generally only applies to whole life policies), please list each policy on the next page and attach a copy of each policy's declaration page and most recent policy statement. Include any term policies, making sure to indicate that they are term policies.
fields: 
  - Do you and/or ${resp} have any life insurance policies with cash surrender or loan value?: lifeinsurance.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Life Insurance with Cash Surrender or Loan Value
subquestion: |
  Tell us about your and/or ${resp}'s **${ordinal(i)}** life insurance policy with cash surrender or loan value.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Institution Name and Policy Number (last 4 digits): lifeinsurance[i].name.text 
  - Date Acquired: lifeinsurance[i].date
  - Gross Fair Market Value: lifeinsurance[i].value
    datatype: currency
  - Amount of Debt: lifeinsurance[i].debt
    datatype: currency
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Policy declaration page: lifeinsurance[i].policy_declaration_page
    datatype: file
    required: false
  - Latest policy statement: lifeinsurance[i].statement_current
	  datatype: file
    required: false
    
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any more life insurance policies with cash surrender or loan value?: lifeinsurance.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Stocks, Bonds, Secured Notes, Mutual Funds
subquestion: |
  If you and/or ${resp} hold any brokerage or investment accounts (*for example, Schwab, Edward Jones, Wachovia, etc.*), please list each account on the next page. You will also need to attach current and date of separation statements for each account. Do not include 401(k)s or IRAs here, as you'll be asked about these in the following pages. 
fields: 
  - Do you and/or ${resp} have any brokerage or investment accounts?: brokerageaccounts.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Stocks, Bonds, Secured Notes, Mutual Funds
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** brokerage or investment account.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Institution Name and Account Number (last 4 digits): brokerageaccounts[i].name.text 
  - Date Acquired: brokerageaccounts[i].date
  - Gross Fair Market Value: brokerageaccounts[i].value
    datatype: currency
  - Amount of Debt: brokerageaccounts[i].debt
    datatype: currency
    
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Latest statement: brokerageaccounts[i].statement_current
	  datatype: file
    required: false
	- Statement from your date of separation: brokerageaccounts[i].statement_dos
    datatype: file
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any more brokerage or investment accounts?: brokerageaccounts.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Retirement and Pensions
subquestion: |
  If you and/or ${resp} have any retirement plans, whether defined-contribution plans, such as company-administered 401(k)s, or defined-benefit plans, such as CalPERS, STRA, or private entity pensions, please list them on the next page. You'll also need to attach summary plan documents, current statements, and date of separation statements, as well as indicate when you started and ended credited service in any employer sponsored plan.
fields: 
  - Do you and/or ${resp} have any retirement plans (not including IRAs), whether defined-contribution plans or defined-benefit plans?: retirementplans.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Retirement and Pensions
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** retirement plan (not including IRAs).
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Fill in the plan type, institution name (*if applicable*), plan number (last 4 digits), and the dates you started and ended credited service in any employer sponsored plan (*if applicable*): retirementplans[i].name.text 
    help: |
      For example: 401(k) Plan (#1234), Employer Credited Service from 1/1/2017 to 4/5/2021
  - Date Acquired: retirementplans[i].date
  - Gross Fair Market Value: retirementplans[i].value
    datatype: currency
  - Amount of Debt: retirementplans[i].debt
    datatype: currency
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Summary plan documents: retirementplans[i].summary_plan_documents
    datatype: files
    required: false
  - Latest statement: retirementplans[i].statement_current
	  datatype: file
    required: false
	- Statement from your date of separation: retirementplans[i].statement_dos
    datatype: file
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any more retirement plans (not including IRAs), whether defined-contribution plans or defined-benefit plans?: retirementplans.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Profit-Sharing, IRAs, Deferred Compensation, Annuities
subquesion: |
  If you and/or ${resp} have any profit-sharing, IRA, or Defferred Comensation Plans or Annuities, please list them on the next page. You'll also need to attach current and date of separation statements. Make sure to indicate if you began contributing to any such plan prior to your mariage.
fields: 
  - Do you and/or ${resp} have any profit-sharing, IRA, or Deferred Compensation Plans or Annuities?: profitsharingplans.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Profit-Sharing, IRAs, Deferred Compensation, Annuities
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** profit-sharing, IRA, deferred compensation plan or annuity.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Fill in the plan type, institution name, and plan number (last 4 digits): profitsharingplans[i].name.text 
    help: |
      For example: Transamerican Roth IRA (#1234)
  - Date Acquired: profitsharingplans[i].date
  - Gross Fair Market Value: profitsharingplans[i].value
    datatype: currency
  - Amount of Debt: profitsharingplans[i].debt
    datatype: currency
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Latest statement: profitsharingplans[i].statement_current
	  datatype: file
    required: false
	- Statement from your date of separation: profitsharingplans[i].statement_dos
    datatype: file
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} have any more profit-sharing, IRA, or Deferred Compensation Plans or Annuities?: profitsharingplans.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Accounts Receivable, Unsecured Notes
subquestion: |
  If you and/or ${resp} have any accounts receivable, unsecured notes, or other money owed to you by third parties, please list information about each on the next page. This most commonly includes receivables related to businesses you or ${resp} operate, or promissory notes for money loaned by you or ${resp} to a third party. You'll also need to attach copies of any applicable documents, e.g., promissory note, IOU, letter/email/text by the third party stating he/she owes you the money.
fields: 
  - Do you and/or ${resp} have any accounts receivable, unsecured notes, or other money owed to you by third parties?: moneyowed.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Accounts Receivable, Unsecured Notes
subquestion: |
  Tell us about the **${ordinal(i)}** unsecured note, account receivable, or third-party debt owed to you and/or ${resp}.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Description: moneyowed[i].name.text 
  - Date Acquired: moneyowed[i].date
  - Amount owed to you and/or ${resp}: moneyowed[i].value
    datatype: currency
  
  - Upload any applicable documents (for example, apromissory note, IOU, letter/text/email, etc.) by the third party stating he or she owes you the money: moneyowed[i].applicable_documents
    datatype: files
    required: false

  - note: "${collapse_template(missing_files_explanation)}"
  
  - Are there any more unsecured notes, account receivables, or third-party debts owed to you and/or ${resp}: moneyowed.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Partnerships, Other Business Interests
subquestion: |
  If you and/or ${resp} own any businesses, partially or fully, please list them on the next page. You'll also need to attach copies of the partnership/business agreement between you and your partners/other interest holders, as well as your most recent K-1 and Schedule C forms from the last 3 years. If you maintain profit and loss statements, please include the most recent yearly, quarterly and monthly reports. 
fields: 
  - Do you and/or ${resp} own any businesses, whether partially or fully?: businesses.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Partnerships, Other Business Interests
subquestion: |
  Tell us about the **${ordinal(i)}** business that you and/or ${resp} own.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Business Name: businesses[i].name.text 
  - Date Acquired: businesses[i].date
  - Gross Fair Market Value: businesses[i].value
    datatype: currency
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Partnership/business agreement between you and your partners/other interest holders: businesses[i].partnership_documents
	  datatype: files
    required: false
	- Most recent K-1 and Schedule-C forms (last 3 years): businesses[i].k1_and_schedulec
    datatype: files
    required: false
  - Profit and loss statements (if maintained) : businesses[i].pandl
	  datatype: files
    required: false
	- Most recent yearly, quarterly, and/or monthly reports (if maintained): businesses[i].reports
    datatype: files
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you and/or ${resp} own any other businesses: businesses.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Other Assets
subquestion: |
  If you and/or ${resp} own any other assets that do not fit into any of the previous categories, please list them on the next page.
fields: 
  - Do you and/or ${resp} own any other assets that do not fit into any of the previous categories?: otherassets.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Assets:** Other Assets
subquestion: |
  Tell us about the **${ordinal(i)}** other asset.
right: |
  **As a reminder:**
  
  ${collapse_template(date_acquired)}  
  ${collapse_template(gross_fair_market_value)}  
  ${collapse_template(amount_of_debt)}
fields: 
  - Description: otherassets[i].name.text 
  - Date Acquired: otherassets[i].date
  - Gross Fair Market Value: otherassets[i].value
    datatype: currency
  
  - If possible, upload any applicable documents (for example, statements, valuations, etc.) demonstrating this asset's value and amount of debt: otherassets[i].applicable_documents
    datatype: files
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Are you and/or ${resp} own any other assets that don't fit into any of the previous categories?: otherassets.there_is_another
    datatype: yesnoradio
#### end of assets question blocks
---
#### start of debts question blocks
template: to_whom_owed
subject: "**To Whom Owed**"
content: |
  Identify the third party (person or institution) to whom the debt is owed.
---
template: date_incurred
subject: "**Date Incurred**"
content: |
  Write the date that you and/or ${resp.name.first} incurred the debt. If you do not know the exact date, you can list a month and year or write "before marriage," "during marriage," or "after separation." However, make sure that whatever you list makes it clear whether or not the debt should be considered separate or community property in line with state definitions.  
---
question: |
  **Your and ${resp.name.first}'s Debts**
subquestion: |
  On the following pages, you will be asked to list and categorize each of your debts, including the following information about each: 
  
  **To whom owed:** 
  
  Identify the third party (person or institution) to whom the debt is owed. Be sure to attach documents, if any exist, that establish the existence of the debt and how much is owed.  
  
  **Date incurred:** 
  
  Write the date that you and/or ${resp} incurred the debt. If you do not know the exact date, you can list a month and year or write "before marriage," "during marriage," or "after separation." However, make sure that whatever you list makes it clear whether or not the debt should be considered separate or community property in line with state definitions.   
continue button field: propertydivision_info4
---
question: |
  **Your and ${resp.name.first}'s Debts:** Student Loans
subquestion: |
  If you or ${resp} have any outstanding student loans (student loans that you haven't paid off yet), please list them on the next page. You'll also need to attach current and date of separation statements. Please note that student loans are an exception to the community vs. separate property rule, as student loans taken out at any point, even during the marriage, are considered the debtor's separate property.
fields: 
  - Do you or ${resp} have any student loans?: studentloans.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Student Loans
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** student loan.
right: |
  **As a reminder:**
  
  ${collapse_template(to_whom_owed)}
  ${collapse_template(date_incurred)}
fields: 
  - To Whom Owed: studentloans[i].name.text
  - Date Incurred: studentloans[i].date
  - Total Owed: studentloans[i].amount
    datatype: currency
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Latest statement: studentloans[i].statement_current
	  datatype: file
    required: false
	- Statement from your date of separation: studentloans[i].statement_dos
    datatype: file
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you or ${resp} have any other student loans: studentloans.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Taxes
subquestion: |
  If you or ${resp} have any outstanding taxes (taxes that you still owe), whether local, state, or federal, please list them on the next page.
fields: 
  - Do you or ${resp} have any outstanding taxes?: taxes.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Taxes
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** tax debt.
right: |
  **As a reminder:**
  
  ${collapse_template(to_whom_owed)}
  ${collapse_template(date_incurred)}
fields: 
  - To Whom Owed: taxes[i].name.text
  - Date Incurred: taxes[i].date
  - Total Owed: taxes[i].amount
    datatype: currency
  
  - If possible, upload any documents that provide information on any outstanding taxes, whether state, federal, or local: taxes[i].applicable_documents
    datatype: files
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you or ${resp} have any other tax debts?: taxes.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Support Arrearages
subquestion: |
  If you or ${resp} owe any past-due child or spousal support payments (aka arrearages), whether court-ordered or informal, please list them on the next page.
fields: 
  - Do you or ${resp} owe any past-due child or spousal support payments?: arrearages.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Support Arrearages
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** arrearage (past-due support payment).
right: |
  **As a reminder:**
  
  ${collapse_template(to_whom_owed)}
  ${collapse_template(date_incurred)}
fields: 
  - To Whom Owed: arrearages[i].name.text
  - Date Incurred: arrearages[i].date
  - Total Owed: arrearages[i].amount
    datatype: currency
  
  - If possible, upload any documents (such as a wage garnishment orincome withholding order) that provide information on any past-due child support or spousal support obligations/payments for court-ordered or informal support: arrearages[i].applicable_documents
    datatype: files
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you or ${resp} owe any other arrearages (past-due support payments)?: arrearages.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Unsecured Loans
subquestion: |
  If you and/or ${resp} have taken out any unsecured loans, please list them on the next page (*do not list car loans or home mortgages here, but rather in their sections on previous pages*). You'll also need to attach copies of loan documents, and current and date of separation statements.
  
  These types of loans are typically made on a personal basis, such as a loan from a friend or family member or by a financial institution.   
fields: 
  - Do you or ${resp} owe unsecured loans?: unsecuredloans.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Unsecured Loans
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** unsecured loan.
right: |
  **As a reminder:**
  
  ${collapse_template(to_whom_owed)}
  ${collapse_template(date_incurred)}
fields: 
  - To Whom Owed: unsecuredloans[i].name.text
  - Date Incurred: unsecuredloans[i].date
  - Total Owed: unsecuredloans[i].amount
    datatype: currency
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Applicable loan documents: unsecuredloans[i].amount
    datatype: files
    required: false
  - Latest statement: unsecuredloans[i].statement_current
	  datatype: file
    required: false
	- Statement from your date of separation: unsecuredloans[i].statement_dos
    datatype: file
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you or ${resp} owe any other unsecured loans?: unsecuredloans.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Credit Cards
subquestion: |
  If you and/or ${resp} have any credit card debts, please list them on the next page. 
fields: 
  - Do you or ${resp} owe any credit card debts?: creditcards.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Credit Cards
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** credit card debt.
right: |
  **As a reminder:**
  
  ${collapse_template(to_whom_owed)}
  ${collapse_template(date_incurred)}
fields: 
  - To Whom Owed: creditcards[i].name.text
  - Date Incurred: creditcards[i].date
  - Total Owed: creditcards[i].amount
    datatype: currency
  
  - note: "**Upload copies of each applicable document below** (*If possible*)" 
	- Latest statement: creditcards[i].statement_current
	  datatype: file
    required: false
	- Statement from your date of separation: creditcards[i].statement_dos
    datatype: file
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you or ${resp} owe any other credit card debts?: creditcards.there_is_another
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Other Debts
subquestion: |
  If you and/or ${resp} have any other debts that don't fit into any of the previous categories, please list them on the next page 
fields: 
  - Do you or ${resp} owe any other debts?: otherdebts.there_are_any
    datatype: yesnoradio
---
question: |
  **Your and ${resp.name.first}'s Debts:** Credit Cards
subquestion: |
  Tell us about your or ${resp}'s **${ordinal(i)}** other debt.
right: |
  **As a reminder:**
  
  ${collapse_template(to_whom_owed)}
  ${collapse_template(date_incurred)}
fields: 
  - To Whom Owed: otherdebts[i].name.text
  - Date Incurred: otherdebts[i].date
  - Total Owed: otherdebts[i].amount
    datatype: currency
  
  - If possible, upload any applicable documents (such as current and date of separation statements) demonstrating the amount and ownership of the debt: otherdebts[i].applicable_documents
    datatype: files
    required: false
  
  - note: "${collapse_template(missing_files_explanation)}"
  
  - Do you or ${resp} owe any other additional debts?: otherdebts.there_is_another
    datatype: yesnoradio
### end of debts question blocks
---
question: |
  **Requesting *Temporary* Orders:** Property Control
subquestion: |
  Property division orders will not go into effect until a judge finalizes your divorce. California law states that the **earliest** you can be divorced is 6 months and 1 day from one of the following three dates (whichever occurs first):
  
  - (1) The date ${resp.name.first} was served with (given) your Petition and Summons;
  - (2) The date ${resp.name.first}'s Response was filed; or
  - (3) The date the Appearance, Stipulations, and Waivers was filed (in uncontested divorce cases)
  
  **BUT divorce cases can take much longer.** That said, you may request two types of temporary property control orders in the meantime: 
  
  - (1) You may request that the court give you and/or ${resp.name.first} exclusive temporary use, possession, and/or control of property (such as real estate, vehicles, etc.); and
  - (2) You may request that the court order you and/or ${resp.name.first} to make payments on debts and liens due while the order is in effect
  
  If granted, these orders will go into effect temporarily until your divorce is finalized. 
fields:
  - Would you like to request a temporary property control or debt/lien payment order?: propertycontrol_requesting_temporary_orders
    datatype: yesnoradio
    label above field: true
---
question: |
  **Requesting *Temporary* Orders:** Property Control
fields:
  - note: "**Property Control**"
  
  - Would you like to ask the court to award exclusive temporary use, possession, and/or control of certain property to yourself or another party in this case?: propertycontrol_property
    datatype: yesnoradio
    
  - Specify the property over which you are requesting a party be given exclusive temporary use, possession, and/or control. For each piece of property, specify the name of the party to whom you'd like exclusive use to be awarded: propertycontrol_property_specify
    input type: area
    label above field: true
    show if: propertycontrol_property
    help: "List the name of the person to which you'd like a piece of property awarded, followed by the name or description of that piece of property"
    
  - Who did you award property to in the question above? (Select all that apply): propertycontrol_property_to
    datatype: multiselect
    choices:
      code: parties
    help: "To make multiple selections, hold down the Shift, Ctrl (Control) or Command key on your keyboard and click each item you'd like to select."
    show if: propertycontrol_property
        
  - Do you own or are buying this property, or do you lease or rent this property?: propertycontrol_property_ownership
    datatype: multiselect
    choices:
      - Own or are buying: propertycontrol_property_ownership_own
      - Lease or rent: propertycontrol_property_ownership_lease
    help: |
      To make multiple selections, hold down the Shift, Ctrl (Control) or Command key on your keyboard and click each item you'd like to select.
    show if: propertycontrol_property

  - note: "**Debt and/or Lien Payment**"
  
  - Would you like to request that the court order one or more parties in your case to make payments on any debts and/or liens coming until your divorce is finalized?: debtsandliens.there_are_any 
    datatype: yesnoradio
---
question: |
  **Requesting *Temporary* Orders:** Property Control, Debts and Liens
subquestion: |
  Tell us about the **${ordinal(i)}** debt or lien.
fields: 
  - Pay to: debtsandliens[i].pay_to
  - For: debtsandliens[i].name.text
  - Amount: debtsandliens[i].amount
    datatype: currency
  - Due Date: debtsandliens[i].due 
  - Who would you like to be responsible for paying this debt?: debtsandliens[i].debtor
    choices: 
      code: parties 
  - Are there any other debts or liens for which you would like the court to order payment until your divorce is finalized?: debtsandliens.there_is_another
    datatype: yesnoradio
---
question: |
  **Requesting *Ex Parte (Temporary Emergency)* Orders:** Property Control
subquestion: |
  Sometimes, if a person can show that there is a risk of immediate loss or damage to property subject to disposition in the case if the court does not do something that day or within a few days, he or she can ask the court to make temporary custody orders on an emergency basis.

  These emergency orders are also called “ex parte orders,” and they will only be in place for a short time. After making emergency orders, the court will schedule a regular hearing to consider whether the orders should be extended beyond the temporary period. The ${resp} must be told about that later hearing, and he or she has the right to be at that hearing.

  It is extremely hard to get temporary orders. You must prove to the court that it must make orders to help revent the immediate loss or damage to property 
  
fields: 
  - Do you need temporary emergency property control orders to prevent the immediate loss or damage to property?: propertycontrol_requesting_exparte_orders
    datatype: yesnoradio
    label above field: true
---
question: |
  **Requesting *Temporary* Orders:** Property Control, Debts and Liens
fields:
  - In your own words, please explain why the court should grant your requested property control and/or debt payment orders: explain_propertycontrol
    input type: area
    label above field: true
#### end of property division question blocks
---
code: |
  parties.clear()
  parties.append(pet)
  parties.append(resp)
  if children.there_are_any:
    if any(child.otherparent_exists for child in children): 
      parties.append(other)
  parties.gathered = True
---
code: |
  otherparties.clear()
  otherparties.append(resp)
  if children.there_are_any:
    if any(child.otherparent_exists for child in children): 
      otherparties.append(other)
  otherparties.gathered = True
---
question: |
  **Requesting *Temporary* Orders:** Restraining Orders
subquestion: |
    Are there any domestic violence restraining orders or protective orders currently in effect between you and any of the parties in this case?
fields:
  - no label: prior_restrainingorders
    datatype: yesnoradio
  - note: "Check each type of restraining order currently in effect"
    show if: prior_restrainingorders
  - Criminal: prior_restrainingorders_criminal
    datatype: yesnowide
    show if: prior_restrainingorders
  - This restraining order is between you and ___?: prior_restrainingorders_criminal_party
    choices: 
      code: otherparties
    show if: prior_restrainingorders_criminal
  - County and State: prior_restrainingorders_criminal_county
    show if: prior_restrainingorders_criminal
  - Case Number (if known): prior_restrainingorders_criminal_casenumber
    required: false
    show if: prior_restrainingorders_criminal
  - Family (aka Domestic Violence Restraining Order): prior_restrainingorders_family
    datatype: yesnowide
    show if: prior_restrainingorders
  - This restraining order is between you and ___?: prior_restrainingorders_family_party
    choices: 
      code: otherparties
    show if: prior_restrainingorders_family
  - Order Date: prior_restrainingorders_family_date
    datatype: ThreePartsDate
    show if: prior_restrainingorders_family
  - County and State: prior_restrainingorders_family_county
    show if: prior_restrainingorders_family
  - Case Number (if known): prior_restrainingorders_family_casenumber
    required: false
    show if: prior_restrainingorders_family
  - Would you like to request to change this domestic violence restraining order (DVRO)?: prior_restrainingorders_family_change
    datatype: yesnoradio
    show if: prior_restrainingorders_family
  - Would you like to request to end this DVRO?: prior_restrainingorders_family_end
    datatype: yesnoradio
    show if: 
      variable: prior_restrainingorders_family_change
      is: false
  - Specify the changes you would like to court to make regarding this DVRO: prior_restrainingorders_family_change_specify
    datatype: area
    show if: prior_restrainingorders_family_change
  - Explain why you want the court to change or end these orders: prior_restrainingorders_family_change_specify
    datatype: area
    show if: prior_restrainingorders_family_change
  - Explain why you want the court to change or end these orders: prior_restrainingorders_family_end_specify
    datatype: area
    show if: prior_restrainingorders_family_end
  - Are there any other requests you would like to make regarding this restraining order?: prior_restrainingorders_family_other
    datatype: yesnoradio
    show if: prior_restrainingorders_family
  - Please specify: prior_restrainingorders_family_other_specify
    datatype: area
    show if: prior_restrainingorders_family_other
  - Juvenile: prior_restrainingorders_juvenile
    datatype: yesnowide
    show if: prior_restrainingorders
  - This restraining order is between you and ____?: prior_restrainingorders_juvenile_party
    choices: 
      code: otherparties
    show if: prior_restrainingorders_juvenile
  - County and State: prior_restrainingorders_juvenile_county
    show if: prior_restrainingorders_juvenile
  - Case Number (if known): prior_restrainingorders_juvenile_casenumber
    required: false
    show if: prior_restrainingorders_juvenile
  - Other: prior_restrainingorders_other
    datatype: yesnowide
    show if: prior_restrainingorders
  - This restraining order is between you and ____?: prior_restrainingorders_other_party
    choices: 
      code: otherparties
    show if: prior_restrainingorders_other
  - County and State: prior_restrainingorders_other_county
    show if: prior_restrainingorders_other
  - Case Number (if known): prior_restrainingorders_other_casenumber
    required: false
    show if: prior_restrainingorders_other 
---
question: |
  **Requesting Temporary Orders:** Time for Service 
subquestion: |
  Sometimes, if you can prove to the court that there is an immediate risk of harm to you or your children, or if you can prove that there is an immediate risk of damage to or loss of your property, you can request: 
  
  - (1) That the hearing date and service of the Request for Order (aka RFO, which is your request for temporary orders in this case) be sooner; or
  - (2) That the other party is served with (given) the RFO after the typical service deadline (*the deadline to serve the other party with your RFO is 16 court days prior to the hearing, if personally served, or 16 court days plus 5 calendar days prior to the hearing, if served by mail*)
fields: 
  - Would you like to request that your hearing date and service of your RFO be sooner?: timeforservice_hearing
    datatype: yesnoradio
  - Would you like to ask the court to be able to serve the other party after the typical service deadline?: timeforservice_service
    datatype: yesnoradio
  - Specify the number of court days before the hearing by which you must serve the RFO: timeforservice_service_days
    datatype: integer
    min: 1
    max: 15
    show if: timeforservice_service
  - In your own words, please explain why you need the court to order a different time for service or hearing date: timeforservice_specify
    input type: area
    required: false
---
question: |
  **Requesting Temporary Orders:** Other Ex Parte Orders
fields:
  - Are there any additional temporary emergency orders that you would like to request at this time?: other_exparte_orders
    datatype: yesnoradio
  - Please specify: other_exparte_orders_specify
    input type: area
    show if: other_exparte_orders
---
template: ss_factstosupport_explanation
subject: What facts should I use to support my request for temporary **spousal support orders**?
content: |
  As a reminder, this section asks you to explain why the court should order what you requested. If there's already a support order and you want the amount changed, explain what changed since the judge made the last order. Write down the facts, not just opinions, that support what you’re telling the court. 
  
  For example, if you are requesting support, add up your monthly expenses and how much money you make each month. Write how much more money you need each month to pay your expenses.
---
template: cs_factstosupport_explanation
subject: What facts should I use to support my request for temporary **child support orders**?
content: |
  As a reminder, this section asks you to explain why the court should order what you requested. Write down the facts, not just opinions, that support what you’re telling the court.  

  For example, tell the court if things have changed since the last order for support, like you lost your job, are making less money, or are spending more time with the children.  

  If there is a document that supports what you say (like a letter from your job), attach that to your request. Black out any private information like a Social Security number or account numbers.  
---
question: |
  **Requesting Temporary Orders:** Facts to Support 
subquestion: |
  In a California divorce case, you must provide a written declaration explaining why the court should grant your requests for any of the following temporary orders: 
  
  - Temporary Child Custody and Visitation Orders; 
    - *Including Temporary Emergency (Ex Parte) Orders*
  - Temporary Child Support Orders;
  - Temporary Spousal/Domestic Partner Support Orders;
  - Temporary Property Control or Debt Payment Orders; 
    - *Including Temporary Emergency (Ex Parte) Orders;*
  - Attorney's Fees and Costs Orders; and/or
  - Requests to Modify or End a Domestic Violence Restraining Order
right: |
  ${collapse_template(cs_factstosupport_explanation)}
  ${collapse_template(ss_factstosupport_explanation)}
fields: 
  - In your own words, please explain and summarize the facts supporting each of the temporary orders you are requesting. Please note that these facts to support cannot exceed 10 pages unless the court grants you permission: facts_to_support
    input type: area
    rows: 20
    label above field: true
---
#### Start of income and expense question blocks 
question: |
  Your Income and Expense Information
subquestion: |
  **Your Employment Information**
fields: 
  - Are you currently employed?: currently_employed
    datatype: yesnoradio
    label above field: true
  - Do you currently receive public assistance?: public_assistance
    datatype: yesnoradio
    label above field: true
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Employment Information**
fields: 
  - Have you ever been employed?: has_not_been_employed
    datatype: noyesradio
    label above field: true
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Employment Information**
fields: 
  - note: |
      Fill in information about your current job or, if you're currently unemployed, your most recent job.
  - Employer: pet.employer
  - Employer's Address: pet.employer_address
  - Employer's Phone Number: pet.employer_phone_number
    required: false
  - Occupation/Job Title: pet.occupation
  - Date Job Started (if you don't know an exact date, give your best estimate): pet.job_start_date
    datatype: ThreePartsDate
  - If you're currently unemployed, when did your last job end? (if you don't know an exact date, give your best estimate): pet.job_end_date
    datatype: ThreePartsDate
    required: false
  - How many hours do you typically work in a week?: pet.weekly_hours_worked
    datatype: integer
  - note: |
      What is your gross income? 
  - In other words, what is your pay before taxes are taken out?: pet.gross_income
    datatype: currency
  - Per: pet.gross_income_payperiod
    choices:
      - month: pet.gross_income_monthly
      - week: pet.gross_income_weekly
      - hour: pet.gross_income_hourly
     
  - Do you have a second job?: pet.has_second_job
    datatype: yesnoradio
    
  - note: 
      "Fill in the following information about your second job"
    show if: pet.has_second_job
  - Employer: pet.employer_2nd
    show if: pet.has_second_job
  - Employer's Address: pet.employer_address_2nd
    show if: pet.has_second_job
  - Employer's Phone Number: pet.employer_phone_number_2nd
    required: false
    show if: pet.has_second_job
  - Occupation/Job Title: pet.occupation_2nd
    show if: pet.has_second_job
  - Date Job Started (if you don't know an exact date, give your best estimate): pet.job_start_date_2nd
    datatype: ThreePartsDate
    show if: pet.has_second_job
  - How many hours do you typically work in a week?: pet.weekly_hours_worked_2nd
    datatype: integer
    show if: pet.has_second_job
  - note: 
      "What is your gross income?"
    show if: pet.has_second_job
  - In other words, what is your pay before taxes are taken out?: pet.gross_income_2nd
    datatype: currency
    show if: pet.has_second_job
  - Per: pet.gross_income_payperiod_2nd
    choices:
      - month: pet.gross_income_monthly_2nd
      - week: pet.gross_income_weekly_2nd
      - hour: pet.gross_income_hourly_2nd
    show if: pet.has_second_job
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Education Information**
fields: 
  - Have you completed high school or the equivalent?: pet.education_highschool
    datatype: yesnoradio
  - What was the highest grade you completed?: pet.education_highest_grade_completed
    datatype: integer
    min: 0
    max: 11
    show if: 
      variable: pet.education_highschool
      is: False
  - Did you attend college?: attended_college
    datatype: yesnoradio
  - How many years of college have you completed?: pet.education_college
    datatype: integer
    min: 1
    max: 5
    show if: attended_college
  - Did you obtain any degrees?: pet.education_college_degrees
    datatype: yesnoradio
    show if: attended_college
  - Degrees obtained: pet.education_college_degrees_specify
    show if: pet.education_college_degrees
  - Did you attend graduate school?: attended_graduate_school
    datatype: yesnoradio
  - How many years of graduate school have you completed?: pet.education_graduate_school
    datatype: integer
    min: 1
    max: 8
    show if: attended_graduate_school
  - Did you obtain any graduate degrees?: pet.education_graduate_school_degrees
    datatype: yesnoradio
    show if: attended_graduate_school
  - Graduate Degrees Obtained: pet.education_graduate_school_degrees_specify
    show if: pet.education_graduate_school_degrees
  - Do you have any professinal or occupational licenses?: pet.has_professional_licenses
    datatype: yesnoradio
  - Please specify: pet.has_professional_licenses_specify
    show if: pet.has_professional_licenses
  - Do you have any vocational training?: pet.has_vocational_training
    datatype: yesnoradio
    help: |
      Vocational training refers to instructional programs or courses that focus on the skills required for a particular job function or trade. In vocational training, education prepares students for specific careers, disregarding traditional, unrelated academic subjects. Students typically require vocational training to prepare for trades including, but not limited to: Automotive repair, Plumbing, Culinary arts, Graphic design, Fashion design, and Welding.
  - Please specify: pet.has_vocational_training_specify
    show if: pet.has_vocational_training
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Tax Information**
fields: 
  - In which tax year did you last file taxes?: taxes_last_filing_year
  - What is your tax filing status: tax_filing_status
    choices:
      - single: tax_filing_status_single
      - head of household: tax_filing_status_head_of_household
      - married, filing separately: tax_filing_status_married_filing_separately
      - married, filing jointly: tax_filing_status_married_filing_jointly
  - Do you file your taxes in California?: tax_filed_in_ca
    datatype: yesnoradio
  - In which state did you last file your taxes?: tax_filed_in_state
    show if:
      variable: tax_filed_in_ca
      is: False
  - How many exemptions do you claim on your taxes?: tax_exemptions
    datatype: integer
    help: |
      The number of tax exemptions you claim depends on your situation. For example, a single filer with no children would likely claim a maximum of 1 tax exemption, while a married couple with one source of income would likely file a joint return with 2 tax exemptions. You can also claim your children as dependents if you support them financially and they’re not past the age of 19. Children attending college can be claimed until the age of 24. For instance, a married couple with one source of income and two minor children would likely file a joint tax return with 4 tax exemptions. 
  - Upload a copy of your most recent tax filing: tax_filing_file
    datatype: file
    required: false
---
question: |
  Income and Expense Information
subquestion: |
  **${ resp }'s Income**
fields: 
  - What is ${ resp }'s gross monthly income? In other words, what is ${ resp }'s monthly pay before taxes are taken out? If you don't know, please give your best estimate: resp.gross_monthly_income
    datatype: currency
    label above field: true
  - What is this estimate based on? In other words, why do you think ${ resp } is paid this monthly amount?: resp.gross_monthly_income_explanation 
    maxlength: 66
    label above field: true
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Income from Self-Employment**
fields:
  - Are you self-employed?: self_employed
    datatype: yesnoradio 
    label above field: true
  - You are the ___ of the business (*choose one*): self_employed_position
    choices: 
      - Owner/Sole Prioprietor: self_employed_owner
      - Business Partner: self_employed_business_partner
      - Other: self_employed_other
    show if: self_employed
  - If you selected 'Other' above, specify: self_employed_other_specify
    required: false
    show if: self_employed
  - How many years have you been in this business?: self_employed_years
    datatype: integer
    show if: self_employed
  - Business Name: self_employed_business_name
    show if: self_employed
  - What type of business is it?: self_employed_business_type
    show if: self_employed
  - What was your gross income from this self-employment, after business expenses, last month?: self_employed_lm
    datatype: currency
    show if: self_employed
  - What was your gross income from this self-employment, after business expenses, over the last year (i.e. over the last 12 months)?: self_employed_ly
    datatype: currency
    show if: self_employed
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Additional Income**
fields: 
  - Have you received one-time money (lottery winnings, inheritance, etc.) in the last 12 months?: additional_income
    datatype: yesnoradio
    label above field: true
  - Specify the **source** and **amount** of this additional income: additional_income_specify
    maxlength: 70
    show if: additional_income
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Change in Income**
fields: 
  - Has your financial situation changed significantly over the last 12 months (*for example, because you got a job, were laid off, had a child, etc.*): change_in_income
    datatype: yesnoradio
    label above field: true
  - Briefly explain this change in income: change_in_income_specify
    maxlength: 70
    show if: change_in_income
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Deductions**
fields: 
  - note: |
      For each type of deduction below, please fill in the amount **deducted from your monthly income**. Write '0' for any deductions that do not apply.  
  - Required union dues: union_dues
    datatype: currency
  - Required retirement payments (not Social Security, FICA, 401(k) or IRA): required_retirement_payments
    datatype: currency
  - Medical, hospital, dental, and other health insurance premiums (*  total monthly amount*): medical_premiums
    datatype: currency
  - Child support (*that you pay*): child_support_deductions
    datatype: currency
  - Spousal support (*that you pay*): spousal_support_deductions
    datatype: currency
  - Partner support (*that you pay*): partner_support_deductions
    datatype: currency
  - Necessary, job-related expenses not reimbursed by my employer: job_related_expenses
    datatype: currency 
  - Specify the type of necessary, job-related expenses, if applicable: job_related_expenses_specify
    required: false
---
template: realproperty_explanation
subject: "What is **Real Property**?"
content: |
  Real property is real estate. Some common examples include: 
  
    - The family home
    - Rental properties (that you OWN)
    - Investment properties
    - Commercial properties
    - Raw land
    - Timeshares
---
template: personalproperty_explanation
subject: "What is **Personal Property**?"
content: |
  Personal property is defined as all property except real property (see definition above).
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Assets**
right: |
  ${collapse_template(realproperty_explanation)}
  ${collapse_template(personalproperty_explanation)}
fields: 
  - What is the total monetary amount of your cash, checking accounts, savings, credit union, money market, and any other deposit accounts you have? Provide your best estimate: assets_cash_and_deposit_accounts
    datatype: currency
    label above field: true
  - What is the total monetary value of any and all stocks, bonds, and other assets you could easily sell? If none, write '0': assets_stocks_and_bonds
    datatype: currency
    label above field: true
  - note: "**Real Property**"
  - note: "What is the total monetary value of your real property?"
  - Estimate the fair market value (how much you could reasonably sell your assets for, minus any debts you owe): assets_real_property
    datatype: currency
    label above field: true
  - note: "**Personal Property**"
  - note: "What is the total monetary value of your personal property?" 
  - Estimate the fair market value (how much you could reasonably sell your assets for, minus any debts you owe): assets_personal_property
    datatype: currency
    label above field: true
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Household Members:** Do you live with anyone else? 
under: |
  % if married:
  *This may include your spouse, roommates, romantic partners, family members such as children and parents, etc.*
  % elif domestic_partners and not married:
  *This may include your domestic partner, roommates, romantic partners, family members such as children and parents, etc.*
  % endif
yesno: householdmembers.there_are_any  
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Household Members:** Not including yourself, how many people live in your household? 
under: |
  *This may include your spouse or partner, roommates, family members such as children and elderly parents, etc.* 
fields: 
  - no label: householdmembers.target_number
    datatype: integer
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Household Members:** Tell us about your **${ordinal(i)}** household member.
fields: 
  - First name: householdmembers[i].name.first
  - Middle name: householdmembers[i].name.middle
    required: false
  - Last name: householdmembers[i].name.last
  - Age: householdmembers[i].age
    datatype: integer
  - How is this person related to you? (*i.e. this person is my ____*): householdmembers[i].relationship
  - What is this person's gross monthly income? Include any public assistance received, if applicable. If this household member does not have an income, you may write '0': householdmembers[i].income
    datatype: currency 
  - Does this household member pay some of the household expenses? (*This may include helping pay for rent, food, bills, childcare costs, etc.*): householdmembers[i].pays_expenses
    datatype: yesnoradio
---
template: expensesinstructions_explanation
subject: |
  **INSTRUCTIONS** 
content: |  
  * Fill in the **average monthly** amounts that you spend on each of the following expenses. If you do not spend any money on a particular expense, you may write '0'. 
  
  * Make sure that the amounts listed are that of your **whole household** and not just your own. You will fill in the amount of expenses paid by others on the following pages.
  
  * If you only make certain purchases a few times a year, total the amount you would typically spend in a year and divide it by 12 to get an average monthly amount. For example:
      - *If you spend $120 on school supplies every fall for your child, divide that by 12 to get an average monthly expense of $10.* 
  
  
  * Make sure you account for all of your household's expenses. Consider these examples: 
      - *Do you pay to park your car in a lot or garage?*
      - *Do you donate to charity or church?* 
      - *Do you pay for any sports your children play?*
       
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Average Monthly Household Expenses**
pre: |
  Read these instructions **before** answering the questions below:
  ${collapse_template(expensesinstructions_explanation)}
fields: 
  - Indicate whether the monthly household expense amounts you will be listing below are estimated, actual, or based on your proposed needs (i.e., you expect these to be your expenses each month): expenses_type
    label above field: true
    choices:
      - Estimated: expenses_estimated
      - Actual: expenses_actual
      - Proposed needs: expenses_proposedneeds
  - Do you have a mortgage?: has_mortgage
    datatype: yesnoradio
  - Monthly mortgage payment: mortgage_payment
    datatype: currency
    show if: has_mortgage
  - Average principal: mortgage_principal
    datatype: currency
    show if: has_mortgage
  - Average interest: mortgage_interest
    datatype: currency
    show if: has_mortgage
  - Real property taxes: real_property_taxes
    datatype: currency
    show if: has_mortgage
  - Homeowner's insurance: homeowners_insurance 
    datatype: currency
    show if: has_mortgage
  - Maintenance and Repair: maintenance_and_repair 
    datatype: currency
    show if: has_mortgage
  - Rent payment: rent_payment
    datatype: currency
    show if: 
      variable: has_mortgage
      is: false
  - Renter's insurance: renters_insurance
    datatype: currency
    show if: 
      variable: has_mortgage
      is: false
  - Maintenance and repair: maintenance_and_repair
    datatype: currency
    show if: 
      variable: has_mortgage
      is: false
  - Utilities (gas, electric, water, trash, etc.): utilities
    datatype: currency
  - Healthcare costs not covered by insurance: healthcare_costs
    datatype: currency 
  - Child Care: childcare
    datatype: currency
  - Groceries and household supplies: groceries_and_supplies
    datatype: currency
  - Eating out: eating_out
    datatype: currency
  - Telephone, cell phone, and internet: telephone
    datatype: currency
  - Laundry and cleaning: laundry_and_cleaning
    datatype: currency
  - Clothes: clothes
    datatype: currency
  - Education: education
    datatype: currency
  - Entertainment, gifts, and vacation: entertainment
    datatype: currency
  - Auto expenses and transportation (gas, repairs, bus, etc.): auto_expenses
    datatype: currency
  - Auto insurance: auto_insurance
    datatype: currency 
  - Insurance (life, accident, etc.; do not include auto, home, or health insurance): insurance_expenses
    datatype: currency
  - Savings and investments: savings_and_investments
    datatype: currency
  - Charitable contributions: charitable_contributions
    datatype: currency
  - Child, spousal support you pay (from another marriage or domestic partnership): support_expenses
    datatype: currency
  - Wage garnishment: wage_garnishment
    datatype: currency
  - Other: other_household_expenses
    datatype: currency
  - Specify the "Other" expense above, if applicable: other_household_expenses_specify
    required: false
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Average Monthly Household Expenses:** Installment Payments and Debts 
  
  Do you have any installment payments and/or debts that you pay each month that you did not list on the prior page? 
under: |
  *These can be monthly payments like credit card bills, gym memberships, streaming service subscriptions, student loans, etc.*
yesno: installmentpaymentsanddebts.there_are_any
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Average Monthly Household Expenses:** Installment Payments and Debts
  
  Tell us about your **${ordinal(i)}** installment payment or debt.
fields: 
  - For: installmentpaymentsanddebts[i].name.text
  - Paid to: installmentpaymentsanddebts[i].paid_to
  - Amount (*if monthly payments vary, write the average amount*): installmentpaymentsanddebts[i].amount
    datatype: currency 
  - Balance remaining and/or Typical balance: installmentpaymentsanddebts[i].balance
    datatype: currency 
  - Date of last payment: installmentpaymentsanddebts[i].date
    datatype: ThreePartsDate
---
question: |
  Your Income and Expense Information
subquestion: |
  **Your Average Monthly Household Expenses:** Installment Payments and Debts 
  
  Do you have any more installment payments and/or debts?
yesno: installmentpaymentsanddebts.there_is_another
---
question: |
  **Your Deduction and Expense Information**
fields: 
  - Do you have any other monthly expenses that you did not list on the prior pages?: othermonthlyexpenses.there_are_any
    datatype: yesnoradio
    label above field: True
  - How many additional payments do you make each month? (You may include up to 3): othermonthlyexpenses.target_number
    datatype: integer
    max: 3
    show if: othermonthlyexpenses.there_are_any
---
question: |
  **Your Deduction and Expense Information**
subquestion: |
  Tell us about your **${ordinal(i)}** additional monthly expense.
fields:
  - Paid to: othermonthlyexpenses[i].name.text
    maxlength: 7 
  - Monthly Amount: othermonthlyexpenses[i].amount
    datatype: currency
---
question: |
  **Requesting Orders:** Child Support
subquestion: |
  Fill out the following information about your children and their related expenses.
fields: 
  - note: |
      **Parenting Arrangement**
  - What percent of time do your children spend with you (versus ${ otherparent })? *For example, if the children spend all of their time with you, and no time with ${otherparent}, you would fill in 100*: percent_time_with_pet
    datatype: integer
    min: 0
    max: 100
    required: false
  - If you're not sure about the percentage, or it has not been agreed on, please describe your parenting schedule here: parenting_schedule_summary
    input type: area
    maxlength: 380
    required: false 
  - note: |
      **Children's health-care expenses**
  - Do you have health insurance available to you for the children through your job?: health_insurance_through_job
    datatype: yesnoradio
  - Name of insurance company: insurance_company
    show if: health_insurance_through_job
  - Address of insurance company: insurance_company_address
    input type: area 
    show if: health_insurance_through_job
  - The monthly cost for the children's health insurance is or would be: health_insurance_cost
    datatype: currency
  - note: |
      **Additional expenses for children in this case**
  - Do you pay for childcare so you can work or get job training?: childcare_for_work
    datatype: yesnoradio
  - Monthly cost: childcare_for_work_amount
    datatype: currency 
    show if: childcare_for_work
    
  - Monthly cost of children's health care not covered by insurance: childrens_healthcare
    datatype: currency 
    
  - Monthly cost of travel expenses for visitation (if applicable): travel_expenses
    datatype: currency
    required: false
    
  - Monthly cost of children's educational or other special needs: childrens_educational_or_specialneeds_expenses
    datatype: currency 
    
  - If you wrote an amount (greater than $0) for "Children's educational or other special needs" above, please specify the child or children's needs: childrens_educational_or_specialneeds_expenses_specify
    maxlength: 75
    required: false
  - note: |
      **Special hardships:** Fill in information about any of the following special financial circumstances you're experiencing that you would like the court to consider in its determination of child support.
  - Do you have any extraordinary health expenses?: extraordinary_health_expenses
    datatype: yesnoradio 
  - Amount per month: extraordinary_health_expenses_amount
    datatype: currency 
    show if: extraordinary_health_expenses
  - For how many months?: extraordinary_health_expenses_months
    datatype: integer
    show if: extraordinary_health_expenses
  
  - Have you had any major losses not covered by insurance (*examples include fire, theft, other insured loss, etc.*): major_losses
    datatype: yesnoradio 
  - Amount per month: major_losses_amount
    datatype: currency 
    show if: major_losses
  - For how many months?: major_losses_months
    datatype: integer
    show if: major_losses
  
  - Do you have any expenses from minor children from other relationships who are currently living with you? (if applicable): other_children_expenses
    datatype: yesnoradio 
  - Amount per month: other_children_expenses_amount
    datatype: currency 
    show if: other_children_expenses
  - For how many months?: other_children_expenses_months
    datatype: integer
    show if: other_children_expenses
  - List the names and ages of those children: other_children_expenses_names_and_ages
    input type: area
    maxlength: 235
    show if: other_children_expenses
  - Do you receive child support for these children?: other_children_expenses_childsupport
    datatype: yesnoradio
    show if: other_children_expenses
  - Monthly amount: other_children_expenses_childsupport_amount
    datatype: currency
    show if: other_children_expenses_childsupport
  
  - Do you believe any of the above expenses create an extreme financial hardship?: extreme_financial_hardship
    datatype: yesnoradio
  - Explain why the above expenses create an extreme financial hardship for you: extreme_financial_hardship_explanation
    input type: area
    maxlength: 330
    show if: extreme_financial_hardship
  - Check here if you need more space: extreme_financial_hardship_explanation_ms
    datatype: yesno
    show if: extreme_financial_hardship
  - Please continue writing why the above expenses create an extreme financial hardship for you in the space below: extreme_financial_hardship_explanation_attachment
    input type: area
    show if: extreme_financial_hardship_explanation_ms
    label above field: true
    
  - If there is any other information you want the court to know concerning child support in your case, please write it below: other_information_concerning_childsupport
    input type: area
    required: false
    maxlength: 238
    label above field: true
  - Check here if you need more space: other_information_concerning_childsupport_ms
    datatype: yesno
  - Continue writing the additional information you want the court to know in the space below: other_information_concerning_childsupport_attachment
    datatype: area
    label above field: true
    show if: other_information_concerning_childsupport_ms
#### end of child support question blocks
---
#### start of attorneys fees question blocks
template: attorneys_fees_vs_costs_explanation
subject: "**What are Attorney's Fees vs. Costs?**"
content: |  
  Simply put, attorney's **fees** refer to the money you pay to a lawyer for their time working on your case. If you hire your lawyer on an hourly basis, then the attorneys’ fees would be the hourly rate your lawyer charges.
  
  Attorney's **costs**, on the other hand, are all of the out-of-pocket expenses your lawyer pays to handle your case. For example, when you file for divorce in California, the court wants you to pay a filing fee of $435 ($450 in San Fransisco County) for each party (you and ${resp.name.first}) that appears in the action. Costs are also incurred for taking depositions (where you must hire a court reporter to record the deposition), making copies of documents, hiring expert witnesses, any bill paid to an outside party is a cost of your case.
---
template: attorneys_fees_law_explanation
subject: "**Applicable Law**"
content: |
  [Family Code 2030](https://leginfo.legislature.ca.gov/faces/codes_displaySection.xhtml?sectionNum=2030.&lawCode=FAM), regarding the award of attorney's fees and costs, states the following: 
  
  "(a)(1). *In a proceeding for dissolution of marriage, nullity of marriage, or legal separation of the parties, and in any proceeding subsequent to entry of a related judgment, the court shall ensure that each party has access to legal representation, including access early in the proceedings, to preserve each party’s rights by ordering, if necessary based on the income and needs assessments, one party, except a governmental entity, to pay to the other party, or to the other party’s attorney, whatever amount is reasonably necessary for attorney’s fees and for the cost of maintaining or defending the proceeding during the pendency of the proceeding...*"
  
  "(a)(2) *...A party who lacks the financial ability to hire an attorney may request, as an in pro per litigant, that the court order the other party, if that other party has the financial ability, to pay a reasonable amount to allow the unrepresented party to retain an attorney in a timely manner before proceedings in the matter go forward.*"
  
  % if married:
  **Translation:** In a California divorce case, the court can, and may, order one spouse to pay for the other's attorney's fees and costs if it can be reasonably demonstrated (and the couple's financial circumstances are permitting) that such an order is necessary to uphold one spouse's right to access legal representation.
  % elif domestic_partners and not married:
  **Translation:** In a California divorce case, the court can, and may, order one domestic partner to pay for the other's attorney's fees and costs if it can be reasonably demonstrated (and the couple's financial circumstances are permitting) that such an order is necessary to uphold one domestic partner's right to access legal representation.
  % endif
---
question: |
  **Requesting Orders:** Attorney's Fees and Costs
subquestion: |
  **An Introduction to Attorney's Fees and Costs**
  
  There are several types of situations in which a judge can order one side to pay the other's lawyer's fees. In divorces, a spouse or domestic partner can make that request in court from the very beginning of the case. The purpose of an order for attorney’s fees is not to punish one side or reward the other, but to even the playing field so both sides can have access to a lawyer. 
  
  % if married:
  You do not have to have a lawyer at the time that you ask the court to order your spouse pay your attorney's fees. The judge can order one side to pay a reasonable amount to hire a lawyer as early as possible before the case goes forward. In other words, even as a self-representing litigant (i.e. a party that represents themselves in court rather than having an attorney to do so) using U Do It Legal, you are entitled to request attorney's fees from ${resp} to cover the cost of an attorney (but note that ${resp.name.first} can do the same). 
  % elif domestic_partners and not married:
  You do not have to have a lawyer at the time that you ask the court to order your domestic partner pay your attorney's fees. The judge can order one side to pay a reasonable amount to hire a lawyer as early as possible before the case goes forward. In other words, even as a self-representing litigant (i.e. a party that represents themselves in court rather than having an attorney to do so) using U Do It Legal, you are entitled to request attorney's fees from ${resp} to cover the cost of an attorney (but note that ${resp.name.first} can do the same).
  % endif
  
  ${collapse_template(attorneys_fees_law_explanation)}   
  ${collapse_template(attorneys_fees_vs_costs_explanation)}
continue button field: attorneysfees_info1
---
question: |
  **Requesting Orders:** Attorney's Fees
subquestion: |
  **What does the Court have to consider when deciding whether to order attorney's fees and costs?**
  
  Family Code Section 2032: 

  (a) The court may make an award of attorney’s fees and costs under Section 2030 or 2031 where the making of the award, and the amount of the award, are just and reasonable under the relative circumstances of the respective parties.

  (b) In determining what is just and reasonable under the relative circumstances, the court shall take into consideration the need for the award to enable each party, to the extent practical, to have sufficient financial resources to present the party’s case adequately, taking into consideration, to the extent relevant, the circumstances of the respective parties described in Section 4320. The fact that the party requesting an award of attorney’s fees and costs has resources from which the party could pay the party’s own attorney’s fees and costs is not itself a bar to an order that the other party pay part or all of the fees and costs requested. Financial resources are only one factor for the court to consider in determining how to apportion the overall cost of the litigation equitably between the parties under their relative circumstances.

  (c) The court may order payment of an award of attorney’s fees and costs from any type of property, whether community or separate, principal or income."
  
  **Translation:** Family Code Section 2032 outlines what the court must consider in making (or refusing) an attorney fee request. Generally speaking, there are four basic themes that govern whether you are entitled to receive or be required to pay attorney fees: 
  
  - (1) The ability of each party to pay for an attorney, as well as each party's ability to pay for the other's attorney's fees (through their income and/or assets); 
  - (2) The relative financial needs of each party (i.e. how much money each party needs to sustain his or her basic needs and general quality of life); 
  - (3) The relative disparity of access to funds (i.e. any imbalance in both parties’ access to money to hire a lawyer); and 
  
  Although it is less common, please note that when deciding requests for attorney's fees, the judge may also consider any conduct, by either party, that justifies awarding attorney fees to sanction bad behavior.
  
  In all cases, the relative financial circumstances of the parties must be evaluated. This includes looking at what assets each party controls, as well as their respective incomes. Even if you have enough money to pay for an attorney, you are not necessarily required to use or exhaust your resources if circumstances like the relative net worth or income streams of each of you justify a contribution from the other.

continue button field: attorneysfees_info2
---
question: |
  **Requesting Orders:** Attorney's Fees
subquestion: |
  If you choose to request attorney's fees, please make sure that at each of the following circumstances apply to your current situation: 
  
  - You need to have enough money for attorney's fees and costs in order to present your case adequately;
  - You have less money or limited access to funds to retain or maintain an attorney compared to ${resp}, who I am requesting pay my attorney's fees and costs; and
  - The other side has or is reasonably likely to have the ability to pay for both your and his or her attorney's fees and costs
fields:
  - Would you like to request an order for attorney's fees and costs?: requesting_attorneysfees
    datatype: yesnoradio
---
question: |
  **Requesting Orders:** Attorney's Fees
subquestion: |
  On the next page, you'll need to provide estimates (or exact quotes) for the amount of attorney's fees and costs you'll need covered in your case. Before proceeding, please conduct some research, either online or by contacting law firms in your area, to more accurately understand the cost of hiring a lawyer for your specific case (*as costs can vary greatly from person to person, depending on their unique needs and circumstances*). When requesting attorney's fees, you must provide the court with sufficient information about the following factors:
  
  - (1) The attorney's hourly billing rate;
  - (2) The nature of the litigation, its difficulty, and the skill required and employed in handling the litigation;
  - (3) The amount of any fees and costs incurred until now; the amount of anticipated attorney's fees and costs; and why the fees and costs are just, necessary, and reasonable;
  - (4) The attorney's experience in the particular type of work demanded; and 
  - (5) If it is a [limited scope fee arrangement](https://www.courts.ca.gov/1085.htm?rdeLocaleAttr=en), the scope of representation.

  Continue once you are ready to provide the court with sufficient information about the 5 factors listed above." 
continue button field: attorneysfees_understands_cost
---
template: attorneys_fees_factors_explanation
subject: "**Factors that Determine Attorney's Fees and Costs**"
content: |
  When requesting attorney's fees, you must provide the court with sufficient information about the following factors:
  
  - (1) The attorney's hourly billing rate;
  - (2) The nature of the litigation, its difficulty, and the skill required and employed in handling the litigation;
  - (3) The amount of any fees and costs incurred until now; the amount of anticipated attorney's fees and costs; and why the fees and costs are just, necessary, and reasonable;
  - (4) The attorney's experience in the particular type of work demanded; and 
  - (5) If it is a [limited scope fee arrangement](https://www.courts.ca.gov/1085.htm?rdeLocaleAttr=en), the scope of representation.
---
question: |
  **Requesting Orders:** Attorney's Fees
subquestion: |
  From whom are you requesting payment for attorney's fees and costs?
fields:
  - Are you requesting payment for your attorney's fees and costs from ${resp}?: attorneys_fees_party_resp
    datatype: yesnoradio
  - note: "Please note that you may only request payment of your attorney's fees and costs from a party in this case."
    show if: 
      variable: attorneys_fees_party_resp
      is: false
  - From whom are you requesting payment for your attorney's fees and costs? (*Full name*): attorneys_fees_party_other
    show if: 
      variable: attorneys_fees_party_resp
      is: false
  - Describe the reasons why the non-spouse or domestic partner party you've indicated is involved in the case and why he or she should pay attorney's fees and costs.: attorneysfees_factstosupport_other
    label above field: true
    input type: area
    show if: 
      variable: attorneys_fees_party_resp
      is: false
---
code: |
  if not attorneys_fees_party_resp:
    paysattorneysfees.name.text = attorneys_fees_party_other
  else: 
    paysattorneysfees.name.text = resp.name
---
question: |
  **Requesting Orders:** Attorney's Fees
subquestion: |
  In order to make it's determination of whether to award attorney's fees and costs, the court needs to know about any other support orders or prior attorney's fees ordered **in this case**.
  
  If you haven't filed (submitted) any paperwork with the court on your divorce, select 'No' for each of the questions below.
fields: 
  - note: "**Current Child Support Orders**"
  - Has an order already been made for payment of child support in this case?: currentcsorder
    datatype: yesnoradio
    help: "Do not select 'Yes' if the child support orders are between you and a prior spouse or parent who is **not** a party to this case."
  - Was ${resp} ordered to make these child support payments?: currentcsorder_party_resp
    datatype: yesnoradio
    show if: currentcsorder
  - This order has been in effect since: currentcsorder_date
    datatype: ThreePartsDate
    show if: currentcsorder
  - Fill in the monthly payment amount ordered: currentcsorder_amount
    datatype: currency
    show if: currentcsorder
  - The payments (*Select one*): currentcsorder_payments
    choices:
      - Have been made: currentcsorder_paymentsmade
      - Have not been made: currentcsorder_paymentsnotmade
      - Have been made in part: currentcsorder_paymentinpart
    show if: currentcsorder
  - Is there any additional information about this child support order that you would like the court to consider in its determination of attorney's fees?: currentcsorder_additionalinfo
    datatype: yesnoradio
    show if: currentcsorder
  - Please explain: currentcsorder_additionalinfo_specify
    input type: area
    show if: currentcsorder_additionalinfo

  - note: "**Current Spousal or Domestic Partner Support Order**"
  - Has an order already been made for payment of spousal or domestic partner support in this case?: currentssorder
    datatype: yesnoradio
    help: "Do not select 'Yes' if the spousal or domestic partner support orders are between you and a prior spouse or domestic partner who is **not** a party to this case."
  - This support order has been in effect since: currentssorder_date
    datatype: ThreePartsDate
    show if: currentssorder
  - Fill in the monthly payment amount ordered: currentssorder_amount
    datatype: currency
    show if: currentssorder
  - What type of support was ordered?: currentssorder_type
    choices: 
      - Spousal Support: currentssorder_type_spousal
      - Partner Support: currentssorder_type_partner
      - Family Support: currentssorder_type_family
    show if: currentssorder
  - The payments (*Select one*): currentssorder_payments
    choices:
      - Have been made: prior_ss_paymentsmade
      - Have not been made: prior_ss_paymentsnotmade
      - Have been made in part: prior_ss_paymentinpart
    show if: currentssorder
  - Is there any additional information about this support order that you would like the court to consider in its determination of attorney's fees?: currentssorder_additionalinfo
    datatype: yesnoradio
    show if: currentssorder
  - Please explain: currentssorder_additionalinfo_specify
    input type: area
    show if: currentssorder_additionalinfo
  
  - note: "**Attorneys Fees**"
  
  - note: "**Prior Orders for Attorney's Fees and Costs**"
  - Have attorney's fees and costs been ordered in this case before?: prior_attorneysfees
    datatype: yesnoradio
  - On what date did this order go into effect?: prior_attorneysfees_date
    datatype: ThreePartsDate
    show if: prior_attorneysfees
  - Was ${resp} ordered to pay your attorney's fees and costs?: prior_attorneysfees_resp
    datatype: yesnoradio
    show if: prior_attorneysfees
  - Fill in the payment amount ordered: prior_attorneysfees_amount
    datatype: currency
    show if: prior_attorneysfees
  - If known, please describe the sources of payment: prior_attorneysfees_paymentsources
    input type: area
    required: false
    show if: prior_attorneysfees
  - The payments (*Select one*): prior_attorneysfees_payments
    choices:
      - Have been made: prior_attorneysfees_paymentsmade
      - Have not been made: prior_attorneysfees_paymentsnotmade
      - Have been made in part: prior_attorneysfees_paymentinpart
    show if: prior_attorneysfees
  - Is there any additional information about this prior order that you would like the court to consider in its determination of your new request for attorney's fees?: prior_attorneysfees_additionalinfo
    datatype: yesnoradio
    show if: prior_attorneysfees
  - Please explain: prior_attorneysfees_additionalinfo_specify
    input type: area
    show if: prior_attorneysfees_additionalinfo
---
question: |
  **Requesting Orders:** Attorney's Fees and Costs
right: |
  **As a reminder:**
  
  ${collapse_template(attorneys_fees_factors_explanation)}
fields:
  - note: "The requested amount of attorney's fees and costs include: (*Check all that apply*)"
  - A fee to hire an attorney in a timely matter before the divorce proceedings go forward: fees_before_proceeding
    datatype: yesnowide
  - In the amount of: fees_before_proceeding_amount
    datatype: currency
    show if: fees_before_proceeding
  - Attorney's fees and costs incurred from the beginning of representation until now (i.e. any fees or costs you've previously paid for a lawyer in this case): fees_from_beginning_to_now
    datatype: yesnowide
  - In the amount of: fees_from_beginning_to_now_amount
    datatype: currency
    show if: fees_from_beginning_to_now
  - Estimated attorney's fees and costs: fees_estimated
    datatype: yesnowide
  - In the amount of: fees_estimated_amount
    datatype: currency
    show if: fees_estimated
  - Attorney's fees and costs for limited scope representation: fees_limited_scope_representation
    datatype: yesnowide
  - In the amount of: fees_limited_scope_representation_amount
    datatype: currency
    show if: fees_limited_scope_representation
  
  - note: "**Total Attorney's Fees and Costs Requested**"
  - Total amount of **fees** requested: attorneysfees_fees_amount
    datatype: currency
  - Total amount of **costs** requested: attorneysfees_costs_amount
    datatype: currency
---
question: |
  **Requesting Orders:** Attorney's Fees
fields: 
  - In requesting attorney's fees, you are proposing that ${paysattorneysfees} can afford to pay your attorney's fees and costs in addition to his or her own. Explain the sources from which ${paysattorneysfees} can pay these attorney's fees and costs: payment_sources
    label above field: true
    input type: area
    
  - In your own words, please explain any facts that support why the court should grant your request for attorney's fees.: attorneysfees_factstosupport
    label above field: true
    input type: area
    
  - Are you currently receiving free legal services from an attorney at a nonprofit legal services agency or a volunteer attorney?: receiving_probono_services
    datatype: yesnoradio
#### end of attorney's fees question blocks
---
question: |
  **Requesting Orders:** Other Orders 
fields:
  - Are there any additional orders you would like to request at this time?: other_orders
    datatype: yesnoradio
  - Please specify: other_orders_specify
    datatype: area
    maxlength: 454
    label above field: true
    hide if: 
      variable: other_orders
      is: false
  - Check here if you need more space: other_orders_ms
    datatype: yesno
    hide if: 
      variable: other_orders
      is: false 
  - Please continue writing the additional orders you want to request in the space below: other_orders_attachment
    input type: area
    show if: other_orders_ms
    label above field: true
    help: "Note that since your response is too long to fit in the field in which it would normally be generated, this overflow text instead fill in an attachment to your court forms instead."
---
#### start of fee waiver question blocks
question: |
  **Request to Waive Court Fees**
subquestion: |
  The fee to file a Family Law Petition in California is $435 ($450 in San Fransisco County). 
  
  If you do not have enough income to pay for your household's basic needs *and* the court fees, you may ask the court to do one or more of the following:
  
  - Waive all court fees and costs
  - Waive some of the court fees
  - Let you make payments over time
  
  Please note that although anyone may file a request to waive court fees, there is no guarantee that the Judicial Officer in your case will grant your fee waiver application.
fields: 
  - Would you like to request a fee waiver?: feewaiver
    datatype: yesnoradio
---
question: |
  **Fee Waiver Elligibility** 
subquestion: |
  The following questions will determine whether or not you may qualify to receive a fee waiver.
right: |
  **Acronym Definitions:**
  
  **Supp. Sec. Inc.** = Supplemental Security Income (SSI), a Federal income supplement program that provides cash to aged, blind, and disabled people who have little or no income, to help them meet their basic needs for food, clothing, and shelter.
  
  **SSP** = State Supplementary Payment, the state program which augments SSI.
  
  **IHSS** = In-Home Supportive Services Program, which helps pay for services provided to individuals over 65 years of age, or disabled, or blind, so that they may stay in their own homes.
  
  **CalWORKS** = California Work Opportunity and Responsibility to Kids, a public assistance program that provides cash aid and services to eligible families that have a child or children in the home.
  
  **Tribal TANF** = California Tribal Temporary Assistance for Needy Families Program, an assistance program for American Indians and Alaska Natives which provides cash aid and supportive services to eligible needy children and families.
  
  **CAPI** = Cash Assistance Program for Immigrants, a program that provides monthly cash benefits to aged, blind, and disabled non-citizens who are ineligible for SSI/SSP solely due to their immigrant status.
fields: 
  - note: 
      "If you currently receive any of the following forms of public assistance, you automatically qualify for a fee waiver. **Select each type of public assistance you are currently receiving:**"
  - Food Stamps: food_stamps
    datatype: yesnowide
  - Supplemental Security Income (SSI): SSI
    datatype: yesnowide
  - State Supplementary Payment (SSP): SSP
    datatype: yesnowide
  - Medi-Cal: MediCal
    datatype: yesnowide
  - County Relief/General Assistance: county_relief
    datatype: yesnowide
  - In-Home Supportive Services Program (IHSS): IHSS
    datatype: yesnowide
  - CalWORKS or Tribal TANF: CalWorks
    datatype: yesnowide
  - Cash Assistance Program for Immigrants (CAPI): CAPI
    datatype: yesnowide
---
question: |
  **Your Case Information:** Prior Requests to Waive Court Fees
fields: 
  - Have you asked the court to waive your court fees for this case in the last six months?: prior_feewaiver
    datatype: yesnoradio
    label above field: True
  - Date of previous order: prior_feewaiver_date
    datatype: ThreePartsDate
    show if: prior_feewaiver
  - Do you have a copy of your previous request?: prior_feewaiver_copy
    datatype: yesnoradio
    show if: prior_feewaiver
---
question: |
  **Your Employment Information**
fields:
  - Are you currently employed?: pet.employed
    datatype: yesnoradio
  - Job Title: pet.occupation_title
    hide if: 
      variable: pet.employed 
      is: False
  - Name of Employer: pet.employer_name
    hide if: 
      variable: pet.employed 
      is: False
  - Employer's Address: pet.employer_address2
    hide if: 
      variable: pet.employed 
      is: False
---
question: |
  **Your Sources of Income**
subquestion: |
  Does your income change a lot from month to month?
under: |
  *If it does, complete the next sections based on your average income for the past 12 months*
yesno: monthly_income_changes
---
question: |
  **Your Sources of Income**
subquestion: |
  The next page will ask you to fill in information about your sources of income.
 
  **Income sources include:** 
  
    - Salary
    - Overtime
    - Commissions or bonuses
    - Public assistance (for example: TANF, SSI, GA/GR)
    - Spousal support payments (that you receive)
    - Partner support payments (that you receive)
    - Pension/retirement fund payments
    - Social security retirement (not SSI)
    - Disability (Social security (not SSI), State disability (SDI), or Private insurance)
    - Unemployment compensation
    - Worker's compensation
    - Investment Income, Dividends/interest
    - Investment Income, Rental property income
    - Investment Income, Trust income
    - Other investment income sources
    - Other income sources, such as Military Basic Allowance for Quarters (BAQ), Royalty payments, Veterans payments, etc.
fields:
  - Do you currently receive one or more sources of income?: incomesources.there_are_any
    datatype: yesnoradio
  - How many sources of income do you currently receive?: incomesources.target_number
    datatype: integer
    min: 1
    max: 8
    show if: incomesources.there_are_any
---
question: |
  **Your Sources of Income**
subquestion: |
  Tell us about your **${ordinal(i)}** source of income.  
fields: 
  - Income Source: incomesources[i].name.text
  - Type of Income Source: incomesources[i].type
    choices: 
      - Salary: avg_salary
      - Overtime: avg_overtime
      - Commissions or bonuses: avg_commissions
      - Public assistance: avg_publicassistance
      - Spousal support: avg_ss
      - Partner support: avg_ps
      - Pension/retirement fund payments: avg_pension
      - Social security retirement (not SSI): avg_socialsecurity
      - Disability: avg_disability
      - Unemployment compensation: avg_unemployment
      - Worker's compensation: avg_workerscomp
      - Investment Income, Dividends/interest: avg_dividends
      - Investment Income, Rental property income: avg_rentalprop
      - Investment Income, Trust income: avg_trust
      - Investment Income, Other: avg_otherinvestmentincome
      - Other Income Sources: avg_otherincome
  - Gross amount you made last month: incomesources[i].last_month
    datatype: currency
    help: |
      *Gross amount = The amount you earned before taxes*
  - Gross yearly amount (last 12 months): incomesources[i].annual_amount
    datatype: currency
    help: |
      *Gross yearly amount = The amount you earned in the last year, before taxes*
---
question: |
  **Your Sources of Income**
subquestion: |
  Answer the questions below regarding the sources of income you indicated.
fields:
  - note: "**Spousal Support**"
		show if: 
    	code: |
    		any(item.type == 'avg_ss' for item in incomesources)
  - Was this spousal support ordered prior to January 1, 2019?: spousal_support_prior_tax
    datatype: yesnoradio
    show if: 
    	code: |
    		any(item.type == 'avg_ss' for item in incomesources)

  - note: "**Disability**"
	  show if: 
    	code: |
    		any(item.type == 'avg_disability' for item in incomesources)
  - Indicate which type of disability you receive: disability_type
    choices:
      - Social Security (not SSI): disability_socialsecurity
      - State Disability (SDI): disability_sdi
      - Private Insurance: disability_privateinsurance
    show if: 
    	code: |
    		any(item.type == 'avg_disability' for item in incomesources)
        
  - note: "**Other Investment Income**"
	  show if: 
		  code: |
			  any(item.type == 'avg_otherinvestmentincome' for item in incomesources)    
  - You indicated that you had another source of investment income, please specify the income source and type: otherinvestmentincome_specify
    required: false  
    maxlength: 55
    show if: 
    	code: |
    		any(item.type == 'avg_otherinvestmentincome' for item in incomesources)

  - note: "**Other Income**"
	  show if: 
		  code: |
			  any(item.type == 'avg_otherincome' for item in incomesources)
  - You indicated that you had another source of income, please specify the income source and type: otherincome_specify
    maxlength: 29
    show if: 
    	code: |
    		any(item.type == 'avg_otherincome' for item in incomesources)
continue button field: income_sources_followups
---
question: |
  **Your Sources of Income**
fields: 
  - Upload copies of of your most recent 2 month's paystubs: paystubs_file
    datatype: files
    required: false
---
code: |
  def sum_if_defined(*pargs):
    total = 0
    for source in pargs:
      if defined(source):
        total += value(source)
    return total 
  
  family_size = householdmembers.target_number + 1
 
  householdmembers_total_income = sum_if_defined(item.income for item in householdmembers)
---
code: |
  if has_mortgage:
    rent=mortgage_payment
  else:
    rent=rent_payment
  
  if has_mortgage:
    home_amount = sum(mortgage_payment, real_property_taxes)
  else: 
    home_amount = rent_payment
  
  if has_mortgage:
    homeowners_renters_insurance = homeowners_insurance
  else:   
    homeowners_renters_insurance = renters_insurance
---
code: |
  total_deductions = sum_if_defined('union_dues', 'required_retirement_payments', 'medical_premiums', 'child_support_deductions', 'spousal_support_deductions', 'partner_support_deductions', 'job_related_expenses')
  
  total_othermonthlyexpenses = sum(item.amount for item in othermonthlyexpenses)
  
  total_installmentpayments = sum(item.amount for item in installmentpaymentsanddebts)
  
  total_monthly_expenses = sum_if_defined('mortgage_payment', 'real_property_taxes', 'rent_payment', 'homeowners_insurance', 'renters_insurance', 'groceries_and_supplies', 'eating_out', 'utilities', 'telephone', 'clothes', 'laundry_and_cleaning', 'healthcare_costs', 'insurance_expenses', 'auto_insurance', 'education', 'childcare', 'support_expenses', 'auto_expenses', 'wage_garnishment', 'total_deductions', 'total_othermonthlyexpenses', 'total_installmentpayments')
---
question: |
  **Your Family Size vs. Gross Monthly Household Income**
subquestion: |
  Your **Family Size** is **${ family_size }**
 
  Your **Gross Monthly Household Income (GMHI)** (i.e. the sum of your and all your household members' incomes) is **$${ gross_monthly_household_income }**
 
  If your gross monthly household income is less than the amount listed next to your family size in the table below, you may automatically qualify to have your court fees waived.
  
  Family Size  | GMHI Threshhold
  -------------|--------------
  1            | $1,264.59
  2            | $1,714.59
  3            | $2,164.59
  4            | $2,614.59
  5            | $3,064.59
  6            | $3,514.59
  *If more than 6 people at home, add $450.00 for each extra person*
under: |
  *Please note that even if your household income exceeds the threshhold above, you may still qualify to have all or part of your court fees waived if you do not have enough income to pay for **both** your household's basic needs and the court fees.* 
  
  *If this is the case, you will be asked about your expenses on the following pages.*
fields:
  - Is your gross monthly household income **less than** the amount listed above for your family size?: gross_monthly_household_income
    datatype: yesnoradio
    label above field: True
---
question: |
  **Specify Your Request to Waive Court Fees**
subquestion: |
  Because: 
  
  (1) You do not currently receive any form of public assistance, and
  
  (2) Your household income exceeds the maximum amount elligible for automatic acceptance of your fee waiver request,
  
  you will have to prove to the court that you do not have enough income to pay for both your household’s basic needs *and* the court fees. 
  
  **Indicate which of the following you would like to request of the court:**
fields: 
  - Waive all court fees and costs: waive_all_fees 
    datatype: yesnowide
  - Waive some of the court fees: waive_some_fees
    datatype: yesnowide
  - Let me make payments over time: payments_over_time
    datatype: yesnowide 
---
question: |
  **Your Money and Property**
subquestion: |
  Please note that the questions below may ask for repeat information. This information will be used to generate your fee waiver forms, whereas previous questions in the Income and Expenses section will be used to generate your financial disclosure forms. 
fields: 
  - note: "**Cash**"
  - What is the total amount of cash you currently have?: has_cash
    datatype: currency
  
  - note: "**Financial Accounts**"
  - Do you have any financial/bank accounts?: has_financialaccounts
    datatype: yesnoradio
  - note: "Fill in the following information regarding your **first** financial account:"
    show if: has_financialaccounts
  - Bank Name: financialaccount1_bank
    show if: has_financialaccounts
  - Amount: financialaccount1_amount
    datatype: currency
    show if: has_financialaccounts
    
  - Do you have another financial account?: has_more_financialaccounts
    datatype: yesnoradio
    show if: has_financialaccounts
  - note: "Fill in the following information regarding your **second** financial account:"
    show if: has_more_financialaccounts
  - Bank Name: financialaccount2_bank
    show if: has_more_financialaccounts
  - Amount: financialaccount2_amount
    datatype: currency
    show if: has_more_financialaccounts
    
  - Do you have another financial account?: has_third_financialaccount
    datatype: yesnoradio
    show if: has_more_financialaccounts
  - note: "Fill in the following information regarding your **third** financial account:"
    show if: has_third_financialaccount
  - Bank Name: financialaccount3_bank
    show if: has_third_financialaccount
  - Amount: financialaccount3_amount
    datatype: currency
    show if: has_third_financialaccount
    
  - note: "**Other Personal Property**"
  - Do you have any other personal property (jewelry, furniture, furs, stocks, bonds, etc.) worth at least $500?: has_other_property
    datatype: yesnoradio
  - note: "Fill in the following information regarding your most valuable piece of personal property:"
    show if: has_other_property
  - Type: personalprop1_type
    show if: has_other_property
  - Fair Market Value: personalprop1_value
    datatype: currency
    show if: has_other_property 
  - How Much You Still Owe: personalprop1_debt
    datatype: currency
    show if: has_other_property
    
  - Do you have another piece of personal property (jewelry, furniture, furs, stocks, bonds, etc.) worth at least $500?: has_more_property
    datatype: yesnoradio
    show if: has_other_property
  - note: "Fill in the following information regarding your **second** most valuable piece of personal property:"
    show if: has_more_property
  - Type: personalprop2_type
    show if: has_more_property
  - Fair Market Value: personalprop2_value
    datatype: currency
    show if: has_more_property 
  - How Much You Still Owe: personalprop2_debt
    datatype: currency
    show if: has_more_property
---
question: |
  Sign your name
subquestion: |
  Your signature will populate on each form on which it is required.
signature: pet.signature
under: |
  ${ pet.name }
---
question: |
  Your Deduction and Expense Information
fields: 
  - Are any deductions taken out of your paycheck?: deductions.there_are_any
    datatype: yesnoradio
    label above field: True
  - How many deductions are taken out of your paycheck? (You may include up to 4): deductions.target_number
    datatype: integer
    min: 1
    max: 4
    show if: deductions.there_are_any
---
question: |
  **Your Deduction and Expense Information**
subquestion: |
  Based on your answers to our deduction and expense information questions, your average **Total Monthly Household Expenses** = $${total_monthly_expenses}
fields: 
  - note: "Write the total monthly amount that other people (*such as your spouse, roommates, relatives, etc.*) pay for all the total monthly household expenses."
  - Amount of expenses paid by others: expenses_paid_by_others
    datatype: currency
continue button field: totalexpenses
---
question: |
  **Your Deduction and Expense Information**
subquestion: |
  Tell us about your **${ordinal(i)}** payroll deduction.
fields:
  - For: deductions[i].name.text
  - Monthly Amount: deductions[i].amount
    datatype: currency 
---
question: |
  **Next Steps:** What to expect if your fee waiver is granted
subquestion: |
  If you file a Request to Waive Court Fees (Form FW-001) and your request is granted, you will not have to pay fees for:
   
  - Filing papers in superior court;
  - Making and certifying copies;
  - Having the sheriff give notice;
  - Having a court hearing by telephone;
  - Giving notice and certificates;
  - Sending papers to another court department;
  - Having a court reporter; or
  - Preparing, copying, and certifying a clerk’s transcript on appeal and transmitting it to the appellate court and the party.
  
continue button field: feewaiver_nextsteps1
---
question: |
  **Next Steps:** What to expect if your fee waiver is denied without a hearing
subquestion: |
  Your fee waiver application may be denied without a hearing for 1 of 2 reasons:

  - It is incomplete; or
  - From your application, the court decided you are not eligible for the fee waiver.
 
  The judge will check the reason for denying your request on page 2 of Form FW-003.

  If your fee waiver is denied without a hearing, you have 10 days from the date in the Clerk's Certificate of Service (at the bottom of page 2 of Form FW-003 or attached to that form) to:

  - Pay your fees;
  - File a new request if the court found that your request was incomplete; OR
  - Ask for a hearing to show the court more information.

  **If you do not do 1 of these 3 things, the court will cancel the papers you filed with your fee waiver request and you can miss important deadlines or have to start your case all over.**

continue button field: feewaiver_nextsteps2
---
question: |
  **Next Steps:** What to expect if your fee waiver is denied without a hearing
subquestion: |
  If your fee waiver is denied, you may still request a hearing to provide the Judicial Officer with more evidence of your absolute inability to pay the court's fees.
  
  For more information on how to ask for a court hearing to bring more information after your fee waiver request is denied, please visit the [CA Court Website](https://www.courts.ca.gov/selfhelp-feewaiver.htm?rdeLocaleAttr=en).
continue button field: feewaiver_nextsteps3
#### End of fee waiver question blocks
---
question: |
  Sign your name
subquestion: |
  This signature will be used on your court forms.
signature: pet.signature
under: |
  ${ pet }
---
question: |
  **Preparing and filing your court forms**
continue button field: filing_info
---
code: |
  posattachments.clear()
  if children.there_are_any: 
    posattachments.append(form_fl311)
    if child_abduction_risk:
      posattachments.append(form_fl312)
    if holiday_schedule:
      posattachments.append(form_fl341c)
    if additional_physical_custody_provisions:
      posattachments.append(form_fl341d)
    if joint_legal_custody_provisions:
      posattachments.append(form_fl341e)
  posattachments.gathered = True 
---
code: |
  forms.clear()
  
  forms.append(form_fl110)
  
  forms.append(form_fl100)
  
  if children.there_are_any:
    if (children.target_number >3) or requesting_cs_other_ms:
      forms.append(form_fl100_attachment)
  elif requesting_ss_other:
    if requesting_ss_other_ms:
      forms.append(form_fl100_attachment)
  elif other_orders:
    if other_orders_ms:
      forms.append(form_fl100_attachment)
      
  if children.there_are_any:
    forms.append(form_fl105)
    forms.append(form_fl311)
    if children.target_number >=2:
      forms.append(form_fl105a)
    if child_abduction_risk:
      forms.append(form_fl312)
    if holiday_schedule:
      forms.append(form_fl341c)
    if additional_physical_custody_provisions:
      forms.append(form_fl341d)
    if joint_legal_custody_provisions:
      forms.append(form_fl341e)
      
  forms.append(form_fl150)
  
  forms.append(form_fl160c)
  
  forms.append(form_fl115)
  
  if children.there_are_any:
    if custodyvisitation_requesting_temporary_orders or childsupport_requesting_temporary_orders:
      forms.append(form_fl300)
      forms.append(form_fl330)
      forms.append(form_fl335)
  elif ss_to_pet or ss_to_resp:
    if spousalsupport_requesting_temporary_orders:
      forms.append(form_fl300)
      forms.append(form_fl330)
      forms.append(form_fl335)
  elif propertycontrol_requesting_temporary_orders or requesting_attorneysfees:
    forms.append(form_fl300)
    forms.append(form_fl330)
    forms.append(form_fl335)
  elif ss_to_pet or ss_to_resp:
    if spousalsupport_requesting_temporary_orders:
      if prior_ss_order_judgement:
        forms.append(form_fl157)
  if requesting_attorneysfees and not attorneys_fees_party_other:
    forms.append(form_fl157)
    if msol_ms or healthcondition_pet_ms or healthcondition_resp_ms or marketableskills_pet_ms or marketableskills_resp_ms or jobmarket_pet_ms or jobmarket_resp_ms or trainingexpenses_pet_ms or trainingexpenses_resp_ms or retraining_pet_ms or retraining_resp_ms or msolearningcapacity_pet_ms or msolearningcapacity_resp_ms or domesticduties_pet_specify_ms or domesticduties_resp_specify_ms or trainingcontributions_pet_specify_ms or trainingcontributions_resp_specify_ms or gainfullyemployed_pet_specify_ms or gainfullyemployed_resp_specify_ms or msolneeds_pet_supported_ms or msolneeds_resp_supported_ms or msolneeds_pet_supporting_ms or msolneeds_resp_supporting_ms or taxconsequences_pet_supported_ms or taxconsequences_resp_supported_ms or selfsupporting_pet_steps_ms or selfsupporting_resp_steps_ms or pet_maintaining_msol_specify_ms or resp_maintaining_msol_specify_ms or taxconsequences_pet_supporting_ms or taxconsequences_resp_supporting_ms or hardships_petsupported_ms or hardships_respsupported_ms or requesting_ss_other_ms:
      forms.append(form_fl157_attachment)
  if requesting_attorneysfees: 
    forms.append(form_fl319)
    forms.append(form_fl158)
  if children.there_are_any:
    if custodyvisitation_requesting_temporary_orders:
      if custodyvisitation_requesting_exparte_orders:
        forms.append(form_fl303)
        forms.append(form_fl305)
  elif propertycontrol_requesting_temporary_orders:
    if propertycontrol_requesting_exparte_orders:
      forms.append(form_fl303)
      forms.append(form_fl305)
  forms.gathered = True
---
#### Attachment and start of tagging block
mandatory: True
question: |
  Here are your PDF forms!
attachment code: "forms"
---
attachments:
  - name: "FL-110, Summons"
    variable name: form_fl110
    filename: FL-110, Summons
    pdf template file: FL-110_Summons.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - resp_name: "${resp.name}"
      - pet_name: "${pet.name}"
      - case_number: "${case_number}"
      - court_name: "${court.name.text}"
      - court_street_address: "${court.address.address}"
      - court_city_state_zip: "${ court.address.city }, CA ${court.address.zip}" 
      - pet_name_and_phone_number: |
          ${pet.name}, 
          ${pet.phone}
      - pet_address: |
          ${pet.address.block()}
  
  - name: "FL-100, Petition—Marriage or Domestic Partnership"
    variable name: form_fl100
    filename: FL-100, Petition—Marriage or Domestic Partnership
    pdf template file: FL-100_PetitionMarriage_Domestic_Partnership.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - pet_address_street: "${pet.address.address}, ${pet.address.unit}"
      - pet_address_city: "${pet.address.city}"
      - pet_address_state: "${pet.address.state}"
      - pet_address_zip: "${pet.address.zip}"
      - pet_phone: "${pet.phone}"
      - pet_email: "${pet.email}"
      - in_pro_per: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_and_zip: "${ court.address.city }, CA ${court.address.zip}" 
      - court_name: "${court.name.text}"
      - pet_name2: "${pet.name}"
      - resp_name: "${resp.name}"
      - Amended Form: "${amended_form}"
      - divorce_marriage: "${married}"
      - divorce_dp: "${domestic_partners}"
      - divorce: Yes
      - legal_separation_dp: No
      - legal_separation: No
      - legal_separation_marriage: No
      - nullity_dp: No
      - nullity_marriage: No
      - nullity: No
      - Case Number 1: "${case_number}"
      - married: "${married}"
      - dp_ca: "${dp_established_in_ca}"
      - dp_outside_ca: "${not dp_established_in_ca}"
      - pet_ca_resident: "${pet_ca_resident}"
      - resp_ca_resident: "${resp_ca_resident}"
      - dp_established_ca: "${dp_established_in_ca}"
      - same_sex_marriage: No
      - marriage_dates: "${married}"
      - date_of_marriage: "${date_of_marriage}"
      - date_of_separation_marriage: "${date_of_separation_marriage}"
      - length_of_marriage: "${marriage_length.describe(nice=False)}"
      - dp_dates: "${domestic_partners}"
      - date_of_dp: "${date_of_dp}"
      - date_of_separation_dp: "${date_of_separation_dp}"
      - length_of_dp: "${dp_length.describe(nice=False)}"
      - no_children: "${not children.there_are_any}"
      - has_children: "${children.there_are_any}"
      - child1_age: "${children.item(0).age_in_years()}"
      - child1_name: "${children.item(0).name}"
      - child1_birthdate: "${children.item(0).birthdate}"
      - child2_age: "${children.item(1).age_in_years()}"
      - child2_name: "${children.item(1).name}"
      - child2_birthdate: "${children.item(1).birthdate}"
      - child3_age: "${children.item(2).age_in_years()}"
      - child3_name: "${children.item(2).name}"
      - child3_birthdate: "${children.item(2).birthdate}"
      - child4_age: "${children.item(3).age_in_years()}"
      - child4_name: "${children.item(3).name}"
      - child4_birthdate: "${children.item(3).birthdate}"
      - Voluntary Declaration of Parentage: "${voluntary_declaration_of_paternity}"
      - Pet Name 3: "${pet.name}"
      - Case Number 2: "${case_number}"
      - Resp Name 2: "${resp.name}"
      - Legal Grounds Divorce: Yes
      - Legal Grounds Legal Separation: No
      - Permanent Legal Incapacity: "${not irreconcilable_differences}"
      - Irreconcilable Differences: "${irreconcilable_differences}"
      - Legal Grounds Nullity: No
      - Bigamy: No
      - Incest: No
      - Legal Grounds Nullity 2: No
      - Pet Underage: No
      - Fraud: No
      - Force: No
      - Prior Existing Marriage: No
      - Unsound Mind: No
      - Physical Incapacity: No
      - FL311: "${custodyvisitation_requesting_orders}"
      - FL312: "${child_abduction_risk}"
      - FL341C: "${holiday_schedule}"
      - FL341D: "${additional_physical_custody_provisions}"
      - FL341E: "${joint_legal_custody_provisions}"
      - Attachment 6c1: No
      - Child Support Other: "${requesting_cs_other}"
      - Child Support Other Specify: |
          % if requesting_cs_other_ms:
          ${requesting_cs_other_specify} (See Attachment)
          % else:
          ${requesting_cs_other_specify}
          % endif
      - Spousal Support to Pet: "${ss_to_pet}"
      - Spousal Support to Resp: "${ss_to_resp}"
      - Terminate Spousal Support to Resp: "${terminate_ss_to_resp}"
      - Terminate Spousal Support to Pet: "${terminate_ss_to_pet}"
      - Spousal Support Other: "${requesting_ss_other}"
      - Spousal Support Other Specify: |
          % if requesting_ss_other_ms:
          ${requesting_ss_other_specify} (See Attachment)
          % else:
          ${requesting_ss_other_specify}
          % endif
      - No Sep Prop: No
      - Sep Prop on Attachment 9b: No
      - Yes Sep Prop: Yes
      - Sep Prop on FL160: Yes
      - Sep Prop on Petition: No
      - Sep Prop Item 1 to: 
      - Sep Prop Item 1: 
      - Sep Prop Item 2 to: 
      - Sep Prop Item 2: 
      - Sep Prop Item 3 to: 
      - Sep Prop Item 3: 
      - Sep Prop Item 4 to:
      - Sep Prop Item 4: 
      - Sep Prop Item 5 to: 
      - Sep Prop Item 5: 
      - Pet Name 4: "${pet.name}"
      - Resp Name 3: "${resp.name}"
      - Case Number 3: "${case_number}"
      - Resp Name: "${resp.name}"
      - No Comm Prop: No
      - Yes Comm Prop: Yes
      - Comm Prop on FL160: Yes
      - Comm Prop on Attachment 10b: No
      - Comm Prop on Petition: No
      - Comm Prop Item 1: 
      - Comm Prop Item 8: 
      - Comm Prop Item 2: 
      - Comm Prop Item 9: 
      - Comm Prop Item 3: 
      - Comm Prop Item 10: 
      - Comm Prop Item 4: 
      - Comm Prop Item 11: 
      - Comm Prop Item 5: 
      - Comm Prop Item 12: 
      - Comm Prop Item 6: 
      - Comm Prop Item 13: 
      - Comm Prop Item 7: 
      - Comm Prop Item 14: 
      - Name Restoration: "${name_restoration}"
      - Name to be Restored: "${name_restoration_name}"
      - Other Requests: "${other_orders}"
      - Other Requests Specify: |
          % if other_orders_ms:
          ${other_orders_specify} (See Attachment)
          % else:
          ${other_orders_specify}
          % endif
      - Attachment 11c: No
      - Date: "${current_datetime()}"
      - Party Signature: "${pet.signature}"
      - Pet Name 5: "${pet.name}"
      - unborn_child: "${unborn_child}"
      - more_than_4_children: "${children.target_number >= 5}"
      - Sole Legal Custody to Resp: "${(child.type_of_legal_custody == 'solelegalcustody_to_otherparent' for child in children) and (not any(child.otherparent_exists for child in children) or (child.type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent' for child in children) or (child.type_of_legal_custody == 'solelegalcustody_to_otherparent' for child in children))}"
      - Other Legal Custody: "${((child.type_of_legal_custody == 'solelegalcustody_to_otherparent' for child in children) or (child.type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent' for child in children)) and any(child.otherparent_exists for child in children)}"
      - Joint Legal Custody: "${(child.type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent' for child in children)}"
      - Sole Legal Custody to Pet: "${(child.type_of_legal_custody == 'solelegalcustody_to_pet' for child in children)}"
      - Sole Physical Custody to Pet: "${(child.type_of_physical_custody == 'solephysicalcustody_to_pet' for child in children)}"
      - Other Physical Custody: "${any(child.otherparent_exists for child in children) and ((child.type_of_physical_custody == 'solephysicalcustody_to_otherparent' for child in children) or (child.type_of_physical_custody == 'primaryphysicalcustody_to_pet' for child in children) or (child.type_of_physical_custody == 'primaryphysicalcustody_to_otherparent' for child in children) or (child.type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent' for child in children))}"
      - Sole Physical Custody to Resp: "${(child.type_of_physical_custody == 'solephysicalcustody_to_otherparent' for child in children) and not any(child.otherparent_exists for child in children)}"
      - Joint Physical Custody: "${(child.type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent' for child in children) or (child.type_of_physical_custody == 'primaryphysicalcustody_to_pet' for child in children) or (child.type_of_physical_custody == 'primaryphysicalcustody_to_otherparent' for child in children)}"
      - Visitation to Pet: "${custodialparty.name.text == otherparent.name and granted_visitation}"
      - Visitation to Resp: "${custodialparty.name.text == pet.name and (not any(child.otherparent_exists for child in children)) and granted_visitation}"
      - Other Visitation: "${custodialparty.name.text == pet.name and any(child.otherparent_exists for child in children) and granted_visitation}"
      - Yes Spousal Support: "${ss_to_pet or ss_to_resp}"
      - Terminate Spousal Support: "${terminate_ss_to_pet or terminate_ss_to_resp}"
      - Reserve Spousal Support to Pet: "${not terminate_ss_to_pet and not ss_to_resp}"
      - Reserve Spousal Support to Resp: "${not terminate_ss_to_resp and not ss_to_resp}"
      - Reserve Spousal Support: "${(not terminate_ss_to_pet and not ss_to_pet) or (not terminate_ss_to_resp and not ss_to_resp)}"
  
  - name: "Attachment to FL-100"
    variable name: form_fl100_attachment
    filename: Attachment to FL-100
    docx template file: FL-100-Attachment-Template.docx
    skip undefined: true
    valid formats:
      - pdf
      - docx
  
  - name: "FL-105 GC-120(A), Declaration Under Uniform Child Custody Jurisdiction and Enforcement Act (UCCJEA)"
    variable name: form_fl105
    filename: FL-105 GC-120(A), Declaration Under Uniform Child Custody Jurisdiction and Enforcement Act (UCCJEA)
    pdf template file: FL-105_GC-120A_Declaration_Under_Uniform_Child_Custody_Jurisdiction_and_Enforcement_Act_UCCJEA.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - pet_address: "${pet.address.block()}"
      - pet_phone: "${pet.phone}"
      - pet_email: "${pet.email}"
      - in_pro_per: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${ court.address.city }, CA ${court.address.zip}" 
      - court_name: "${court.name.text}"
      - pet_name2: "${pet.name}"
      - resp_name: "${resp.name}"
      - otherparent_name: "${otherparent.name}"
      - case_number: "${case_number}"
      - currentaddress_confidential": "${confidential_address}"
      - children_number: "${children.target_number}"
      - child1_name: "${children.item(0).name}"
      - child1_birthdate: "${children.item(0).birthdate}"
      - child1_birthplace: "${children.item(0).birthplace}"
      - child1_sex: |
          % if children.item(0).sex == 'children[i].sex_male':
            M
          % elif children.item(0).sex == 'children[i].sex_female':
            F
          % endif
      - child1_currentaddress_address: |
          % if different_addresses: 
            ${child1_street}, ${child1_city}, ${child1_state} ${child1_zip}
          % elif not different_addresses: 
            ${childrens_current_street}, ${childrens_current_city}, ${childrens_current_state} ${childrens_current_zip}
          % elif confidential_address:
            ${child1_city}, ${child1_state}
          % endif
      - child1_currentaddress_adults: |
          % if different_addresses: 
            ${child1_livedwith}, ${child1_livedwith_address}
          % elif not different_addresses: 
            ${childrens_address1_livedwith}, ${childrens_current_street}, ${childrens_current_city}, ${childrens_current_state} ${childrens_current_zip}
          % elif confidential_address:
          % endif
      - child1_currentaddress_relationship: |
          % if different_addresses: 
            ${child1_livedwith_relationship}
          % else: 
            ${childrens_address1_livedwith_relationship}
          % endif
      - currentaddress_confidential: "${confidential_address}"
      - currentaddress_confidential3: "${confidential_address}"
      - child1_currentaddress_from: |
          % if different_addresses: 
            ${child1_startdate}
          % else: 
            ${childrens_address1_startdate}
          % endif    
      - child1_address1_from: |
          % if different_addresses: 
            ${child1_address2_startdate}
          % else: 
            ${childrens_address2_startdate}
          % endif 
      - child1_address1_to: |
          % if different_addresses: 
            ${child1_startdate}
          % else: 
            ${childrens_address1_startdate}
          % endif 
      - child1_address1_relationship: |
          % if different_addresses: 
            ${child1_address2_livedwith_relationship}
          % else: 
            ${childrens_address2_livedwith_relationship}
          % endif  
      - child1_address1_adults: |
          % if different_addresses: 
            ${child1_address2_livedwith}, ${child1_address2_livedwith_address}
          % else: 
            ${childrens_address2_livedwith}, ${childrens_address2_livedwith_address}
          % endif
      - child1_address1_address: |
          % if different_addresses: 
            ${child1_address2_city}, ${child1_address2_state}
          % else: 
            ${childrens_address2}
          % endif  
      - child1_address2_from: |
          % if different_addresses: 
            ${child1_address3_startdate}
          % else: 
            ${childrens_address3_startdate}
          % endif 
      - child1_address2_to: |
          % if different_addresses: 
            ${child1_address2_startdate}
          % elif child1_address2: 
            ${childrens_address2_startdate}
          % endif 
      - child1_address2_relationship: |
          % if different_addresses: 
            ${child1_address3_livedwith_relationship}
          % else: 
            ${childrens_address3_livedwith_relationship}
          % endif 
      - child1_address2_adults: |
          % if different_addresses: 
            ${child1_address3_livedwith}, ${child1_address3_livedwith_address}
          % else: 
            ${childrens_address3_livedwith}, ${childrens_address3_livedwith_address}
          % endif
      - child1_address2_address: |
          % if different_addresses: 
            ${child1_address3_city}, ${child1_address3_state}
          % else: 
            ${childrens_address3}
          % endif  
      - child1_address3_from: |
          % if different_addresses: 
            ${child1_address4_startdate}
          % else: 
            ${childrens_address4_startdate}
          % endif    
      - child1_address3_to: |
          % if different_addresses: 
            ${child1_address3_startdate}
          % elif child1_address3: 
            ${childrens_address3_startdate}
          % endif 
      - child1_address3_relationship: |
          % if different_addresses: 
            ${child1_address4_livedwith_relationship}
          % else: 
            ${childrens_address4_livedwith_relationship}
          % endif 
      - child1_address3_adults: |
          % if different_addresses: 
            ${child1_address4_livedwith}, ${child1_address4_livedwith_address}
          % else: 
            ${childrens_address4_livedwith}, ${childrens_address4_livedwith_address}
          % endif
      - child1_address3_address: |
          % if different_addresses: 
            ${child1_address4_city}, ${child1_address4_state}
          % else: 
            ${childrens_address4}
          % endif  
      - child2_name: "${children.item(1).name}"
      - address_info_same: "${not different_addresses}"
      - child2_birthdate: "${children.item(1).birthdate}"
      - child2_birthplace: "${children.item(1).birthplace}"
      - child2_sex: |
          % if children.item(1).sex == 'children[i].sex_male':
            M
          % elif children.item(1).sex == 'children[i].sex_female':
            F
          % endif
      - child2_currentaddress_address: |
          % if different_addresses and not confidential_address: 
            ${child2_street}, ${child2_city}, ${child2_state} ${child2_zip}
          % elif different_addresses and confidential_address: 
            ${child2_city}, ${child2_state}
          % endif
      - child2_currentaddress_adults: |
          % if different_addresses: 
            ${child2_livedwith}, ${child2_livedwith_address}
          % endif  
      - child2_currentaddress_relationship: |
          % if different_addresses: 
            ${child2_livedwith_relationship}
          % endif
      - currentaddress_confidential4: "${confidential_address}"
      - currentaddress_confidential5: "${confidential_address}"
      - child2_currentaddress_from: |
          % if different_addresses: 
            ${child2_startdate}
          % endif  
      - child2_address1_from: |
          % if different_addresses: 
            ${child2_address2_startdate}
          % endif
      - child2_address1_to: |
          % if different_addresses: 
            ${child2_startdate}
          % endif
      - child2_address1_relationship: |
          % if different_addresses: 
            ${child2_address2_livedwith_relationship}
          % endif   
      - child2_address1_adults: |
          % if different_addresses: 
            ${child2_address2_livedwith}, ${child2_address2_livedwith_address}
          % else:
          % endif
      - child2_address1_address: |
          % if different_addresses: 
            ${child2_address2_city}, ${child2_address2_state}
          % else: 
          % endif 
      - child2_address2_from: |
          % if different_addresses: 
            ${child2_address3_startdate}
          % else: 
          % endif
      - child2_address2_to: |
          % if different_addresses: 
            ${child2_address2_startdate}
          % else: 
          % endif
      - child2_address2_relationship: |
          % if different_addresses: 
            ${child2_address3_livedwith_relationship}
          % else: 
          % endif 
      - child2_address2_adults: |
          % if different_addresses: 
            ${child2_address3_livedwith}, ${child2_address3_livedwith_address}
          % else:
          % endif
      - child2_address2_address: |
          % if different_addresses: 
            ${child2_address3_city}, ${child2_address3_state}
          % else: 
          % endif 
      - child2_address3_from: |
          % if different_addresses: 
            ${child2_address4_startdate}
          % else: 
          % endif
      - child2_address3_relationship: |
          % if different_addresses: 
            ${child2_address4_livedwith_relationship}
          % else: 
          % endif 
      - child2_address3_address: |
          % if different_addresses: 
            ${child2_address4_city}, ${child2_address4_state}
          % else: 
          % endif 
      - child2_address3_adults: |
          % if different_addresses: 
            ${child2_address4_livedwith}, ${child2_address4_livedwith_address}
          % else:
          % endif
      - more_than_four_addresses: 
      - more_than_two_children: |
          % if children.target_number >= 3:
          % endif  
      - short_title: |
          ${pet.name.last}, ${pet.name.first} ${pet.name.middle} v. ${resp.name.last}, ${resp.name.first} ${resp.name.middle}
      - case_number2: "${case_number}"
      - no_prior_custodyvisitation: "${not custodyvisitation_priorcase_yes}"
      - yes_prior_custodyvisitation: "${custodyvisitation_priorcase_yes}"
      - prior_custodyvisitation_family: "${custodyvisitation_priorcase_family}"
      - prior_custodyvisitation_family_casenumber: "${custodyvisitation_priorcase_family_casenumber}"
      - prior_custodyvisitation_family_court: "${custodyvisitation_priorcase_family_court}"
      - prior_custodyvisitation_family_date: "${custodyvisitation_priorcase_family_date}"
      - prior_custodyvisitation_family_children: "${custodyvisitation_priorcase_family_children}"
      - prior_custodyvisitation_family_connection: "${custodyvisitation_priorcase_family_connection}"
      - prior_custodyvisitation_family_status: |
          % if custodyvisitation_priorcase_family_ongoing:
            Active
          % else: 
            Closed
          % endif
      - prior_custodyvisitation_guardianship: "${custodyvisitation_priorcase_guardianship}"
      - prior_custodyvisitation_guardianship_casenumber: "${custodyvisitation_priorcase_guardianship_casenumber}"
      - prior_custodyvisitation_guardianship_court: "${custodyvisitation_priorcase_guardianship_court}"
      - prior_custodyvisitation_guardianship_date: "${custodyvisitation_priorcase_guardianship_date}"
      - prior_custodyvisitation_guardianship_children: "${custodyvisitation_priorcase_guardianship_children}"
      - prior_custodyvisitation_guardianship_connection: "${custodyvisitation_priorcase_guardianship_connection}"
      - prior_custodyvisitation_guardianship_status: |
          % if custodyvisitation_priorcase_guardianship_ongoing:
            Active
          % else: 
            Closed
          % endif
      - prior_custodyvisitation_other: "${custodyvisitation_priorcase_other}"
      - prior_custodyvisitation_other_casenumber: "${custodyvisitation_priorcase_other_casenumber}"
      - prior_custodyvisitation_other_court: "${custodyvisitation_priorcase_other_court}"
      - prior_custodyvisitation_other_date: "${custodyvisitation_priorcase_other_date}"
      - prior_custodyvisitation_other_children: "${custodyvisitation_priorcase_other_children}"
      - prior_custodyvisitation_other_connection: "${custodyvisitation_priorcase_other_connection}"
      - prior_custodyvisitation_other_status: |
          % if custodyvisitation_priorcase_other_ongoing:
            Active
          % else: 
            Closed
          % endif
      - prior_custodyvisitation_juvenile: "${custodyvisitation_priorcase_juvenile}"
      - prior_custodyvisitation_juvenile_casenumber: "${custodyvisitation_priorcase_juvenile_casenumber}"
      - prior_custodyvisitation_juvenile_court: "${custodyvisitation_priorcase_juvenile_court}"
      - prior_custodyvisitation_adoption: "${custodyvisitation_priorcase_adoption}"
      - prior_custodyvisitation_adoption_casenumber: "${custodyvisitation_priorcase_adoption_casenumber}"
      - prior_custodyvisitation_adoption_court: "${custodyvisitation_priorcase_adoption_court}"
      - yes_prior_restrainingorder: "${custodyvisitation_priorrestrainingorders_yes}"
      - prior_restrainingorder_criminal: "${custodyvisitation_priorrestrainingorders_criminal}"
      - prior_restrainingorder_criminal_county: "${custodyvisitation_priorrestrainingorders_criminal_county}"
      - prior_restrainingorder_criminal_state: "${custodyvisitation_priorrestrainingorders_criminal_state}"
      - prior_restrainingorder_criminal_casenumber: "${custodyvisitation_priorrestrainingorders_criminal_casenumber}"
      - prior_restrainingorder_criminal_date: "${custodyvisitation_priorrestrainingorders_criminal_expiration}"
      - prior_restrainingorder_family: "${custodyvisitation_priorrestrainingorders_family}"
      - prior_restrainingorder_family_county: "${custodyvisitation_priorrestrainingorders_family_county}"
      - prior_restrainingorder_family_state: "${custodyvisitation_priorrestrainingorders_family_state}"
      - prior_restrainingorder_family_casenumber: "${custodyvisitation_priorrestrainingorders_family_casenumber}"
      - prior_restrainingorder_family_date: "${custodyvisitation_priorrestrainingorders_family_expiration}"
      - prior_restrainingorder_juvenile: "${custodyvisitation_priorrestrainingorders_juvenile}"
      - prior_restrainingorder_juvenile_county: "${custodyvisitation_priorrestrainingorders_juvenile_county}"
      - prior_restrainingorder_juvenile_state: "${custodyvisitation_priorrestrainingorders_juvenile_state}"
      - prior_restrainingorder_juvenile_casenumber: "${custodyvisitation_priorrestrainingorders_juvenile_casenumber}"
      - prior_restrainingorder_juvenile_date: "${custodyvisitation_priorrestrainingorders_juvenile_expiration}"
      - prior_restrainingorder_other: "${custodyvisitation_priorrestrainingorders_other}"
      - prior_restrainingorder_other_county: "${custodyvisitation_priorrestrainingorders_other_county}"
      - prior_restrainingorder_other_state: "${custodyvisitation_priorrestrainingorders_other_state}"
      - prior_restrainingorder_other_casenumber: "${custodyvisitation_priorrestrainingorders_other_casenumber}"
      - prior_restrainingorder_other_date: "${custodyvisitation_priorrestrainingorders_other_expiration}"
      - yes_custodyvisitation_rights: "${otherpeoplewithcustodyrights_exist}"
      - no_custodyvisitation_rights: "${not otherpeoplewithcustodyrights_exist}"
      - person2_name: "${custodyvisitationrights_person2_name}"
      - person1_name: "${custodyvisitationrights_person1_name}"
      - person3_name: "${custodyvisitationrights_person3_name}"
      - person2_street_address: "${custodyvisitationrights_person2_address1}"
      - person1_street_address: "${custodyvisitationrights_person1_address1}"
      - person3_street_address: "${custodyvisitationrights_person3_address1}"
      - person2_city_state_zip: "${custodyvisitationrights_person2_address2}"
      - person1_city_state_zip: "${custodyvisitationrights_person1_address2}"
      - person3_city_state_zip: "${custodyvisitationrights_person3_address2}"
      - person1_has_physicalcustody: "${custodyvisitationrights_person1_hascustody}"
      - person3_has_physicalcustody: "${custodyvisitationrights_person3_hascustody}"
      - person2_has_physicalcustody: "${custodyvisitationrights_person2_hascustody}"
      - person1_claims_custody: "${custodyvisitationrights_person1_claimscustody}"
      - person3_claims_custody: "${custodyvisitationrights_person3_claimscustody}"
      - person2_claims_custody: "${custodyvisitationrights_person2_claimscustody}"
      - person1_claims_visitation: "${custodyvisitationrights_person1_claimsvisitation}"
      - person3_claims_visitation: "${custodyvisitationrights_person3_claimsvisitation}"
      - person2_claims_visitation: "${custodyvisitationrights_person2_claimsvisitation}"
      - person2_children: "${custodyvisitationrights_person2_children}"
      - person3_children: "${custodyvisitationrights_person3_children}"
      - person1_children: "${custodyvisitationrights_person1_children}"
      - date: "${current_datetime()}"
      - pet_name3: "${pet.name}"
      - SIGNATURE OF DECLARANT: 
      - pages_attached_number: |
          % if children.target_number < 3:
            0
          % elif children.target_number < 6:
            1
          % elif children.target_number >= 6 and children.target_number <9:
            2
          % endif
      - pages_attached: Yes
  
  - name: "FL-105(A) GC-120(A), Attachment to Declaration Under Uniform Child Custody Jurisdiction and Enforcement Act (UCCJEA)"
    variable name: form_fl105a
    filename: FL-105(A) GC-120(A), Attachment to Declaration Under Uniform Child Custody Jurisdiction and Enforcement Act (UCCJEA)
    pdf template file: FL-105A_GC-120A_Attachment_to_Declaration_Under_Uniform_Child_Custody_Jurisdiction_and_Enforcement_Act_UCCJEA.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - short_title: |
          ${pet.name.last}, ${pet.name.first} ${pet.name.middle} v. ${resp.name.last}, ${resp.name.first} ${resp.name.middle}
      - case_number: "${case_number}"
      - child3_name: "${children.item(2).name}"
      - live_together: "${children.target_number >= 3 and not different_addresses}"
      - child3_birthplace: "${children.item(2).birthplace}"
      - child3_birthdate: "${children.item(2).birthdate}"
      - child3_sex: |
          % if children.item(2).sex == 'children[i].sex_male':
            M
          % elif children.item(2).sex == 'children[i].sex_female':
            F
          % endif
      - child3_currentaddress_from: |
          % if different_addresses: 
            ${child3_startdate}
          % endif
      - child3_currentaddress_adults: |
          % if different_addresses: 
            ${child3_livedwith}, ${child3_livedwith_address}
          % endif
      - child3_currentaddress_address: |
          % if different_addresses and not confidential_address: 
            ${child3_street}, ${child3_city}, ${child3_state} ${child3_zip}
          % elif different_addresses and confidential_address: 
            ${child3_city}, ${child3_state}
          % endif
      - address_confidential2: "${confidential_address}"
      - child3_currentaddress_relationship: |
          % if different_addresses: 
            ${child3_livedwith_relationship}
          % endif
      - address_confidential: "${confidential_address}"
      - child3_address1_to: |
          % if different_addresses: 
            ${child3_startdate}
          % endif
      - child3_address1_relationship: |
          % if different_addresses: 
            ${child3_address2_livedwith_relationship}
          % endif
      - child3_address1_from: |
          % if different_addresses: 
            ${child3_address2_startdate}
          % endif
      - child3_address1_address: |
          % if different_addresses: 
            ${child3_address2_city}, ${child3_address2_state}
          % endif
      - child3_address1_adults: |
          % if different_addresses: 
            ${child3_address2_livedwith}, ${child3_address2_livedwith_address}
          % endif
      - child3_address2_from: |
          % if different_addresses: 
            ${child3_address3_startdate}
          % endif
      - child3_address2_to: |
          % if different_addresses: 
            ${child3_address2_startdate}
          % endif
      - child3_address2_relationship: |
          % if different_addresses: 
            ${child3_address3_livedwith_relationship}
          % endif
      - child3_address2_adults: |
          % if different_addresses: 
            ${child3_address3_livedwith}, ${child3_address2_livedwith_address}
          % endif
      - child1_address2_address: |
          % if different_addresses: 
            ${child3_address3_city}, ${child3_address3_state} 
          % endif
      - child3_address3_from: |
          % if different_addresses: 
            ${child3_address4_startdate}
          % endif
      - child3_address3_to: |
          % if different_addresses: 
            ${child3_address3_startdate}
          % endif
      - child3_address3_relationship: |
          % if different_addresses: 
            ${child3_address4_livedwith_relationship}
          % endif
      - child3_address3_address: |
          % if different_addresses: 
            ${child3_address4_city}, ${child3_address4_state} 
          % endif
      - child3_address3_adults: |
          % if different_addresses: 
            ${child3_address4_livedwith}, ${child3_address4_livedwith_address}
          % endif
      - child4_name: "${children.item(3).name}"
      - live_together2: "${children.target_number >= 4 and not different_addresses}"
      - child4_birthplace: "${children.item(3).birthplace}"
      - child4_birthdate: "${children.item(3).birthdate}"
      - child4_sex: |
          % if children.item(3).sex == 'children[i].sex_male':
            M
          % elif children.item(3).sex == 'children[i].sex_female':
            F
          % endif
      - child4_currentaddress_address: |
          % if different_addresses and not confidential_address: 
            ${child4_street}, ${child4_city}, ${child4_state} ${child4_zip}
          % elif different_addresses and confidential_address: 
            ${child4_city}, ${child4_state}
          % endif
      - child4_currentaddress_adults: |
          % if different_addresses: 
            ${child4_livedwith}, ${child4_livedwith_address}
          % endif
      - child4_currentaddress_from: |
          % if different_addresses: 
            ${child4_startdate}
          % endif
      - address_confidential4: "${confidential_address}"
      - address_confidential3: "${confidential_address}"
      - child4_currentaddress_relationship: |
          % if different_addresses: 
            ${child4_livedwith_relationship}
          % endif
      - child4_address1_from: |
          % if different_addresses: 
            ${child4_address2_startdate}
          % endif
      - child4_address1_to: |
          % if different_addresses: 
            ${child4_startdate}
          % endif
      - child4_address1_relationship: |
          % if different_addresses: 
            ${child4_address2_livedwith_relationship}
          % endif
      - child4_address1_address: |
          % if different_addresses: 
            ${child4_address2_city}, ${child4_address2_state}
          % endif
      - child4_address1_adults: |
          % if different_addresses: 
            ${child4_address2_livedwith}, ${child4_address2_livedwith_address}
          % endif
      - child4_address2_from: |
          % if different_addresses: 
            ${child4_address3_startdate}
          % endif
      - child4_address2_to: |
          % if different_addresses: 
            ${child4_address2_startdate}
          % endif
      - child4_address2_relationship: |
          % if different_addresses: 
            ${child4_address3_livedwith_relationship}
          % endif
      - child4_address2_adults: |
          % if different_addresses: 
            ${child4_address3_livedwith}, ${child4_address3_livedwith_address}
          % endif
      - child4_address2_address: |
          % if different_addresses: 
            ${child4_address3_city}, ${child4_address3_state}
          % endif
      - child4_address3_from: |
          % if different_addresses: 
            ${child4_address4_startdate}
          % endif
      - child4_address3_to: |
          % if different_addresses: 
            ${child4_address3_startdate}
          % endif
      - child4_address3_relationship: |
          % if different_addresses: 
            ${child4_address4_livedwith_relationship}
          % endif
      - child4_address3_adults: |
          % if different_addresses: 
            ${child4_address4_livedwith}, ${child4_address4_livedwith_address}
          % endif
      - child4_address3_address: |
          % if different_addresses: 
            ${child4_address4_city}, ${child4_address4_state}
          % endif
      - child5_name: "${children.item(4).name}"
      - live_together3: "${children.target_number >= 5 and not different_addresses}"
      - child5_birthplace: "${children.item(4).birthplace}"
      - child5_birthdate: "${children.item(4).birthdate}"
      - child5_sex: |
          % if children.item(4).sex == 'children[i].sex_male':
            M
          % elif children.item(4).sex == 'children[i].sex_female':
            F
          % endif
      - child5_currentaddress_address: |
          % if different_addresses and not confidential_address: 
            ${child5_street}, ${child5_city}, ${child5_state} ${child5_zip}
          % elif different_addresses and confidential_address: 
            ${child5_city}, ${child5_state}
          % endif
      - child5_currentaddress_adults: |
          % if different_addresses: 
            ${child5_livedwith}, ${child5_livedwith_address}
          % endif
      - address_confidential6: "${confidential_address}"
      - child5_currentaddress_from: |
          % if different_addresses: 
            ${child5_startdate}
          % endif
      - address_confidential5: "${confidential_address}"
      - child5_currentaddress_relationship: |
          % if different_addresses: 
            ${child4_livedwith_relationship}
          % endif
      - child5_address1_adults: |
          % if different_addresses: 
            ${child5_address2_livedwith}, ${child5_address2_livedwith_address}
          % endif
      - child5_address1_from: |
          % if different_addresses: 
            ${child5_address2_startdate}
          % endif
      - child5_address1_to: |
          % if different_addresses: 
            ${child5_startdate}
          % endif
      - child5_address1_relationship: |
          % if different_addresses: 
            ${child5_address2_livedwith_relationship}
          % endif
      - child5_address1_address: |
          % if different_addresses: 
            ${child5_address2_city}, ${child5_address2_state}
          % endif 
      - child5_address2_adults: |
          % if different_addresses: 
            ${child5_address3_livedwith}, ${child5_address3_livedwith_address}
          % endif
      - child5_address2_from: |
          % if different_addresses: 
            ${child5_address3_startdate}
          % endif
      - child5_address2_to: |
          % if different_addresses: 
            ${child5_address2_startdate}
          % endif
      - child5_address2_relationship: |
          % if different_addresses: 
            ${child5_address3_livedwith_relationship}
          % endif
      - child5_address2_address: |
          % if different_addresses: 
            ${child4_address3_city}, ${child4_address3_state}
          % endif
      - child5_address3_from: |
          % if different_addresses: 
            ${child5_address4_startdate}
          % endif
      - child5_address3_to: |
          % if different_addresses: 
            ${child5_address3_startdate}
          % endif
      - child5_address3_relationship: |
          % if different_addresses: 
            ${child5_address4_livedwith_relationship}
          % endif
      - child5_address3_adults: |
          % if different_addresses: 
            ${child5_address4_livedwith}, ${child5_address4_livedwith_address}
          % endif
      - child5_address3_address: |
          % if different_addresses: 
            ${child5_address4_city}, ${child5_address4_state}
          % endif
      - page_number_current: "1"
      - page_number_total: |
          % if children.target_number < 6:
            1
          % elif children.target_number >= 6 and children.target_number <9:
            2
          % endif
  
  - name: "FL-311, Child Custody and Visitation (Parenting Time) Application Attachment"
    variable name: form_fl311
    filename: FL-311, Child Custody and Visitation (Parenting Time) Application Attachment
    pdf template file: FL-311_Child_Custody_and_Visitation_Parenting_Time_Application_Attachment.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - case_number: "${case_number}"
      - other_name: "${otherparent.name}"
      - rfo: No
      - rfo_response: No
      - petition: Yes
      - response: 
      - custody: Yes
      - child0_name: "${children.item(0).name}"
      - child0_birthdate: "${children.item(0).birthdate}"
      - child0_legalcustody:  |
          % if children.item(0).type_of_legal_custody == 'solelegalcustody_to_pet':
          ${pet.name}
          % elif (children.item(0).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(0).otherparent_exists:
          ${resp.name}
          % elif (children.item(0).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(0).otherparent_exists:
          ${otherparent.name}
          % elif children.item(0).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
          ${pet.name} and ${otherparent.name} 
          % endif
      - child0_physicalcustody: |
          % if children.item(0).type_of_physical_custody == 'solephysicalcustody_to_pet':
          ${pet.name}
          % elif (children.item(0).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(0).otherparent_exists:
          ${resp.name}
          % elif (children.item(0).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(0).otherparent_exists:
          ${otherparent.name}
          % elif children.item(0).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
          ${pet.name} and ${otherparent.name}
          % elif children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
          Primary, ${pet.name}
          % elif children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent':
          Primary, ${otherparent.name}
          % endif
      - child1_name: "${children.item(1).name}"
      - child1_birthdate: "${children.item(1).birthdate}"
      - child1_legalcustody: |
          % if children.item(1).type_of_legal_custody == 'solelegalcustody_to_pet':
          ${pet.name}
          % elif (children.item(1).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(1).otherparent_exists:
          ${resp.name}
          % elif (children.item(1).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(1).otherparent_exists:
          ${otherparent.name}
          % elif children.item(1).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
          ${pet.name} and ${otherparent.name}  
          % endif
      - child1_physicalcustody: |
          % if children.item(1).type_of_physical_custody == 'solephysicalcustody_to_pet':
          ${pet.name}
          % elif (children.item(1).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(1).otherparent_exists:
          ${resp.name}
          % elif (children.item(1).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(1).otherparent_exists:
          ${otherparent.name}
          % elif children.item(1).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
          ${pet.name} and ${otherparent.name}
          % elif children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
          Primary, ${pet.name}
          % elif children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent':
          Primary, ${otherparent.name}
          % endif
      - child2_name: "${children.item(2).name}"
      - child2_birthdate: "${children.item(2).birthdate}"
      - child2_legalcustody: |
          % if children.item(2).type_of_legal_custody == 'solelegalcustody_to_pet':
          ${pet.name}
          % elif (children.item(2).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not children.item(2).otherparent_exists:
          ${resp.name}
          % elif (children.item(2).type_of_legal_custody == 'solelegalcustody_to_otherparent') and children.item(2).otherparent_exists:
          ${otherparent.name}
          % elif children.item(2).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
          ${pet.name} and ${otherparent.name}  
          % endif
      - child2_physicalcustody: |
          % if children.item(2).type_of_physical_custody == 'solephysicalcustody_to_pet':
          ${pet.name}
          % elif (children.item(2).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not children.item(2).otherparent_exists:
          ${resp.name}
          % elif (children.item(2).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and children.item(2).otherparent_exists:
          ${otherparent.name}
          % elif children.item(2).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
          ${pet.name} and ${otherparent.name} 
          % elif children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_pet':
          Primary, ${pet.name}
          % elif children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent':
          Primary, ${otherparent.name}
          % endif
      - more_than_3_children: |
          % if children.target_number > 3: 
          See Attachment
          % endif
      - visitation: Yes
      - page document: |
      - visitation_agreement: No
      - visitation_mediation: No
      - mediation_date_time_location: |
      - no_visitation: "${not granted_visitation}"
      - scheduled_visitation: "${scheduled_visitation}"
      - weekends: "${visitation_weekends}"
      - weekends_startdate: "${visitation_weekends_starting}"
      - weekends_4th: "${visitation_weekends_fourth}"
      - weekends_1st: "${visitation_weekends_first}"
      - weekends_3rd: "${visitation_weekends_third}"
      - weekends_5th: "${visitation_weekends_fifth}"
      - weekends_2nd: "${visitation_weekends_second}"
      - alternate_fifth_startdate: |
      - alternate_fifth_by_month_odd: "${alternate_fifth_by_month_odd}"
      - alternate_fifth_by_month_even: "${alternate_fifth_by_month_even}"
      - weekends_startday: |
          % if visitation_weekends_start_day == 'visitation_weekends_start_day_Friday':
          Friday
          % elif visitation_weekends_start_day == 'visitation_weekends_start_day_Saturday':
          Saturday
          % elif visitation_weekends_start_day == 'visitation_weekends_start_day_Sunday':
          Sunday
          % endif
      - weekends_starttime: "${format_time(visitation_weekends_start_time)}" 
      - weekends_starttime_pm: "${format_time('visitation_weekends_start_time', format='a') == 'PM'}"
      - weekends_starttime_am: "${format_time('visitation_weekends_start_time', format='a') == 'AM'}"
      - weekends_starttime_startofschool: "${visitation_weekends_start_time_beforeschool}"
      - weekends_starttime_afterschool: "${visitation_weekends_start_time_afterschool}"
      - weekends_endtime_startofschool: "${visitation_weekends_end_time_beforeschool}"
      - weekends_endtime_afterschool: "${visitation_weekends_end_time_afterschool}"
      - weekends_endday: |
          % if visitation_weekends_end_day == 'visitation_weekends_end_day_Saturday':
          Saturday
          % elif visitation_weekends_end_day == 'visitation_weekends_start_day_Sunday':
          Sunday
          % elif visitation_weekends_end_day == 'visitation_weekends_start_day_Monday':
          Monday
          % endif
      - weekends_endtime: "${format_time(visitation_weekends_end_time)}"
      - weekends_endtime_pm: "${format_time('visitation_weekends_end_time', format='a') == 'PM'}"
      - weekends_endtime_am: "${format_time('visitation_weekends_end_time', format='a') == 'AM'}"
      - weekdays: "${visitation_weekends}"
      - weekdays_startdate: "${visitation_weekdays_starting}"
      - weekdays_starttime_startofschool: "${visitation_weekdays_start_time_beforeschool}"
      - weekdays_startday: |
          % if visitation_weekdays_start_day == 'visitation_weekdays_start_day_Monday':
          Monday
          % elif visitation_weekdays_start_day == 'visitation_weekdays_start_day_Tuesday':
          Tuesday
          % elif visitation_weekdays_start_day == 'visitation_weekdays_start_day_Wednesday':
          Wednesday
          % elif visitation_weekdays_start_day == 'visitation_weekdays_start_day_Thursday': 
          Thursday
          % elif visitation_weekdays_start_day == 'visitation_weekdays_start_day_Friday': 
          Friday
          % endif
      - weekdays_starttime: "${format_time(visitation_weekdays_start_time)}"
      - weekdays_starttime_pm: "${format_time('visitation_weekdays_start_time', format='a') == 'PM'}"
      - weekdays_starttime_am: "${format_time('visitation_weekdays_start_time', format='a') == 'AM'}"
      - weekdays_starttime_afterschool: "${visitation_weekdays_start_time_afterschool}"
      - weekdays_endtime_startofschool: "${visitation_weekdays_end_time_beforeschool}"
      - weekdays_endday: |
          % if visitation_weekdays_end_day == 'visitation_weekdays_end_day_Monday':
          Monday
          % elif visitation_weekdays_end_day == 'visitation_weekdays_end_day_Tuesday': 
          Tuesday
          % elif visitation_weekdays_end_day == 'visitation_weekdays_end_day_Wednesday': 
          Wednesday
          % elif visitation_weekdays_end_day == 'visitation_weekdays_end_day_Thursday': 
          Thursday
          % elif visitation_weekdays_end_day == 'visitation_weekdays_end_day_Friday': 
          Friday
          % endif
      - weekdays_endtime: "${format_time(visitation_weekdays_end_time)}"
      - weekdays_endtime_pm: "${format_time('visitation_weekdays_end_time', format='a') == 'PM'}"
      - weekdays_endtime_am: "${format_time('visitation_weekdays_end_time', format='a') == 'AM'}"
      - weekdays_endtime_endofschool: "${visitation_weekdays_end_time_afterschool}" 
      - other_visitation: "${visitation_other}"
      - other_visitation_attachment: No
      - other_visitation_asfollows: "${visitation_other}"
      - other_visitation_specify: "${visitation_other_description}"
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - case_number2: "${case_number}"
      - otherparent_name2: "${otherparent.name}"
      - supervised_visitation: "${supervisedvisitation}"
      - supervisor_requirements: No
      - noncustodial_parent_name: |
          % if supervisedvisitation:
          ${noncustodialparty.name.text}
          % endif
      - professional_supervisor: "${supervisedvisitation_professional_supervisor}"
      - nonprofessional_supervisor: "${not supervisedvisitation_professional_supervisor}"
      - supervisor_name: |
          % if supervisedvisitation_professional_supervisor:
          ${supervisedvisitation_professional_supervisor_name} 
          % elif supervisedvisitation and not supervisedvisitation_professional_supervisor:
          ${supervisedvisitation_nonprofessional_supervisor_name}
          % endif
      - supervisor_phone: |
          % if supervisedvisitation_professional_supervisor:
          ${supervisedvisitation_professional_supervisor_phone} 
          % elif supervisedvisitation and not supervisedvisitation_professional_supervisor:
          ${supervisedvisitation_nonprofessional_supervisor_phone}
          % endif
      - cost_percent_pet: "${supervisedvisitation_cost}"
      - cost_percent_resp: "${100-int(supervisedvisitation_cost)}"
      - cost_percent_otherparent: "${100-int(supervisedvisitation_cost)}"
      - transportation: "${responsibility_for_transportation}"
      - transportation_to: "${transportation_to_visitation}"
      - transportation_to_specify: |
          % if transportation_to_visitation_pet:
          ${pet.name}
          % elif transportation_to_visitation_noncustodialparent:
          ${noncustodialparty.name.text}
          % endif
      - transportation_from: "${transportation_from_visitation}"
      - transportation_from_specify: |
          % if transportation_from_visitation_pet:
          ${pet.name}
          % elif transportation_from_visitation_noncustodialparent:
          ${noncustodialparty.name.text}
          % endif
      - exchangepoint_start: "${responsibility_for_transportation_address_start}"
      - exchangepoint_address_start: "${responsibility_for_transportation_address_start_specify}"
      - exchangepoint_end: "${responsibility_for_transportation_address_end}"
      - exchangepoint_address_end: "${responsibility_for_transportation_address_end_specify}"
      - wait_in_car: "${wait_in_car}"
      - transportation_other: "${responsibility_for_transportation_other}"
      - transportation_other_specify: "${responsibility_for_transportation_other_specify}"
      - travelrestrictions_state: "${travel_with_children_state}"
      - travelrestrictions_counties: "${travel_with_children_county}"
      - travelrestrictions_counties_specify: "${travel_with_children_county_specify}"
      - travelrestrictions_otherplaces: "${travel_with_children_other}"
      - travelrestrictions_otherplaces_specify: "${travel_with_children_other_specify}"
      - travelrestrictions_pet: "${travel_with_children_pet}"
      - abduction_risk: "${child_abduction_risk}"
      - fl341c: "${holiday_schedule}"
      - holiday_schedule: "${holiday_schedule}"
      - additional_custody_provisions: "${additional_physical_custody_provisions}"
      - fl341d: "${additional_physical_custody_provisions}"
      - joint_legal_custody_provisions: "${joint_legal_custody_provisions}"
      - fl341e: "${joint_legal_custody_provisions}"
      - other_custodyvisitation: "${custodyvisitation_otherorders}"
      - other_custodyvisitation_specify: "${custodyvisitation_otherorders_specify}"
      - reasonable_visitation: "${granted_visitation and not scheduled_visitation}"
      - visitation_to_pet: "${custodialparty.name.text == otherparent.name and granted_visitation}"
      - visitation_to_resp: "${custodialparty.name.text == pet.name and (not any(child.otherparent_exists for child in children)) and granted_visitation}"
      - visitation_to_otherparent: "${custodialparty.name.text == pet.name and any(child.otherparent_exists for child in children) and granted_visitation}"
      - alternate_fifth_by_month: "${alternate_fifth_by_month_odd or alternate_fifth_by_month_even}"
      - alternate_fifth: |
      - alternate_fifth_pet: |
      - alternate_fifth_resp: |
      - alternate_fifth_otherparent: |
      - alternate_fifth_by_month_pet: "${noncustodialparty.name.text == pet.name and (alternate_fifth_by_month_odd or alternate_fifth_by_month_even)}"
      - alternate_fifth_by_month_resp: "${noncustodialparty.name.text == resp.name and (alternate_fifth_by_month_odd or alternate_fifth_by_month_even)}"
      - alternate_fifth_by_month_otherparent: "${noncustodialparty.name.text == otherparent.name and (alternate_fifth_by_month_odd or alternate_fifth_by_month_even)}"
      - travelrestrictions: "${travel_with_children_state or travel_with_children_county or travel_with_children_other}"
      - travelrestrictions_resp: "${travel_with_children_otherparent and not any(child.otherparent_exists for child in children)}"
      - travelrestrictions_otherparent: "${travel_with_children_otherparent and any(child.otherparent_exists for child in children)}"
      
  - name: "FL-312 Request for Child Abduction Prevention Orders"
    variable name: form_fl312
    filename: FL-312 Request for Child Abduction Prevention Orders
    pdf template file: FL-312_Request_for_Child_Abduction_Prevention_Orders.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - case_number: "${case_number}"
      - otherparent_name: "${otherparent.name}"
      - petition: Yes
      - response: No
      - rfo: No
      - rfo_response: No
      - pet_name3: "${pet.name}"
      - resp: "${not any(child.otherparent_exists for child in children)}"
      - pet: No
      - otherparent: "${any(child.otherparent_exists for child in children)}"
      - travelrestrictions_county: "${notravel_another_CA_county}"
      - travelrestrictions_county2: "${notravel_another_CA_county}"
      - travelrestrictions_county_specify: "${notravel_another_CA_county_specify}"
      - travelrestrictions_state: "${notravel_another_state}"
      - travelrestrictions_state_specify: "${state_name(notravel_another_state_specify)}"
      - travelrestrictions_state_specify2: "${state_name(notravel_another_state_specify)}"
      - travelrestrictions_country: "${notravel_another_country}"
      - travelrestrictions_country_specify: "${country_name(notravel_another_country_specify)}"
      - travelrestrictions_country_specify2: "${country_name(notravel_another_country_specify)}"
      - travelrestrictions_country_citizen: "${notravel_another_country_citizen}"
      - travelrestrictions_country_emotional_ties: "${notravel_another_country_emotionalties}"
      - emotional_ties_explain: "${notravel_another_country_emotionalties_explanation}"
      - violated_past_order: "${flightrisk_violated_custody_orders}"
      - violated_past_order_explain: "${flightrisk_violated_custody_orders_explain}"
      - lacks_strong_ties: "${flightrisk_no_ties}"
      - lacks_strong_ties_explain: "${flightrisk_no_ties_explain}"
      - sold_home: "${flightrisk_sold_home}"
      - quit_job: "${flightrisk_quit_job}"
      - ended_lease: "${flightrisk_ended_lease}"
      - closed_band_account: "${flightrisk_closed_bank_account}"
      - sold_assets: "${flightrisk_sold_assets}"
      - hidden_documents: "${flightrisk_hidden_documents}"
      - applied_for_passport: "${flightrisk_applied_for_passport}"
      - done_things_other: "${flightrisk_other}"
      - done_things_other_specify: "${flightrisk_other_specify}"
      - history_of_notcooperating: "${flightrisk_history_of_not_cooperating}"
      - history_of_childabuse: "${flightrisk_history_of_child_abuse}"
      - history_of_dv: "${flightrisk_history_of_dv}"
      - history_of_takingchildren: "${flightrisk_history_of_child_abduction}"
      - history_of_explain: "${flightrisk_history_explanation}"
      - criminal_record: "${flightrisk_criminal_record}"
      - criminal_record_explain: "${flightrisk_criminal_record_explain}"
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - case_number2": "${case_number}"
      - otherparent_name2": "${otherparent.name}"
      - otherparent2: "${any(child.otherparent_exists for child in children)}"
      - pet2: No
      - resp2: "${not any(child.otherparent_exists for child in children)}" 
      - supervised_visitation: "${supervisedvisitation}" 
      - fl311: "${supervisedvisitation}" 
      - bond: "${post_a_bond}"
      - bond_amount: "${post_a_bond_amount}"
      - dont_move: "${do_not_move}"
      - travelrestrictions_us: "${notravel_another_country}"
      - travelrestrictions_other: "${travel_with_children_other}"
      - travelrestrictions_ca: "${travel_with_children_state}"
      - travelrestrictions_other_specify: "${travel_with_children_other_specify}"
      - travelrestrictions_state_notify: "${notify_other_state}"
      - turn_in_passports: "${turn_in_passports}"
      - turn_in_passports_and_documents: "${turn_in_passports}"
      - dont_apply_for_passports: "${turn_in_passports}"
      - itinerary: "${provide_travel_docs_itinerary}"
      - copies_of_tickets: "${provide_travel_docs_airline_tickets}"
      - contact_info: "${provide_travel_docs_addresses_and_phone_numbers}"
      - open_ticket: "${provide_travel_docs_open_airline_ticket}"
      - provide_itinerary_other: "${provide_travel_docs_other}"
      - provide_itinerary_other_specify: "${provide_travel_docs_other_specify}"
      - travelrestrictions_country_notify: "${notify_foreign_embassy}"
      - travelrestrictions_country_specify_days: "${notify_foreign_embassy_days}"
      - foreign_order: "${foreign_custody_and_visitation_order}"
      - abductionprevention_other: "${child_abduction_orders_other}"
      - abductionprevention_other_specify: "${child_abduction_orders_other_specify}"
      - date: "${current_datetime()}"
      - history_of_: "${flightrisk_history_of_not_cooperating or flightrisk_history_of_child_abuse or flightrisk_history_of_dv or flightrisk_history_of_child_abduction}"
      - provide_itinerary: "${provide_travel_docs_itinerary or provide_travel_docs_airline_tickets or provide_travel_docs_addresses_and_phone_numbers or provide_travel_docs_open_airline_ticket or provide_travel_docs_other}"
      - travelrestrictions: "${notravel_another_country or travel_with_children_other or travel_with_children_state}"
      - done_things: "${flightrisk_sold_home or flightrisk_quit_job or flightrisk_ended_lease or flightrisk_closed_bank_account or flightrisk_sold_assets or flightrisk_hidden_documents or flightrisk_applied_for_passport or flightrisk_other}"
  
  - name: "FL-341(C), Children's Holiday Schedule Attachment"
    variable name: form_fl341c
    filename: FL-341(C), Children's Holiday Schedule Attachment
    pdf template file: FL-341C_Children_s_Holiday_Schedule_Attachment.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - case_number: "${case_number}"
      - otherparent_name": "${otherparent.name}"
      - rfo: No
      - rfo_response: No
      - response: No
      - petition: Yes
      - foah: No
      - stipulation: No
      - start_time: "${format_time(holiday_start_time)}"
      - end_time: "${format_time(holiday_end_time)}"
      - newyearseve_times: |
          % if newyearseve_times:
          ${format_time(newyearseve_start)} to ${format_time(newyearseve_end)}
          % endif
      - newyearseve_everyyear: |
          % if newyearseve_everyyear == 'newyearseve_everyyear_pet':
          Petitioner
          % elif newyearseve_everyyear == 'newyearseve_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif newyearseve_everyyear == 'newyearseve_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - newyearseve_even: |
          % if newyearseve_alternate_evenodd == 'newyearseve_alternate_even':
          Petitioner
          % elif newyearseve_alternate_evenodd == 'newyearseve_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif newyearseve_alternate_evenodd == 'newyearseve_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - newyearseve_odd: |
          % if newyearseve_alternate_evenodd == 'newyearseve_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif newyearseve_alternate_evenodd == 'newyearseve_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif newyearseve_alternate_evenodd == 'newyearseve_alternate_odd':
          Petitioner
          % endif
          
      - newyearsday_times: |
          % if newyearsday_times:
          ${format_time(newyearsday_start)} to ${format_time(newyearsday_end)}
          % endif
      - newyearsday_everyyear: |
          % if newyearsday_everyyear == 'newyearsday_everyyear_pet':
          Petitioner
          % elif newyearsday_everyyear == 'newyearsday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif newyearsday_everyyear == 'newyearsday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - newyearsday_even: |
          % if newyearsday_alternate_evenodd == 'newyearsday_alternate_even':
          Petitioner
          % elif newyearsday_alternate_evenodd == 'newyearsday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif newyearsday_alternate_evenodd == 'newyearsday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - newyearsday_odd: |
          % if newyearsday_alternate_evenodd == 'newyearsday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif newyearsday_alternate_evenodd == 'newyearsday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif newyearsday_alternate_evenodd == 'newyearsday_alternate_odd':
          Petitioner
          % endif
          
      - mlkday_times: |
          % if mlkday_times:
            ${mlkday_startday} ${format_time(mlkday_starttime)} to ${mlkday_endday} ${format_time(mlkday_endtime)}
          % endif
      - mlkday_everyyear: |
          % if mlkday_everyyear == 'mlkday_everyyear_pet':
          Petitioner
          % elif mlkday_everyyear == 'mlkday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif mlkday_everyyear == 'mlkday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - mlkday_even: |
          % if mlkday_alternate_evenodd == 'mlkday_alternate_even':
          Petitioner
          % elif mlkday_alternate_evenodd == 'mlkday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif mlkday_alternate_evenodd == 'mlkday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - mlkday_odd: |
          % if mlkday_alternate_evenodd == 'mlkday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif mlkday_alternate_evenodd == 'mlkday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif mlkday_alternate_evenodd == 'mlkday_alternate_odd':
          Petitioner
          % endif
          
      - lincolnsbirthday_times: |
          % if feb12_times:
          ${format_time(feb12_start)} to ${format_time(feb12_end)}
          % endif
      - lincolnsbirthday_everyyear: |
          % if feb12_everyyear == 'feb12_everyyear_pet':
          Petitioner
          % elif feb12_everyyear == 'feb12_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif feb12_everyyear == 'feb12_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - lincolnsbirthday_even: |
          % if feb12_alternate_evenodd == 'feb12_alternate_even':
          Petitioner
          % elif feb12_alternate_evenodd == 'feb12_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif feb12_alternate_evenodd == 'feb12_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - lincolnsbirthday_odd: |
          % if feb12_alternate_evenodd == 'feb12_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif feb12_alternate_evenodd == 'feb12_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif feb12_alternate_evenodd == 'feb12_alternate_odd':
          Petitioner
          % endif
          
      - presidentsdayweekend_times: |
          % if presidentsday_times:
          ${presidentsday_startday} ${format_time(presidentsday_starttime)} to ${presidentsday_endday} ${format_time(presidentsday_endtime)}
          % endif
      - presidentsdayweekend_everyyear: |
          % if presidentsday_everyyear == 'presidentsday_everyyear_pet':
          Petitioner
          % elif presidentsday_everyyear == 'presidentsday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsday_everyyear == 'presidentsday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - presidentsdayweekend_even: |
          % if presidentsday_alternate_evenodd == 'presidentsday_alternate_even':
          Petitioner
          % elif presidentsday_alternate_evenodd == 'presidentsday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsday_alternate_evenodd == 'presidentsday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - presidentsdayweekend_odd: |
          % if presidentsday_alternate_evenodd == 'presidentsday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsday_alternate_evenodd == 'presidentsday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif presidentsday_alternate_evenodd == 'presidentsday_alternate_odd':
          Petitioner
          % endif
          
      - presidentsweek1sthalf_times: |
          % if presidentsweek_1sthalf_times:
          ${presidentsweek_1sthalf_startday} ${format_time(presidentsweek_1sthalf_starttime)} to ${presidentsweek_1sthalf_endday}  ${format_time(presidentsweek_1sthalf_endtime)}
          % endif
      - presidentsweek1sthalf_everyyear: |
          % if presidentsweek_1sthalf_everyyear == 'presidentsweek_1sthalf_everyyear_pet':
          Petitioner
          % elif presidentsweek_1sthalf_everyyear == 'presidentsweek_1sthalf_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsweek_1sthalf_everyyear == 'presidentsweek_1sthalf_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - presidentsweek1sthalf_even: |
          % if presidentsweek_1sthalf_alternate_evenodd == 'presidentsweek_1sthalf_alternate_even':
          Petitioner
          % elif presidentsweek_1sthalf_alternate_evenodd == 'presidentsweek_1sthalf_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsweek_1sthalf_alternate_evenodd == 'presidentsweek_1sthalf_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - presidentsweek1sthalf_odd: |
          % if presidentsweek_1sthalf_alternate_evenodd == 'presidentsweek_1sthalf_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsweek_1sthalf_alternate_evenodd == 'presidentsweek_1sthalf_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif presidentsweek_1sthalf_alternate_evenodd == 'presidentsweek_1sthalf_alternate_odd':
          Petitioner
          % endif
          
      - presidentsweek2ndhalf_times: |
          % if presidentsweek_2ndhalf_times:
          ${presidentsweek_2ndhalf_startday} ${format_time(presidentsweek_2ndhalf_starttime)} to ${presidentsweek_2ndhalf_endday} ${format_time(presidentsweek_2ndhalf_endtime)}
          % endif
      - presidentsweek2ndhalf_everyyear: |
          % if presidentsweek_2ndhalf_everyyear == 'presidentsweek_2ndhalf_everyyear_pet':
          Petitioner
          % elif presidentsweek_2ndhalf_everyyear == 'presidentsweek_2ndhalf_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsweek_2ndhalf_everyyear == 'presidentsweek_2ndhalf_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - presidentsweek2ndhalf_even: |
          % if presidentsweek_2ndhalf_alternate_evenodd == 'presidentsweek_2ndhalf_alternate_even':
          Petitioner
          % elif presidentsweek_2ndhalf_alternate_evenodd == 'presidentsweek_2ndhalf_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsweek_2ndhalf_alternate_evenodd == 'presidentsweek_2ndhalf_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - presidentsweek2ndhalf_odd: |
          % if presidentsweek_2ndhalf_alternate_evenodd == 'presidentsweek_2ndhalf_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif presidentsweek_2ndhalf_alternate_evenodd == 'presidentsweek_2ndhalf_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif presidentsweek_2ndhalf_alternate_evenodd == 'presidentsweek_2ndhalf_alternate_odd':
          Petitioner
          % endif
          
      - springbreak1sthalf_times: |
          % if springbreak_1sthalf_times:
          ${springbreak_1sthalf_startday} ${format_time(springbreak_1sthalf_starttime)} to ${springbreak_1sthalf_endday}  ${format_time(springbreak_1sthalf_endtime)}
          % endif
      - springbreak1sthalf_everyyear: |
          % if springbreak_1sthalf_everyyear == 'springbreak_1sthalf_everyyear_pet':
          Petitioner
          % elif springbreak_1sthalf_everyyear == 'springbreak_1sthalf_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif springbreak_1sthalf_everyyear == 'springbreak_1sthalf_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - springbreak1sthalf_even: |
          % if springbreak_1sthalf_alternate_evenodd == 'springbreak_1sthalf_alternate_even':
          Petitioner
          % elif springbreak_1sthalf_alternate_evenodd == 'springbreak_1sthalf_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif springbreak_1sthalf_alternate_evenodd == 'springbreak_1sthalf_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - springbreak1sthalf_odd: |
          % if springbreak_1sthalf_alternate_evenodd == 'springbreak_1sthalf_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif springbreak_1sthalf_alternate_evenodd == 'springbreak_1sthalf_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif springbreak_1sthalf_alternate_evenodd == 'springbreak_1sthalf_alternate_odd':
          Petitioner
          % endif
          
      - springbreak2ndhalf_times: |
          % if springbreak_2ndhalf_times:
          ${springbreak_2ndhalf_startday}  ${format_time(springbreak_2ndhalf_starttime)} to ${springbreak_2ndhalf_endday} ${format_time(springbreak_2ndhalf_endtime)}
          % endif
      - springbreak2ndhalf_everyyear: |
          % if springbreak_2ndhalf_everyyear == 'springbreak_2ndhalf_everyyear_pet':
          Petitioner
          % elif springbreak_2ndhalf_everyyear == 'springbreak_2ndhalf_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif springbreak_2ndhalf_everyyear == 'springbreak_2ndhalf_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - springbreak2ndhalf_even: |
          % if springbreak_2ndhalf_alternate_evenodd == 'springbreak_2ndhalf_alternate_even':
          Petitioner
          % elif springbreak_2ndhalf_alternate_evenodd == 'springbreak_2ndhalf_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif springbreak_2ndhalf_alternate_evenodd == 'springbreak_2ndhalf_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - springbreak2ndhalf_odd: |
          % if springbreak_2ndhalf_alternate_evenodd == 'springbreak_2ndhalf_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif springbreak_2ndhalf_alternate_evenodd == 'springbreak_2ndhalf_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif springbreak_2ndhalf_alternate_evenodd == 'springbreak_2ndhalf_alternate_odd':
          Petitioner
          % endif
          
      - mothersday_times: |
          % if mothersday_times:
          ${format_time(mothersday_start)} to ${format_time(mothersday_end)}
          % endif
      - mothersday_everyyear: |
          % if mothersday_everyyear == 'mothersday_everyyear_pet':
          Petitioner
          % elif mothersday_everyyear == 'mothersday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif mothersday_everyyear == 'mothersday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - mothersday_even: |
          % if mothersday_alternate_evenodd == 'mothersday_alternate_even':
          Petitioner
          % elif mothersday_alternate_evenodd == 'mothersday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif mothersday_alternate_evenodd == 'mothersday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - mothersday_odd: |
          % if mothersday_alternate_evenodd == 'mothersday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif mothersday_alternate_evenodd == 'mothersday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif mothersday_alternate_evenodd == 'mothersday_alternate_odd':
          Petitioner
          % endif
          
      - memorialdayweekend_times: |
          % if memorialday_times:
          ${memorialday_startday} ${format_time(memorialday_starttime)} to ${memorialday_endday} ${format_time(memorialday_endtime)}
          % endif
      - memorialdayweekend_everyyear: |
          % if memorialday_everyyear == 'memorialday_everyyear_pet':
          Petitioner
          % elif memorialday_everyyear == 'memorialday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif memorialday_everyyear == 'memorialday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - memorialdayweekend_even: |
          % if memorialday_alternate_evenodd == 'memorialday_alternate_even':
          Petitioner
          % elif memorialday_alternate_evenodd == 'memorialday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif memorialday_alternate_evenodd == 'memorialday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - memorialdayweekend_odd: |
          % if memorialday_alternate_evenodd == 'memorialday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif memorialday_alternate_evenodd == 'memorialday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif memorialday_alternate_evenodd == 'memorialday_alternate_odd':
          Petitioner
          % endif
          
      - fathersday_times: |
          % if fathersday_times:
          ${format_time(fathersday_start)} to ${format_time(fathersday_end)}
          % endif
      - fathersday_everyyear: |
          % if fathersday_everyyear == 'fathersday_everyyear_pet':
          Petitioner
          % elif fathersday_everyyear == 'fathersday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif fathersday_everyyear == 'fathersday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - fathersday_even: |
          % if fathersday_alternate_evenodd == 'fathersday_alternate_even':
          Petitioner
          % elif fathersday_alternate_evenodd == 'fathersday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif fathersday_alternate_evenodd == 'fathersday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - fathersday_odd: |
          % if fathersday_alternate_evenodd == 'fathersday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif fathersday_alternate_evenodd == 'fathersday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif fathersday_alternate_evenodd == 'fathersday_alternate_odd':
          Petitioner
          % endif
      
      - independenceday_times: |
          % if july4th_times:
          ${format_time(july4th_start)} to ${format_time(july4th_end)}
          % endif
      - independenceday_everyyear: |
          % if july4th_everyyear == 'july4th_everyyear_pet':
          Petitioner
          % elif july4th_everyyear == 'july4th_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif july4th_everyyear == 'july4th_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - independenceday_even: |
          % if july4th_alternate_evenodd == 'july4th_alternate_even':
          Petitioner
          % elif july4th_alternate_evenodd == 'july4th_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif july4th_alternate_evenodd == 'july4th_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - independenceday_odd: |
          % if july4th_alternate_evenodd == 'july4th_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif july4th_alternate_evenodd == 'july4th_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif july4th_alternate_evenodd == 'july4th_alternate_odd':
          Petitioner
          % endif
          
      - summerbreak_everyyear: |
          % if summerbreak_everyyear == 'summerbreak_everyyear_pet':
          Petitioner
          % elif summerbreak_everyyear == 'summerbreak_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif summerbreak_everyyear == 'summerbreak_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - summerbreak_even: |
          % if summerbreak_alternate_evenodd == 'summerbreak_alternate_even':
          Petitioner
          % elif summerbreak_alternate_evenodd == 'summerbreak_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif summerbreak_alternate_evenodd == 'summerbreak_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - summerbreak_odd: |
          % if summerbreak_alternate_evenodd == 'summerbreak_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif summerbreak_alternate_evenodd == 'summerbreak_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif summerbreak_alternate_evenodd == 'summerbreak_alternate_odd':
          Petitioner
          % endif
      
      - labordayweekend_times: |
          % if laborday_times:
          ${laborday_startday} ${format_time(laborday_starttime)} to ${laborday_endday} ${format_time(laborday_endtime)}
          % endif
      - laborday_everyyear: |
          % if laborday_everyyear == 'laborday_everyyear_pet':
          Petitioner
          % elif laborday_everyyear == 'laborday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif laborday_everyyear == 'laborday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - laborday_even: |
          % if laborday_alternate_evenodd == 'laborday_alternate_even':
          Petitioner
          % elif laborday_alternate_evenodd == 'laborday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif laborday_alternate_evenodd == 'laborday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - laborday_odd: |
          % if laborday_alternate_evenodd == 'laborday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif laborday_alternate_evenodd == 'laborday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif laborday_alternate_evenodd == 'laborday_alternate_odd':
          Petitioner
          % endif
      
      - columbusday_times: |
          % if columbusday_times:
          ${columbusday_startday} ${format_time(columbusday_starttime)} to ${columbusday_endday} ${format_time(columbusday_endtime)}
          % endif
      - columbusday_everyyear: |
          % if columbusday_everyyear == 'columbusday_everyyear_pet':
          Petitioner
          % elif columbusday_everyyear == 'columbusday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif columbusday_everyyear == 'columbusday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - columbusday_even: |
          % if columbusday_alternate_evenodd == 'columbusday_alternate_even':
          Petitioner
          % elif columbusday_alternate_evenodd == 'columbusday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif columbusday_alternate_evenodd == 'columbusday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - columbusday_odd: |
          % if columbusday_alternate_evenodd == 'columbusday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif columbusday_alternate_evenodd == 'columbusday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif columbusday_alternate_evenodd == 'columbusday_alternate_odd':
          Petitioner
          % endif
      
      - halloween_times: |
          % if halloween_times:
          ${format_time(halloween_start)} to ${format_time(halloween_end)}
          % endif
      - halloween_everyyear: |
          % if halloween_everyyear == 'halloween_everyyear_pet':
          Petitioner
          % elif halloween_everyyear == 'halloween_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif halloween_everyyear == 'halloween_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - halloween_even: |
          % if halloween_alternate_evenodd == 'halloween_alternate_even':
          Petitioner
          % elif halloween_alternate_evenodd == 'halloween_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif halloween_alternate_evenodd == 'halloween_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - halloween_odd: |
          % if halloween_alternate_evenodd == 'halloween_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif halloween_alternate_evenodd == 'halloween_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif halloween_alternate_evenodd == 'halloween_alternate_odd':
          Petitioner
          % endif
      
      - veteransday_times: |
          % if veteransday_times:
          ${format_time(veteransday_start)} to ${format_time(veteransday_end)}
          % endif
      - veteransday_everyyear: |
          % if veteransday_everyyear == 'veteransday_everyyear_pet':
          Petitioner
          % elif veteransday_everyyear == 'veteransday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif veteransday_everyyear == 'veteransday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - veteransday_even: |
          % if veteransday_alternate_evenodd == 'veteransday_alternate_even':
          Petitioner
          % elif veteransday_alternate_evenodd == 'veteransday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif veteransday_alternate_evenodd == 'veteransday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - veteransday_odd: |
          % if veteransday_alternate_evenodd == 'veteransday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif veteransday_alternate_evenodd == 'veteransday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif veteransday_alternate_evenodd == 'veteransday_alternate_odd':
          Petitioner
          % endif
      
      - thanksgivingday_times: |
          % if thanksgiving_times:
          ${format_time(thanksgiving_start)} to ${format_time(thanksgiving_end)}
          % endif
      - thanksgivingday_everyyear: |
          % if thanksgiving_everyyear == 'thanksgiving_everyyear_pet':
          Petitioner
          % elif thanksgiving_everyyear == 'thanksgiving_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif thanksgiving_everyyear == 'thanksgiving_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - thanksgivingday_even: |
          % if thanksgiving_alternate_evenodd == 'thanksgiving_alternate_even':
          Petitioner
          % elif thanksgiving_alternate_evenodd == 'thanksgiving_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif thanksgiving_alternate_evenodd == 'thanksgiving_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - thanksgivingday_odd: |
          % if thanksgiving_alternate_evenodd == 'thanksgiving_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif thanksgiving_alternate_evenodd == 'thanksgiving_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif thanksgiving_alternate_evenodd == 'thanksgiving_alternate_odd':
          Petitioner
          % endif
      
      - thanksgivingweekend_times: |
          % if thanksgivingweekend_times:
          ${thanksgivingweekend_startday}  ${format_time(thanksgivingweekend_starttime)} to ${thanksgivingweekend_endday} ${format_time(thanksgivingweekend_endtime)}
          % endif
      - thanksgivingweekend_everyyear: |
          % if thanksgivingweekend_everyyear == 'thanksgivingweekend_everyyear_pet':
          Petitioner
          % elif thanksgivingweekend_everyyear == 'thanksgivingweekend_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif thanksgivingweekend_everyyear == 'thanksgivingweekend_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - thanksgivingweekend_even: |
          % if thanksgivingweekend_alternate_evenodd == 'thanksgivingweekend_alternate_even':
          Petitioner
          % elif thanksgivingweekend_alternate_evenodd == 'thanksgivingweekend_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif thanksgivingweekend_alternate_evenodd == 'thanksgivingweekend_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - thanksgivingweekend_odd: |
          % if thanksgivingweekend_alternate_evenodd == 'thanksgivingweekend_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif thanksgivingweekend_alternate_evenodd == 'thanksgivingweekend_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif thanksgivingweekend_alternate_evenodd == 'thanksgivingweekend_alternate_odd':
          Petitioner
          % endif
      
      - winterbreak_times: |
          % if winterbreak_times:
          ${winterbreak_startday} ${format_time(winterbreak_starttime)} to ${winterbreak_endday} ${format_time(winterbreak_endtime)}
          % endif
      - winterbreak_everyyear: |
          % if winterbreak_everyyear == 'winterbreak_everyyear_pet':
          Petitioner
          % elif winterbreak_everyyear == 'winterbreak_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif winterbreak_everyyear == 'winterbreak_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - winterbreak_even: |
          % if winterbreak_alternate_evenodd == 'winterbreak_alternate_even':
          Petitioner
          % elif winterbreak_alternate_evenodd == 'winterbreak_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif winterbreak_alternate_evenodd == 'winterbreak_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - winterbreak_odd: |
          % if winterbreak_alternate_evenodd == 'winterbreak_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif winterbreak_alternate_evenodd == 'winterbreak_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif winterbreak_alternate_evenodd == 'winterbreak_alternate_odd':
          Petitioner
          % endif
      
      - child1_birthday_date: "${child1_birthday_date}"
      - child1_birthday_times: |
          % if child1_birthday_times:
          ${format_time(child1_birthday_start)} to ${format_time(child1_birthday_end)}
          % endif
      - child1_birthday_everyyear: |
          % if child1_birthday_everyyear == 'child1_birthday_everyyear_pet':
          Petitioner
          % elif child1_birthday_everyyear == 'child1_birthday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child1_birthday_everyyear == 'child1_birthday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - child1_birthday_even: |
          % if child1_birthday_alternate_evenodd == 'child1_birthday_alternate_even':
          Petitioner
          % elif child1_birthday_alternate_evenodd == 'child1_birthday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child1_birthday_alternate_evenodd == 'child1_birthday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - child1_birthday_odd: |
          % if child1_birthday_alternate_evenodd == 'child1_birthday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child1_birthday_alternate_evenodd == 'child1_birthday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif child1_birthday_alternate_evenodd == 'child1_birthday_alternate_odd':
          Petitioner
          % endif
      
      - child2_birthday_date: "${child2_birthday_date}"
      - child2_birthday_times: |
          % if child2_birthday_times:
          ${format_time(child2_birthday_start)} to ${format_time(child2_birthday_end)}
          % endif
      - child2_birthday_everyyear: |
          % if child2_birthday_everyyear == 'child2_birthday_everyyear_pet':
          Petitioner
          % elif child2_birthday_everyyear == 'child2_birthday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child2_birthday_everyyear == 'child2_birthday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - child2_birthday_even: |
          % if child2_birthday_alternate_evenodd == 'child2_birthday_alternate_even':
          Petitioner
          % elif child2_birthday_alternate_evenodd == 'child2_birthday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child2_birthday_alternate_evenodd == 'child2_birthday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - child2_birthday_odd: |
          % if child2_birthday_alternate_evenodd == 'child2_birthday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child2_birthday_alternate_evenodd == 'child2_birthday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif child2_birthday_alternate_evenodd == 'child2_birthday_alternate_odd':
          Petitioner
          % endif
      
      - child3_birthday_date: "${child3_birthday_date}"
      - child3_birthday_times: |
          % if child3_birthday_times:
          ${format_time(child3_birthday_start)} to ${format_time(child3_birthday_end)}
          % endif
      - child3_birthday_everyyear: |
          % if child3_birthday_everyyear == 'child3_birthday_everyyear_pet':
          Petitioner
          % elif child3_birthday_everyyear == 'child3_birthday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child3_birthday_everyyear == 'child3_birthday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - child3_birthday_even: |
          % if child3_birthday_alternate_evenodd == 'child3_birthday_alternate_even':
          Petitioner
          % elif child3_birthday_alternate_evenodd == 'child3_birthday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child3_birthday_alternate_evenodd == 'child3_birthday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - child3_birthday_odd: |
          % if child3_birthday_alternate_evenodd == 'child3_birthday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif child3_birthday_alternate_evenodd == 'child3_birthday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif child3_birthday_alternate_evenodd == 'child3_birthday_alternate_odd':
          Petitioner
          % endif     
      
      - moms_birthday_date: "${moms_birthday_date}"
      - moms_birthday_times: |
          % if moms_birthday_times:
          ${format_time(moms_birthday_start)} to ${format_time(moms_birthday_end)}
          % endif
      - moms_birthday_everyyear: |
          % if moms_birthday_everyyear == 'moms_birthday_everyyear_pet':
          Petitioner
          % elif moms_birthday_everyyear == 'moms_birthday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif moms_birthday_everyyear == 'moms_birthday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - moms_birthday_even: |
          % if moms_birthday_alternate_evenodd == 'moms_birthday_alternate_even':
          Petitioner
          % elif moms_birthday_alternate_evenodd == 'moms_birthday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif moms_birthday_alternate_evenodd == 'moms_birthday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - moms_birthday_odd: |
          % if moms_birthday_alternate_evenodd == 'moms_birthday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif moms_birthday_alternate_evenodd == 'moms_birthday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif moms_birthday_alternate_evenodd == 'moms_birthday_alternate_odd':
          Petitioner
          % endif
      
      - dads_birthday_date: "${dads_birthday_date}"
      - dads_birthday_times: |
          % if dads_birthday_times:
          ${format_time(dads_birthday_start)} to ${format_time(dads_birthday_end)}
          % endif
      - dads_birthday_everyyear: |
          % if dads_birthday_everyyear == 'dads_birthday_everyyear_pet':
          Petitioner
          % elif dads_birthday_everyyear == 'dads_birthday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif dads_birthday_everyyear == 'dads_birthday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - dads_birthday_even: |
          % if dads_birthday_alternate_evenodd == 'dads_birthday_alternate_even':
          Petitioner
          % elif dads_birthday_alternate_evenodd == 'dads_birthday_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif dads_birthday_alternate_evenodd == 'dads_birthday_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - dads_birthday_odd: |
          % if dads_birthday_alternate_evenodd == 'dads_birthday_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif dads_birthday_alternate_evenodd == 'dads_birthday_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif dads_birthday_alternate_evenodd == 'dads_birthday_alternate_odd':
          Petitioner
          % endif
      
      - otherparent_birthday_date: "${otherparent_birthday_date}"
      - otherparent_birthday_times: |
          % if otherparent_birthday_times:
          ${format_time(otherparent_birthday_start)} to ${format_time(otherparent_birthday_end)}
          % endif
      - otherparent_birthday_everyyear: |
          % if otherparent_birthday_everyyear == 'otherparent_birthday_everyyear_pet':
          Petitioner
          % elif otherparent_birthday_everyyear == 'otherparent_birthday_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Other Parent
          % elif otherparent_birthday_everyyear == 'otherparent_birthday_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      
      - breaks_yearroundschools_times: |
          % if breaks_yearroundschools_times:
          ${breaks_yearroundschools_startday} ${format_time(breaks_yearroundschools_starttime)} to ${breaks_yearroundschools_endday} ${format_time(breaks_yearroundschools_endtime)}
          % endif
      - breaks_yearroundschools_everyyear: |
          % if breaks_yearroundschools_everyyear == 'breaks_yearroundschools_everyyear_pet':
          Petitioner
          % elif breaks_yearroundschools_everyyear == 'breaks_yearroundschools_everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif breaks_yearroundschools_everyyear == 'breaks_yearroundschools_everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - breaks_yearroundschools_even: |
          % if breaks_yearroundschools_alternate_evenodd == 'breaks_yearroundschools_alternate_even':
          Petitioner
          % elif breaks_yearroundschools_alternate_evenodd == 'breaks_yearroundschools_alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif breaks_yearroundschools_alternate_evenodd == 'breaks_yearroundschools_alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - breaks_yearroundschools_odd: |
          % if breaks_yearroundschools_alternate_evenodd == 'breaks_yearroundschools_alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif breaks_yearroundschools_alternate_evenodd == 'breaks_yearroundschools_alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif breaks_yearroundschools_alternate_evenodd == 'breaks_yearroundschools_alternate_odd':
          Petitioner
          % endif
      
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - case_number2: "${case_number}"
      - otherparent_name: "${otherparent.name}"
      - additional_holiday_starttime: "${format_time(holiday_start_time)}"
      - additional_holiday_endtime: "${format_time(holiday_end_time)}"
      
      - other0: "${additionalholidays.item(0).name.text}"
      - other0_times: |
          % if additionalholidays.item(0).times:
          ${additionalholidays.item(0).startdate} ${additionalholidays.item(0).startday} ${format_time(additionalholidays.item(0).starttime)} to ${additionalholidays.item(0).enddate} ${additionalholidays.item(0).endday} ${format_time(additionalholidays.item(0).endtime)}
          % endif
      - other0_everyyear: |
          % if additionalholidays.item(0).everyyear == 'additionalholidays.item(0).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(0).everyyear == 'additionalholidays.item(0).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(0).everyyear == 'additionalholidays.item(0).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other0_even: |
          % if additionalholidays.item(0).alternate_evenodd == 'additionalholidays.item(0).alternate_even':
          Petitioner
          % elif additionalholidays.item(0).alternate_evenodd == 'additionalholidays.item(0).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(0).alternate_evenodd == 'additionalholidays.item(0).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other0_odd: |
          % if additionalholidays.item(0).alternate_evenodd == 'additionalholidays.item(0).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(0).alternate_evenodd == 'additionalholidays.item(0).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(0).alternate_evenodd == 'additionalholidays.item(0).alternate_odd':
          Petitioner
          % endif
      
      - other1: "${additionalholidays.item(1).name.text}"
      - other1_times: |
          % if additionalholidays.item(1).times:
          ${additionalholidays.item(1).startdate} ${additionalholidays.item(1).startday} ${format_time(additionalholidays.item(1).starttime)} to ${additionalholidays.item(1).enddate} ${additionalholidays.item(1).endday} ${format_time(additionalholidays.item(1).endtime)}
          % endif
      - other1_everyyear: |
          % if additionalholidays.item(1).everyyear == 'additionalholidays.item(1).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(1).everyyear == 'additionalholidays.item(1).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(1).everyyear == 'additionalholidays.item(1).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other1_even: |
          % if additionalholidays.item(1).alternate_evenodd == 'additionalholidays.item(1).alternate_even':
          Petitioner
          % elif additionalholidays.item(1).alternate_evenodd == 'additionalholidays.item(1).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(1).alternate_evenodd == 'additionalholidays.item(1).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other1_odd: |
          % if additionalholidays.item(1).alternate_evenodd == 'additionalholidays.item(1).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(1).alternate_evenodd == 'additionalholidays.item(1).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(1).alternate_evenodd == 'additionalholidays.item(1).alternate_odd':
          Petitioner
          % endif
      
      - other2: "${additionalholidays.item(2).name.text}"
      - other2_times: |
          % if additionalholidays.item(2).times:
          ${additionalholidays.item(2).startdate} ${additionalholidays.item(2).startday} ${format_time(additionalholidays.item(2).starttime)} to ${additionalholidays.item(2).enddate} ${additionalholidays.item(2).endday} ${format_time(additionalholidays.item(2).endtime)}
          % endif
      - other2_everyyear: |
          % if additionalholidays.item(2).everyyear == 'additionalholidays.item(2).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(2).everyyear == 'additionalholidays.item(2).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(2).everyyear == 'additionalholidays.item(2).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other2_even: |
          % if additionalholidays.item(2).alternate_evenodd == 'additionalholidays.item(2).alternate_even':
          Petitioner
          % elif additionalholidays.item(2).alternate_evenodd == 'additionalholidays.item(2).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(2).alternate_evenodd == 'additionalholidays.item(2).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other2_odd: |
          % if additionalholidays.item(2).alternate_evenodd == 'additionalholidays.item(2).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(2).alternate_evenodd == 'additionalholidays.item(2).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(2).alternate_evenodd == 'additionalholidays.item(2).alternate_odd':
          Petitioner
          % endif
      
      - other3: "${additionalholidays.item(3).name.text}"
      - other3_times: |
          % if additionalholidays.item(3).times:
          ${additionalholidays.item(3).startdate} ${additionalholidays.item(3).startday} ${format_time(additionalholidays.item(3).starttime)} to ${additionalholidays.item(3).enddate} ${additionalholidays.item(3).endday} ${format_time(additionalholidays.item(3).endtime)}
          % endif
      - other3_everyyear: |
          % if additionalholidays.item(3).everyyear == 'additionalholidays.item(3).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(3).everyyear == 'additionalholidays.item(3).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(3).everyyear == 'additionalholidays.item(3).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other3_even: |
          % if additionalholidays.item(3).alternate_evenodd == 'additionalholidays.item(3).alternate_even':
          Petitioner
          % elif additionalholidays.item(3).alternate_evenodd == 'additionalholidays.item(3).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(3).alternate_evenodd == 'additionalholidays.item(3).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other3_odd: |
          % if additionalholidays.item(3).alternate_evenodd == 'additionalholidays.item(3).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(3).alternate_evenodd == 'additionalholidays.item(3).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(3).alternate_evenodd == 'additionalholidays.item(3).alternate_odd':
          Petitioner
          % endif
      
      - other4: "${additionalholidays.item(4).name.text}"
      - other4_times: |
          % if additionalholidays.item(4).times:
          ${additionalholidays.item(4).startdate} ${additionalholidays.item(4).startday} ${format_time(additionalholidays.item(4).starttime)} to ${additionalholidays.item(4).enddate} ${additionalholidays.item(4).endday} ${format_time(additionalholidays.item(4).endtime)}
          % endif
      - other4_everyyear: |
          % if additionalholidays.item(4).everyyear == 'additionalholidays.item(4).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(4).everyyear == 'additionalholidays.item(4).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(4).everyyear == 'additionalholidays.item(4).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other4_even: |
          % if additionalholidays.item(4).alternate_evenodd == 'additionalholidays.item(4).alternate_even':
          Petitioner
          % elif additionalholidays.item(4).alternate_evenodd == 'additionalholidays.item(4).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(4).alternate_evenodd == 'additionalholidays.item(4).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other4_odd: |
          % if additionalholidays.item(4).alternate_evenodd == 'additionalholidays.item(4).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(4).alternate_evenodd == 'additionalholidays.item(4).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(4).alternate_evenodd == 'additionalholidays.item(4).alternate_odd':
          Petitioner
          % endif
      
      - other5: "${additionalholidays.item(5).name.text}"
      - other5_times: |
          % if additionalholidays.item(5).times:
          ${additionalholidays.item(5).startdate} ${additionalholidays.item(5).startday} ${format_time(additionalholidays.item(5).starttime)} to ${additionalholidays.item(5).enddate} ${additionalholidays.item(5).endday} ${format_time(additionalholidays.item(5).endtime)}
          % endif
      - other5_everyyear: |
          % if additionalholidays.item(5).everyyear == 'additionalholidays.item(5).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(5).everyyear == 'additionalholidays.item(5).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(5).everyyear == 'additionalholidays.item(5).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other5_even: |
          % if additionalholidays.item(5).alternate_evenodd == 'additionalholidays.item(5).alternate_even':
          Petitioner
          % elif additionalholidays.item(5).alternate_evenodd == 'additionalholidays.item(5).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(5).alternate_evenodd == 'additionalholidays.item(5).alternate_odd' and any(child.otherparent_exists for child in children):
           Other Parent
          % endif
      - other5_odd: |
          % if additionalholidays.item(5).alternate_evenodd == 'additionalholidays.item(5).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(5).alternate_evenodd == 'additionalholidays.item(5).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(5).alternate_evenodd == 'additionalholidays.item(5).alternate_odd':
          Petitioner
          % endif
      
      - other6: "${additionalholidays.item(6).name.text}"
      - other6_times: |
          % if additionalholidays.item(6).times:
          ${additionalholidays.item(6).startdate} ${additionalholidays.item(6).startday} ${format_time(additionalholidays.item(6).starttime)} to ${additionalholidays.item(6).enddate} ${additionalholidays.item(6).endday} ${format_time(additionalholidays.item(6).endtime)}
          % endif
      - other6_everyyear: |
          % if additionalholidays.item(6).everyyear == 'additionalholidays.item(6).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(6).everyyear == 'additionalholidays.item(6).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(6).everyyear == 'additionalholidays.item(6).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other6_even: |
          % if additionalholidays.item(6).alternate_evenodd == 'additionalholidays.item(6).alternate_even':
          Petitioner
          % elif additionalholidays.item(6).alternate_evenodd == 'additionalholidays.item(6).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(6).alternate_evenodd == 'additionalholidays.item(6).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other6_odd: |
          % if additionalholidays.item(6).alternate_evenodd == 'additionalholidays.item(6).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(6).alternate_evenodd == 'additionalholidays.item(6).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(6).alternate_evenodd == 'additionalholidays.item(6).alternate_odd':
          Petitioner
          % endif
      
      - other7: "${additionalholidays.item(7).name.text}"
      - other7_times: |
          % if additionalholidays.item(7).times:
          ${additionalholidays.item(7).startdate} ${additionalholidays.item(7).startday} ${format_time(additionalholidays.item(7).starttime)} to ${additionalholidays.item(7).enddate} ${additionalholidays.item(7).endday} ${format_time(additionalholidays.item(7).endtime)}
          % endif
      - other7_everyyear: |
          % if additionalholidays.item(7).everyyear == 'additionalholidays.item(7).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(7).everyyear == 'additionalholidays.item(7).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(7).everyyear == 'additionalholidays.item(7).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other7_even: |
          % if additionalholidays.item(7).alternate_evenodd == 'additionalholidays.item(7).alternate_even':
          Petitioner
          % elif additionalholidays.item(7).alternate_evenodd == 'additionalholidays.item(7).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(7).alternate_evenodd == 'additionalholidays.item(7).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other7_odd: |
          % if additionalholidays.item(7).alternate_evenodd == 'additionalholidays.item(7).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(7).alternate_evenodd == 'additionalholidays.item(7).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(7).alternate_evenodd == 'additionalholidays.item(7).alternate_odd':
          Petitioner
          % endif
      
      - other8: "${additionalholidays.item(8).name.text}"
      - other8_times: |
          % if additionalholidays.item(8).times:
          ${additionalholidays.item(8).startdate} ${additionalholidays.item(8).startday} ${format_time(additionalholidays.item(8).starttime)} to ${additionalholidays.item(8).enddate} ${additionalholidays.item(8).endday} ${format_time(additionalholidays.item(8).endtime)}
          % endif
      - other8_everyyear: |
          % if additionalholidays.item(8).everyyear == 'additionalholidays.item(8).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(8).everyyear == 'additionalholidays.item(8).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(8).everyyear == 'additionalholidays.item(8).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other8_even: |
          % if additionalholidays.item(8).alternate_evenodd == 'additionalholidays.item(8).alternate_even':
          Petitioner
          % elif additionalholidays.item(8).alternate_evenodd == 'additionalholidays.item(8).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(8).alternate_evenodd == 'additionalholidays.item(8).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other8_odd: |
          % if additionalholidays.item(8).alternate_evenodd == 'additionalholidays.item(8).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(8).alternate_evenodd == 'additionalholidays.item(8).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(8).alternate_evenodd == 'additionalholidays.item(8).alternate_odd':
          Petitioner
          % endif
      
      - other9: "${additionalholidays.item(9).name.text}"
      - other9_times: |
          % if additionalholidays.item(9).times:
          ${additionalholidays.item(9).startdate} ${additionalholidays.item(9).startday} ${format_time(additionalholidays.item(9).starttime)} to ${additionalholidays.item(9).enddate} ${additionalholidays.item(9).endday} ${format_time(additionalholidays.item(9).endtime)}
          % endif
      - other9_everyyear: |
          % if additionalholidays.item(9).everyyear == 'additionalholidays.item(9).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(9).everyyear == 'additionalholidays.item(9).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(9).everyyear == 'additionalholidays.item(9).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other9_even: |
          % if additionalholidays.item(9).alternate_evenodd == 'additionalholidays.item(9).alternate_even':
          Petitioner
          % elif additionalholidays.item(9).alternate_evenodd == 'additionalholidays.item(9).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(9).alternate_evenodd == 'additionalholidays.item(9).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other9_odd: |
          % if additionalholidays.item(9).alternate_evenodd == 'additionalholidays.item(9).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(9).alternate_evenodd == 'additionalholidays.item(9).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(9).alternate_evenodd == 'additionalholidays.item(9).alternate_odd':
          Petitioner
          % endif
      
      - other10: "${additionalholidays.item(10).name.text}"
      - other10_times: |
          % if additionalholidays.item(10).times:
          ${additionalholidays.item(10).startdate} ${additionalholidays.item(10).startday} ${format_time(additionalholidays.item(10).starttime)} to ${additionalholidays.item(10).enddate} ${additionalholidays.item(10).endday} ${format_time(additionalholidays.item(10).endtime)}
          % endif
      - other10_everyyear: |
          % if additionalholidays.item(10).everyyear == 'additionalholidays.item(10).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(10).everyyear == 'additionalholidays.item(10).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(10).everyyear == 'additionalholidays.item(10).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other10_even: |
          % if additionalholidays.item(10).alternate_evenodd == 'additionalholidays.item(10).alternate_even':
          Petitioner
          % elif additionalholidays.item(10).alternate_evenodd == 'additionalholidays.item(10).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(10).alternate_evenodd == 'additionalholidays.item(10).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other10_odd: |
          % if additionalholidays.item(10).alternate_evenodd == 'additionalholidays.item(10).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(10).alternate_evenodd == 'additionalholidays.item(10).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(10).alternate_evenodd == 'additionalholidays.item(10).alternate_odd':
          Petitioner
          % endif
      
      - other11: "${additionalholidays.item(11).name.text}"
      - other11_times: |
          % if additionalholidays.item(11).times:
          ${additionalholidays.item(11).startdate} ${additionalholidays.item(11).startday} ${format_time(additionalholidays.item(11).starttime)} to ${additionalholidays.item(11).enddate} ${additionalholidays.item(11).endday} ${format_time(additionalholidays.item(11).endtime)}
          % endif
      - other11_everyyear: |
          % if additionalholidays.item(11).everyyear == 'additionalholidays.item(11).everyyear_pet':
          Petitioner
          % elif additionalholidays.item(11).everyyear == 'additionalholidays.item(11).everyyear_otherparent' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(11).everyyear == 'additionalholidays.item(11).everyyear_otherparent' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other11_even: |
          % if additionalholidays.item(11).alternate_evenodd == 'additionalholidays.item(11).alternate_even':
          Petitioner
          % elif additionalholidays.item(11).alternate_evenodd == 'additionalholidays.item(11).alternate_odd' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(11).alternate_evenodd == 'additionalholidays.item(11).alternate_odd' and any(child.otherparent_exists for child in children):
          Other Parent
          % endif
      - other11_odd: |
          % if additionalholidays.item(11).alternate_evenodd == 'additionalholidays.item(11).alternate_even' and not any(child.otherparent_exists for child in children):
          Respondent
          % elif additionalholidays.item(11).alternate_evenodd == 'additionalholidays.item(11).alternate_even' and any(child.otherparent_exists for child in children):
          Other Parent
          % elif additionalholidays.item(11).alternate_evenodd == 'additionalholidays.item(11).alternate_odd':
          Petitioner
          % endif
#### start of vacations fields       
      - three_day_weekend: "${threeday_weekends}"
      - other_holiday_orders: "${other_holiday_orders}"
      - other_holiday_orders_specify: "${other_holiday_orders_explain}"
      - otherparent: "${any(child.otherparent_exists for child in children) and vacations_otherparent}"
      - pet: "${vacations_pet}"
      - resp: "${(not any(child.otherparent_exists for child in children)) and vacations_otherparent}"
      - days: "${vacations}"
      - vacation_days: "${vacation_length}"
      - vacations_per_year: "${vacation_number}"
      - notify_days: "${vacation_notification_length}"
      - respond_within: "${vacation_notification_problem}"
      - notify_days2: "${vacation_notification_problem_specify}"
      - if_parties_cant_agree: "${vacation_confer or vacation_even or vacation_odd or vacation_other_specify}"
      - confer: "${vacation_confer}"
      - even: "${vacation_even}"
      - even_pet: "${vacation_even_party == 'vacation_even_pet'}"
      - even_resp: "${(not any(child.otherparent_exists for child in children)) and vacation_even_party == 'vacation_even_otherparent'}"
      - even_otherparent: "${any(child.otherparent_exists for child in children) and vacation_even_party == 'vacation_even_otherparent'}"
      - odd: "${vacation_odd}"
      - odd_resp: "${(not any(child.otherparent_exists for child in children)) and vacation_odd_party == 'vacation_odd_otherparent'}"
      - odd_pet: "${vacation_odd_party == 'vacation_odd_pet'}"
      - odd_otherparent: "${any(child.otherparent_exists for child in children) and vacation_odd_party == 'vacation_odd_otherparent'}"
      - if_parties_cant_agree_other: "${vacation_other}"
      - if_parties_cant_agree_other_specify: "${vacation_other_specify}"
      - vacation_outside_ca: "${vacation_outside_ca}"
      - travelrestrictions_us: "${vacation_outside_us_permission}"
      - travelrestrictions_ca: "${vacation_outside_ca_permission}"
      - travelrestrictions: "${vacation_outside_ca_permission or vacation_outside_us_permission}"
      - other_orders: "${holidayvacation_other}"
      - other_orders_specify: "${holidayvacation_other_specify}"
  
  - name: "FL-341(D), Additional Provisions—Physical Custody Attachment"
    variable name: form_fl341d
    filename: FL-341(D), Additional Provisions—Physical Custody Attachment
    pdf template file: FL-341D_Additional_Provisions_-_Physical_Custody_Attachment.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - case_number: "${case_number}"
      - otherparent_name: "${otherparent.name}"
      - petition: Yes
      - response: No
      - rfo: No
      - rfo_response: No
      - foah: No
      - stipulation: No     
      - otherparent: "${any(child.otherparent_exists for child in children) and add_physicalcustody_otherparent}"
      - resp: "${(not any(child.otherparent_exists for child in children)) and add_physicalcustody_otherparent}"
      - pet: "${add_physicalcustody_pet}"
      - addresses_resp: "${[address_mailing or address_work or address_residence or address_email or phonenumber_home or phonenumber_cell or phonenumber_work or phonenumber_childrens_schools] and (not any(child.otherparent_exists for child in children)) and add_physicalcustody_otherparent}"
      - addresses_pet: "${add_physicalcustody_pet}"
      - addresses_otherparent: "${[address_mailing or address_work or address_residence or address_email or phonenumber_home or phonenumber_cell or phonenumber_work or phonenumber_childrens_schools] and any(child.otherparent_exists for child in children) and add_physicalcustody_otherparent}"
      - addresses: "${address_mailing or address_work or address_residence or address_email or phonenumber_home or phonenumber_cell or phonenumber_work or phonenumber_childrens_schools}"
      - mailing_address: "${address_mailing}"
      - residence_address: "${address_residence}"
      - email_address: "${address_email}"
      - work_address: "${address_work}"
      - cell_phone: "${phonenumber_cell}"
      - schools_phone: "${phonenumber_childrens_schools}"
      - work_phone: "${phonenumber_work}"
      - home_phone: "${phonenumber_home}"
      - move_notification: "${ notify_proposed_move_of_children}"
      - move_notification_days: "${ notify_proposed_move_of_children_days}"
      - childcare: "${childcare_supervision}"
      - appropriate_supervision: "${childcare_supervision}"
      - childcare_providers: "${childcare_provider_contact}"
      - first_option_of_childcare: "${childcare_right_of_first_option}"
      - first_option_notify_hours: "${childcare_right_of_first_option_hours}"
      - canceledvisitation: "${canceled_visitation_late}"
      - canceledvisitation_waiting: "${canceled_visitation_late_minutes}"
      - canceledvisitation_notify_minutes: "${canceled_visitation_late_minutes}"
      - canceledvisitation_notify: "${canceled_visitation_notification}"
      - canceledvisitation_notify_asap: "${canceled_visitation_notification}"
      - canceledvisitation_ill: "${canceled_visitation_illness == 'asap' or canceled_visitation_illness == 'doctors_excuse'}"
      - canceledvisitation_ill_asap: "${canceled_visitation_illness == 'asap'}"
      - canceledvisitation_ill_doctorsexcuse: "${canceled_visitation_illness == 'doctors_excuse'}"
      - phone_contact: "${telephoneaccess_children or telephoneaccess_parents}"
      - phoneaccess_children_to_parents: "${telephoneaccess_parents}"
      - phoneaccess_parents_to_children: "${telephoneaccess_children}"
      - scheduled_phone_contact: "${scheduled_telephone_contact}"
      - scheduled_phone_contact_specify: "${scheduled_telephone_contact_specify}"
      - no_interference: "${no_interference}"
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - case_number2: "${case_number}"
      - otherparent_name2: "${otherparent.name}"
      - no_negative_comments: "${no_negative_comments}"
      - no_discussing_proceedings: "${no_discussion_of_proceedings}"
      - no_children_as_messengers: "${no_use_as_messengers}"
      - no_alcohol_otherparent: "${any(child.otherparent_exists for child in children) and no_alcohol_or_drugs_party == 'no_alcohol_or_drugs_otherparent'}"
      - no_alcohol_pet: "${no_alcohol_or_drugs_party == 'no_alcohol_or_drugs_pet'}"
      - no_alcohol_resp: "${(not any(child.otherparent_exists for child in children)) and no_alcohol_or_drugs_party == 'no_alcohol_or_drugs_otherparent'}"
      - no_alcohol: "${no_alcohol_or_drugs}"
      - no_alcohol_hours: "${no_alcohol_or_drugs_hours}"
      - no_alcohol_thirdparties: "${no_alcohol_or_drugs_thirdparty}"
      - no_smoking: "${no_smoking}"
      - no_scheduling_interference: "${no_schedule_interference}"
      - thirdparty_contact: "${thirdparty_no_contact or thirdparty_no_leaving_alone}"
      - no_contact_with: "${thirdparty_no_contact}"
      - no_contact_with_specify: "${thirdparty_no_contact_who}"
      - no_leaving_alone_with: "${thirdparty_no_leaving_alone}"
      - no_leaving_alone_with_specify: "${thirdparty_no_leaving_alone_who}"
      - clothing_and_belongings: "${exchanges_additional_clothing or exhanges_with_clothing}"
      - maintain_clothing: "${exchanges_additional_clothing}"
      - returned_with_clothing: "${exhanges_with_clothing}"
      - log_book: "${log_book}"
      - order_may_be_changed: "${changing_orders}"
      - other_orders: "${other_add_physicalcustody_provisions}"
      - other_orders_specify: "${other_add_physicalcustody_provisions_specify}"
  
  - name: "FL-341(E), Additional Provisions—Joint Legal Custody Attachment"
    variable name: form_fl341e
    filename: FL-341(E), Additional Provisions—Joint Legal Custody Attachment
    pdf template file: FL-341E_Legal_Custody_Attachment.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - case_number: "${case_number}"
      - otherparent_name: "${otherparent.name}"
      - petition: Yes
      - response: No
      - rfo: No
      - rfo response: No
      - faoh: No
      - stipulation: No
      - Other: No
      - petitioner: Yes
      - otherparent: "${any(child.otherparent_exists for child in children)}"
      - respondent: "${not any(child.otherparent_exists for child in children)}"
      - enrollment: "${changing_schools}"
      - psychiatric: "${counseling_or_therapy}"
      - extracurriculars: "${extracurricular_activities}"
      - healthcare_providers: "${healthcare_provider_selection}"
      - religious_activities: "${religious_activities}"
      - travelrestrictions: "${discuss_travel}"
      - discuss_other: "${discuss_other}"
      - discuss_other_specify: "${discuss_other_specify}"
      - other_consequences: "${additional_consequences}"
      - other_consequences_specify: "${additional_consequences_specify}"
      - specialdecision: "${decision_making_power}"
      - specialdecision_otherparent: "${any(child.otherparent_exists for child in children) and decision_making_power_party == 'decision_making_power_otherparent'}"
      - specialdecision_pet: "${decision_making_power_party == 'decision_making_power_pet'}"
      - specialdecision_resp: "${(not any(child.otherparent_exists for child in children)) and decision_making_power_party == 'decision_making_power_otherparent'}"
      - specialdecision_specify: "${decision_making_power_specify}"
      - healthcarenotification: "${healthcare_notification or healthcare_emergencies or healthcare_medications}"
      - healthcarenotification_contacts: "${healthcare_notification}"
      - healthcarenotification_contact_days: "${healthcare_notification_days}"
      - healthcarenotification_emergencies: "${healthcare_emergencies}"
      - healthcarenotification_medication: "${healthcare_medications}"
      - schoolnotification: "${school_notification}"
      - no_changing_names: "${no_name_changes}"
      - other_orders: "${other_legalcustody_provisions}"
      - other_orders_specify: "${other_legalcustody_provisions_specify}"
  
  - name: "FL-150, Income and Expense Declaration"
    variable name: form_fl150
    filename: FL-150, Income and Expense Declaration
    pdf template file: FL-150_INCOME_AND_EXPENSE_DECLARATION.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - pet_street_address: "${pet.address.address}, ${pet.address.unit}" 
      - pet_city: "${pet.address.city}"
      - pet_state: "${pet.address.state}"
      - pet_zip: "${pet.address.zip}"
      - pet_phone: "${pet.phone}"
      - pet_email: "${pet.email}"
      - in_pro_per: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${court.address.city}, CA ${court.address.zip}"
      - court_name: "${court.name.text}"
      - pet_name2: "${pet.name}"
      - resp_name: "${resp.name}"
      - otherparent_name: "${otherparent.name}"
      - case_number: "${case_number}"
      - employer: "${pet.employer}"
      - employer_address: "${pet.employer_address}"
      - employer_phone: "${pet.employer_phone_number}"
      - occupation: "${pet.occupation}"
      - job_startdate: "${pet.job_start_date}"
      - job_enddate: "${pet.job_end_date}"
      - hours_worked: "${pet.weekly_hours_worked}"
      - per_week: "${pet.gross_income_payperiod == 'pet.gross_income_weekly'}"
      - per_month: "${pet.gross_income_payperiod == 'pet.gross_income_monthly'}"
      - per_hour: "${pet.gross_income_payperiod == 'pet.gross_income_hourly'}"
      - paid: "${pet.gross_income}"
      - pet_age: "${pet.age_in_years()}"
      - complete_no: "${not pet.education_highschool}"
      - complete_yes: "${pet.education_highschool}"
      - highest_grade_completed: "${pet.education_highest_grade_completed}"
      - degrees_obtained: "${pet.education_college_degrees}"
      - degrees_obtained_specify: "${pet.education_college_degrees_specify}"
      - college_years_completed: "${pet.education_college}"
      - graduate_degrees_obtained: "${pet.education_graduate_school_degrees}"
      - graduate_school: "${attended_graduate_school}"
      - professional_licenses: "${pet.has_professional_licenses}"
      - professional_licenses_specify: "${pet.has_professional_licenses_specify}"
      - vocational_training: "${}"
      - graduate_degrees_obtained_specify: "${pet.education_graduate_school_degrees_specify}"
      - vocational_training_specify: "${pet.has_vocational_training}"
      - tax: Yes
      - tax_year: "${taxes_last_filing_year}"
      - tax_status_head: "${tax_filing_status == 'tax_filing_status_head_of_household'}"
      - tax_status_single: "${tax_filing_status == 'tax_filing_status_single'}"
      - tax_status_married_filing_separately: "${tax_filing_status == 'tax_filing_status_married_filing_separately'}"
      - tax_status_married_filing_jointly: "${tax_filing_status == 'tax_filing_status_married_filing_jointly'}"
      - resp_name2: "${resp.name}"
      - files_taxes_outside_ca: "${not tax_filed_in_ca}"
      - files_taxes_ca: "${tax_filed_in_ca}"
      - files_taxes_outside_ca_specify: "${tax_filed_in_state}"
      - number_of_exemptions: "${tax_exemptions}"
      - resp_income: "${resp.gross_monthly_income}"
      - resp_income_explain: "${resp.gross_monthly_income_explanation}"
      - pages_attached: "0"
      - date: "${current_datetime()}"
      - pet_name3: "${pet.name}"
      - Signature102_es_:signer:signature": "${pet.signature}"
      - pet_name4: "${pet.name}"
      - resp_name3: "${resp.name}"
      - otherparent_name2: "${otherparent.name}"
      - case_number2: "${case_number}"
      

      - salary_lm: |
          % if any(item.type == 'avg_salary' for item in incomesources):
          ${ thousands(statistics.mean(item.last_month/1.0 for item in incomesources if item.type=='last_month')) }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - salary_avg: |
          % if any(item.type == 'avg_salary' for item in incomesources):
          ${ thousands(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_salary')) }
          % else:
          ${ thousands(currency(0)) }
          % endif   
      - overtime_lm: |
          % if any(item.type == 'avg_overtime' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - overtime_avg: |
          % if any(item.type == 'avg_overtime' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_overtime')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - commissions_lm: |
          % if any(item.type == 'avg_commissions' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - commissions_avg: |
          % if any(item.type == 'avg_commissions' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_commissions')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - receiving_publicassistance: "${public_assistance}"
      - publicassistance_lm: |
          % if any(item.type == 'avg_publicassistance' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(0) }
          % endif  
      - publicassistance_avg: |
          % if any(item.type == 'avg_publicassistance' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_publicassistance')) }
          % else:
          ${ thousands(0) }
          % endif
      - ss_lm: |
          % if any(item.type == 'avg_ss' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - ss_avg: |
          % if any(item.type == 'avg_ss' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_ss')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - ss_from_this_marriage: No
      - ss_from_different_marriage: "${any(item.type == 'avg_ss' for item in incomesources)}"
      - ss_federally_taxable: "${spousal_support_prior_tax}"
      - ps_lm: |
          % if any(item.type == 'avg_ps' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - ps_avg: |
          % if any(item.type == 'avg_ps' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_ps')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - ps_from_different_dp: "${any(item.type == 'avg_ps' for item in incomesources)}"
      - ps_from_this_dp: No
      - pension_lm: |
          % if any(item.type == 'avg_pension' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - pension_avg: |
          % if any(item.type == 'avg_pension' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_pension')) }
          % else:
          ${ currency(0) }
          % endif
      - socialsecurity_lm: |
          % if any(item.type == 'avg_socialsecurity' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - socialsecurity_avg: |
          % if any(item.type == 'avg_socialsecurity' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_socialsecurity')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - disability_lm: |
          % if any(item.type == 'avg_disability' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - disability_avg: |
          % if any(item.type == 'avg_disability' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_disability')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - disability_privateinsurance: "${disability_type == 'disability_privateinsurance'}"
      - disability_socialsecurity: "${disability_type == 'disability_socialsecurity'}"
      - disability_statedisability: "${disability_type == 'disability_sdi'}"
      - unemployment_lm: |
          % if any(item.type == 'avg_unemployment' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - unemployment_avg: |
          % if any(item.type == 'avg_unemployment' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_unemployment')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - workerscomp_lm: |
          % if any(item.type == 'avg_workerscomp' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - workerscomp_avg: |
          % if any(item.type == 'avg_workerscomp' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_workerscomp')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - otherincome_lm: |
          % if any(item.type == 'avg_otherincome' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - otherincome_avg: |
          % if any(item.type == 'avg_otherincome' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_otherincome')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - otherincome_specify: "${otherincome_specify}"
      - dividends_lm: |
          % if any(item.type == 'avg_dividends' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - dividends_avg: |
          % if any(item.type == 'avg_dividends' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_dividends')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - rentalprop_lm: |
          % if any(item.type == 'avg_rentalprop' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - rentalprop_avg: |
          % if any(item.type == 'avg_rentalprop' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_rentalprop')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - trust_lm: |
          % if any(item.type == 'avg_trust' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - trust_avg: |
          % if any(item.type == 'avg_trust' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_trust')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - otherinvestmentincome_lm: |
          % if any(item.type == 'avg_otherinvestmentincome' for item in incomesources):
          ${ currency(item.last_month for item in incomesources if item.type=='last_month') }
          % else:
          ${ thousands(currency(0)) }
          % endif  
      - otherinvestmentincome_avg: |
          % if any(item.type == 'avg_otherinvestmentincome' for item in incomesources):
          ${ currency(statistics.mean(item.annual_amount/12.0 for item in incomesources if item.type=='avg_otherinvestmentincome')) }
          % else:
          ${ thousands(currency(0)) }
          % endif
      - otherinvestmentincome_specify: "${otherinvestmentincome_specify}"
      - selfemployment_lm: |
          % if self_employed:
          ${int(self_employed_lm)}
          % else:
          ${ thousands(currency(0)) }
          % endif
      - selfemployment_avg: |
          % if self_employed:
          ${currency(int(self_employed_ly)/12)}
          % else:
          ${ thousands(currency(0)) }
          % endif
      - selfemployment_other: "${self_employed_position == 'self_employed_other'}"
      - selfemployment_owner: "${self_employed_position == 'self_employed_owner'}"
      - selfemployment_businesspartner: "${self_employed_position == 'self_employed_business_partner'}"
      - selfemployment_other_specify: "${self_employed_other_specify}"
      - years_in_business: "${self_employed_years}"
      - selfemployment_business_name: "${self_employed_business_name}"
      - selfemployment_business_type: "${self_employed_business_type}"
      - additional_income: "${additional_income}"
      - additional_income_explain: "${additional_income_specify}"
      - change_in_income: "${change_in_income}"
      - change_in_income_explained: "${change_in_income_specify}"
      - union_dues: |
          % if currently_employed:
          ${union_dues}
          % else: 
          ${ thousands(currency(0)) }
          % endif
      - retirement_payments: |
          % if currently_employed:
          ${required_retirement_payments}
          % else: 
          ${ thousands(currency(0)) }
          % endif
      - health_insurance_premiums: |
          % if currently_employed:
          ${medical_premiums}
          % else: 
          ${ thousands(currency(0)) }
          % endif
      - paid_cs: |
          % if currently_employed:
          ${child_support_deductions}
          % else: 
          ${ thousands(currency(0)) }
          % endif
      - paid_ss: |
          % if currently_employed:
          ${spousal_support_deductions}
          % else: 
          ${ thousands(currency(0)) }
          % endif
      - paid_ss_taxdeductible: "${spousal_support_prior_tax}"
      - paid_ps: |
          % if currently_employed:
          ${partner_support_deductions}
          % else: 
          ${ thousands(currency(0)) }
          % endif
      - job_related_expenses: |
          % if currently_employed:
          ${job_related_expenses}
          % else: 
          ${ thousands(currency(0)) }
          % endif
      - job_related_expenses_specify: "${job_related_expenses_specify}"
      - total_cash_and_savings: "${thousands(assets_cash_and_deposit_accounts)}"
      - total_stocks_bonds_and_assets: "${thousands(assets_stocks_and_bonds)}"
      - total_property_value: "${thousands(int(assets_real_property) + int(assets_personal_property))}"
      - real_property: "${realestate.there_are_any}"
      - personal_property: Yes
      - pet_name5: "${pet.name}"
      - resp_name4: "${resp.name}"
      - otherparent_name3: "${otherparent.name}"
      - case_number3: "${case_number}"
      - hm0_name: "${householdmembers.item(0).name}"
      - hm0_relationship: "${householdmembers.item(0).relationship}"
      - hm0_income: "${householdmembers.item(0).income}"
      - hm0_age: "${householdmembers.item(0).age}"
      - hm0_yes: "${householdmembers.item(0).pays_expenses}"
      - hm0_no: "${householdmembers.there_are_any and not householdmembers.item(0).pays_expenses}"
      - hm1_age: "${householdmembers.item(1).age}"
      - hm1_relationship: "${householdmembers.item(1).relationship}"
      - hm1_income: "${householdmembers.item(1).income}"
      - hm1_name: "${householdmembers.item(1).name}"
      - hm1_no: "${householdmembers.target_number >= 2 and not householdmembers.item(1).pays_expenses}"
      - hm1_yes: "${householdmembers.item(1).pays_expenses}"
      - hm2_relationship: "${householdmembers.item(2).relationship}"
      - hm2_income: "${householdmembers.item(2).income}"
      - hm2_age: "${householdmembers.item(2).age}"
      - hm2_name: "${householdmembers.item(2).name}"
      - hm2_yes: "${householdmembers.item(2).pays_expenses}"
      - hm2_no: "${householdmembers.target_number >= 3 and not householdmembers.item(2).pays_expenses}"
      - hm3_name: "${householdmembers.item(3).name}"
      - hm3_age: "${householdmembers.item(3).age}"
      - hm3_relationship: "${householdmembers.item(3).relationship}"
      - hm3_income: "${householdmembers.item(3).income}"
      - hm3_yes: "${householdmembers.item(3).pays_expenses}"
      - hm3_no: "${householdmembers.target_number >= 4 and not householdmembers.item(3).pays_expenses}"
      - hm4_age: "${householdmembers.item(4).age}"
      - hm4_relationship: "${householdmembers.item(4).relationship}"
      - hm4_income: "${householdmembers.item(4).income}"
      - hm4_name: "${householdmembers.item(4).name}"
      - hm4_yes: "${householdmembers.item(4).pays_expenses}"
      - hm4_no: "${householdmembers.target_number >= 5 and not householdmembers.item(4).pays_expenses}"
      
      - actual_expenses: "${expenses_type == 'expenses_actual'}"
      - estimated_expenses: "${expenses_type == 'expenses_estimated'}"
      - proposed_needs: "${expenses_type == 'expenses_proposedneeds'}"
      
      - laundry: "${thousands(laundry_and_cleaning)}"
      - mortgage: "${has_mortgage}"
      - rent: "${not has_mortgage}"
      - home_amount: "${thousands(home_amount)}"
      - clothes: "${thousands(clothes)}"
      - education: "${thousands(education)}"
      - avg_principal: |
          % if has_mortgage:
          ${int(mortgage_principal)}
          % else:
          N/A
          % endif
      - entertainment: "${int(entertainment)}"
      - avg_interest: |
          % if has_mortgage:
          ${int(mortgage_interest)}
          % else:
          N/A
          % endif
      - transportation: "${thousands(int(auto_expenses) + int(auto_insurance))}"
      - real_property_taxes: "${thousands(real_property_taxes)}"
      - insurance: "${thousands(insurance_expenses)}"
      - homeowners_renters_insurance: |
          % if has_mortgage: 
          ${thousands(homeowners_insurance)}
          % else: 
          ${thousands(renters_insurance)}
          % endif
      - savings_and_investments: "${thousands(savings_and_investments)}"
      - maintenance_and_repair: "${thousands(maintenance_and_repair)}"
      - charitable_contributions: "${thousands(charitable_contributions)}"
      - healthcare: "${thousands(healthcare_costs)}"
      - childcare: "${thousands(childcare)}"
      - installment_payments_total: "${thousands(sum(item.amount for item in installmentpaymentsanddebts))}"
      - groceries: "${thousands(groceries_and_supplies)}"
      - other_monthlyexpenses: "${thousands(other_household_expenses)}"
      - other_monthlyexpenses_specify: |
          % if other_household_expenses:
          See Attachment
          % endif
      - eating_out: "${thousands(eating_out)}"
      - utilities: "${thousands(utilities)}"
      - telephone: "${thousands(telephone)}"
      - total_expenses: "${thousands(total_monthly_expenses)}"
      - expenses_paid_by_others: "${thousands(expenses_paid_by_others)}"
      - installmentpayment1_balance: "${installmentpaymentsanddebts.item(0).balance}"
      - installmentpayment1_to: "${installmentpaymentsanddebts.item(0).paid_to}"
      - installmentpayment1_for: "${installmentpaymentsanddebts.item(0).name.text}"
      - installmentpayment1_amount: "${installmentpaymentsanddebts.item(0).amount}"
      - installmentpayment1_date: "${installmentpaymentsanddebts.item(0).date}"
      - installmentpayment2_balance: "${installmentpaymentsanddebts.item(1).balance}"
      - installmentpayment2_to: "${installmentpaymentsanddebts.item(1).paid_to}"
      - installmentpayment2_for: "${installmentpaymentsanddebts.item(1).name.text}"
      - installmentpayment2_amount: "${installmentpaymentsanddebts.item(1).amount}"
      - installmentpayment2_date: "${installmentpaymentsanddebts.item(1).date}"
      - installmentpayment3_balance: "${installmentpaymentsanddebts.item(2).balance}"
      - installmentpayment3_to: "${installmentpaymentsanddebts.item(2).paid_to}"
      - installmentpayment3_for: "${installmentpaymentsanddebts.item(2).name.text}"
      - installmentpayment3_amount: "${installmentpaymentsanddebts.item(2).amount}"
      - installmentpayment3_date: "${installmentpaymentsanddebts.item(2).date}"
      - installmentpayment4_balance: "${installmentpaymentsanddebts.item(3).balance}"
      - installmentpayment4_to: "${installmentpaymentsanddebts.item(3).paid_to}"
      - installmentpayment4_for: "${installmentpaymentsanddebts.item(3).name.text}"
      - installmentpayment4_amount: "${installmentpaymentsanddebts.item(3).amount}"
      - installmentpayment4_date: "${installmentpaymentsanddebts.item(3).date}"
      - installmentpayment5_balance: "${installmentpaymentsanddebts.item(4).balance}"
      - installmentpayment5_to: "${installmentpaymentsanddebts.item(4).paid_to}"
      - installmentpayment5_for: "${installmentpaymentsanddebts.item(4).name.text}"
      - installmentpayment5_amount: "${installmentpaymentsanddebts.item(4).amount}"
      - installmentpayment5_date: "${installmentpaymentsanddebts.item(4).date}"
      - installmentpayment6_balance: "${installmentpaymentsanddebts.item(5).balance}"
      - installmentpayment6_to: |
          % if installmentpaymentsanddebts.target_number >6:
          See Attachment
          % else:
          "${installmentpaymentsanddebts.item(5).paid_to}"
          % endif
      - installmentpayment6_for:  |
          % if installmentpaymentsanddebts.target_number >6:
          
          % else:
          "${installmentpaymentsanddebts.item(5).name.text}"
          % endif
      - installmentpayment6_amount: |
          % if installmentpaymentsanddebts.target_number >6:
          
          % else:
          "${installmentpaymentsanddebts.item(5).amount}"
          % endif
      - installmentpayment6_date: |
          % if installmentpaymentsanddebts.target_number >6:
          
          % else:
          "${installmentpaymentsanddebts.item(5).date}"
          % endif
      - attorneysfees_paid: "${}"
      - attorneysfees_paid_source: "${}"
      - attorneysfees_owed: "${}"
      - attorneysfees_hourlyrate: "${}"
      - date2: "${current_datetime()}"
      - pet_name6: "${pet.name}"
      - party_signature: "${pet.signature}"
      - party_signature2: "${pet.signature}"
      - pet_name7: "${pet.name}"
      - resp_name5: "${resp.name}"
      - otherparent_name4: "${otherparent.name}"
      - case_number4: "${case_number}"
      - children_number: "${children.target_number}"
      - pet_percentage: "${percent_time_with_pet}"
      - resp_percentage: "${100 - int(percent_time_with_pet)}"
      - timeshare: "${parenting_schedule_summary}"
      - has_healthinsurance_through_job: "${health_insurance_through_job}"
      - no_healthinsurance_through_job: "${not health_insurance_through_job}"
      - insurance_company_name: "${insurance_company}"
      - insurance_company_address: "${insurance_company_address}"
      - childrens_healthinsurance_cost: "${health_insurance_cost}"
      - childcare_for_work: "${childcare_for_work_amount}"
      - childrens_healthcare_not_covered: "${childrens_healthcare}"
      - visitation_travel_expenses: "${travel_expenses}"
      - childrens_special_needs: "${childrens_educational_or_specialneeds_expenses}"
      - childrens_special_needs_specify: "${childrens_educational_or_specialneeds_expenses_specify}"
      - extraordinary_health_expenses_amount: "${thousands(extraordinary_health_expenses_amount)}"
      - extraordinary_health_expenses_months: "${extraordinary_health_expenses_months}"
      - major_losses_amount: "${major_losses_amount}"
      - major_losses_months: "${major_losses_months}"
      - otherchildren_amount: "${other_children_expenses_amount}"
      - otherchildren_months: "${other_children_expenses_months}"
      - otherchildren_names_and_ages: "${other_children_expenses_names_and_ages}"
      - otherchildren_cs_received: "${other_children_expenses_childsupport}"
      - extreme_financial_hardship_explain: |
          % if extreme_financial_hardship_explanation_ms:
          ${extreme_financial_hardship_explanation} (See Attachment)
          % else:
          ${extreme_financial_hardship_explanation}
          % endif
      - other_information_explain: |
          % if other_information_concerning_childsupport: 
          ${other_information_concerning_childsupport} (See Attachment)
          % else:
          ${other_information_concerning_childsupport}
          % endif
  
  - name: "Attachment to FL-150"
    variable name: form_fl50_attachment
    filename: Attachment to FL-150
    docx template file: FL-150-Attachment-Template.docx
    skip undefined: true
    valid formats:
      - pdf
      - docx
  
  - name: "FL-160, Property Declaration—Community Property"
    variable name: form_fl160c
    filename: FL-160, Property Declaration—Community Property
    pdf template file: FL-160_Property_Declaration.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - pet_street_address: "${pet.address.address}"
      - pet_city: "${pet.address.city}"
      - pet_state: "${pet.address.state}"
      - pet_zip: "${pet.address.zip}"
      - pet_phone: "${pet.phone}"
      - pet_email: "${pet.email}"
      - in_pro_per: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${court.address.city}, CA ${court.address.zip}"
      - court_name: "${court.name.text}"
      - pet_name2: "${pet.name}"
      - resp_name: "${resp.name}"
      - petitioners: Yes
      - respondents: No
      - community: Yes
      - case_number: "${case_number}"
      - separate: No
      
      - realestate0_date: |
          % if not realestate.there_are_any:
          N/A
          % elif realestate.item(0).type == 'realestate.item(0).community':
          ${realestate.item(0).date}
          % else:  
          N/A
          % endif
      - realestate0_resp: |
          % if not realestate.there_are_any:
          0
          % elif realestate.item(0).type == 'realestate.item(0).community':
          ${((100 - int(realestate.item(0).division))/100)*(int(realestate.item(0).value) - int(realestate.item(0).debt))}
          % else:
          0
          % endif
      - realestate0: |
          % if not realestate.there_are_any:
          N/A
          % elif realestate.item(0).type == 'realestate.item(0).community':
          ${realestate.item(0).name.text}
          % else:
          N/A
          % endif
      - realestate0_pet: |
          % if not realestate.there_are_any:
          0
          % elif realestate.item(0).type == 'realestate.item(0).community':
          ${(int(realestate.item(0).division)/100)*(int(realestate.item(0).value) - int(realestate.item(0).debt))}
          % else: 
          0
          % endif
      - realestate0_value: |
          % if not realestate.there_are_any:
          N/A
          % elif realestate.item(0).type == 'realestate.item(0).community':
          ${realestate.item(0).value}
          % else:
          0
          % endif
      - realestate0_debt: |
          % if not realestate.there_are_any:
          N/A
          % elif realestate.item(0).type == 'realestate.item(0).community':
          ${realestate.item(0).debt}
          % else:
          0
          % endif
      - realestate0_netvalue: |
          % if not realestate.there_are_any:
            N/A
          % elif realestate.item(0).type == 'realestate.item(0).community':
            ${int(realestate.item(0).amount) - int(realestate.item(0).debt)}
          % else: 
            0
          % endif
      
      - realestate1_resp: "${}"
      - realestate1_pet: "${}"
      - realestate1_date: "${}"
      - realestate1_value: "${}"
      - realestate1_debt: "${}"
      - realestate1: "${}"
      - realestate1_netvalue: "${}"
      - furniture0_date: "${}"
      - furniture0_resp: "${}"
      - furniture0: "${}"
      - furniture0_pet: "${}"
      - furniture0_value: "${}"
      - furniture0_debt: "${}"
      - furniture0_netvalue: "${}"
      - furniture1_resp: "${}"
      - furniture1_pet: "${}"
      - furniture1_date: "${}"
      - furniture1_value: "${}"
      - furniture1_debt: "${}"
      - furniture1: "${}"
      - furniture1_netvalue: "${}"
      - furniture2_resp: "${}"
      - furniture2: "${}"
      - furniture2_pet: "${}"
      - furniture2_value: "${}"
      - furniture2_debt: "${}"
      - furniture2_date: "${}"
      - furniture2_netvalue: "${}"
      - furniture3_resp: "${}"
      - furniture3_value: "${}"
      - furniture3_netvalue: "${}"
      - furniture3_pet: "${}"
      - furniture3_date: "${}"
      - furniture3_debt: "${}"
      - furniture3: "${}"
      - furniture4_netvalue: "${}"
      - furniture4_resp: "${}"
      - furniture4_pet: "${}"
      - furniture4_value: "${}"
      - furniture4_debt: "${}"
      - furniture4_date: "${}"
      - furniture4: "${}"
      - jewelry0_date: "${}"
      - jewelry0_resp: "${}"
      - jewelry0: "${}"
      - jewelry0_pet: "${}"
      - jewelry0_value: "${}"
      - jewelry0_debt: "${}"
      - jewelry0_netvalue: "${}"
      - jewelry1_resp: "${}"
      - jewelry1_pet: "${}"
      - jewelry1_date: "${}"
      - jewelry1_value: "${}"
      - jewelry1_debt: "${}"
      - jewelry1: "${}"
      - jewelry1_netvalue: "${}"
      - jewelry2_resp: "${}"
      - jewelry2_pet: "${}"
      - jewelry2_date: "${}"
      - jewelry2_value: "${}"
      - jewelry2_debt: "${}"
      - jewelry2: "${}"
      - jewelry2_netvalue: "${}"
      - vehicle0_date: "${}"
      - vehicle0_resp: "${}"
      - vehicle0: "${}"
      - vehicle0_pet: "${}"
      - vehicle0_value: "${}"
      - vehicle0_debt: "${}"
      - vehicle0_netvalue: "${}"
      - vehicle1_resp: "${}"
      - vehicle1_pet: "${}"
      - vehicle1_date: "${}"
      - vehicle1_value: "${}"
      - vehicle1_debt: "${}"
      - vehicle1: "${}"
      - vehicle1_netvalue: "${}"
      - vehicle2_resp: "${}"
      - vehicle2_pet: "${}"
      - vehicle2_date: "${}"
      - vehicle2_value: "${}"
      - vehicle2_debt: "${}"
      - vehicle2: "${}"
      - vehicle2_netvalue: "${}"
      - savingsacct0_date: "${}"
      - savingsacct0_resp: "${}"
      - savingsacct0: "${}"
      - savingsacct0_pet: "${}"
      - savingsacct0_value: "${}"
      - savingsacct0_debt: "${}"
      - savingsacct0_netvalue: "${}"
      - savingsacct1_resp: "${}"
      - savingsacct1_pet: "${}"
      - savingsacct1_date: "${}"
      - savingsacct1_value: "${}"
      - savingsacct1_debt: "${}"
      - savingsacct1: "${}"
      - savingsacct1_netvalue: "${}"
      - savingsacct2_resp: "${}"
      - savingsacct2_pet: "${}"
      - savingsacct2_date: "${}"
      - savingsacct2_value: "${}"
      - savingsacct2_debt: "${}"
      - savingsacct2: "${}"
      - savingsacct2_netvalue: "${}"
      - checkingacct0_date: "${}"
      - checkingacct0_resp: "${}"
      - checkingacct0: "${}"
      - checkingacct0_pet: "${}"
      - checkingacct0_value: "${}"
      - checkingacct0_debt: "${}"
      - checkingacct0_netvalue: "${}"
      - checkingacct1_resp: "${}"
      - checkingacct1_pet: "${}"
      - checkingacct1_date: "${}"
      - checkingacct1_value: "${}"
      - checkingacct1_debt: "${}"
      - checkingacct1: "${}"
      - checkingacct1_netvalue: "${}"
      - checkingacct2_resp: "${}"
      - checkingacct2_pet: "${}"
      - checkingacct2_value: "${}"
      - checkingacct2_date: "${}"
      - checkingacct2_debt: "${}"
      - checkingacct2: "${}"
      - checkingacct2_netvalue: "${}"
      - depository0_value: "${}"
      - depository0_date: "${}"
      - depository0_debt: "${}"
      - depository0_resp: "${}"
      - depository0: "${}"
      - depository0_pet: "${}"
      - depository0_netvalue: "${}"
      - depository1_date: "${}"
      - depository1_value: "${}"
      - depository1_debt: "${}"
      - depository1: "${}"
      - depository1_netvalue: "${}"
      - depository1_resp: "${}"
      - depository1_pet: "${}"
      - depository2_date: "${}"
      - depository2_value: "${}"
      - depository2_debt: "${}"
      - depository2: "${}"
      - depository2_netvalue: "${}"
      - depository2_resp: "${}"
      - depository2_pet: "${}"
      - cash0_value: "${}"
      - cash0_date: "${}"
      - cash0_debt: "${}"
      - cash0_resp: "${}"
      - cash0: "${}"
      - cash0_pet: "${}"
      - cash0_netvalue: "${}"
      - cash1_date: "${}"
      - cash1_value: "${}"
      - cash1_debt: "${}"
      - cash1: "${}"
      - cash1_netvalue: "${}"
      - cash1_resp: "${}"
      - cash1_pet: "${}"
      - taxrefund0_value: "${}"
      - taxrefund0_date: "${}"
      - taxrefund0_debt: "${}"
      - taxrefund0_resp: "${}"
      - taxrefund0: "${}"
      - taxrefund0_pet: "${}"
      - taxrefund0_netvalue: "${}"
      - taxrefund1_date: "${}"
      - taxrefund1_value: "${}"
      - taxrefund1_debt: "${}"
      - taxrefund1: "${}"
      - taxrefund1_netvalue: "${}"
      - taxrefund1_resp: "${}"
      - taxrefund1_pet: "${}"
      - lifeinsurance0_value: "${}"
      - lifeinsurance0_date: "${}"
      - lifeinsurance0_debt: "${}"
      - lifeinsurance0_resp: "${}"
      - lifeinsurance0: "${}"
      - lifeinsurance0_pet: "${}"
      - lifeinsurance0_netvalue: "${}"
      - lifeinsurance1_date: "${}"
      - lifeinsurance1_vaue: "${}"
      - lifeinsurance1_debt: "${}"
      - lifeinsurance1: "${}"
      - lifeinsurance1_netvalue: "${}"
      - lifeinsurance1_resp: "${}"
      - lifeinsurance1_pet: "${}"
      - stocks0_value: "${}"
      - stocks0_date: "${}"
      - stocks0_debt: "${}"
      - stocks0_resp: "${}"
      - stocks0: "${}"
      - stocks0_pet: "${}"
      - stocks0_netvalue: "${}"
      - stocks1_date: "${}"
      - stocks1_value: "${}"
      - stocks1_debt: "${}"
      - stocks1: "${}"
      - stocks1_netvalue: "${}"
      - stocks1_resp: "${}"
      - stocks1_pet: "${}"
      - retirement0_value: "${}"
      - retirement0_date: "${}"
      - retirement0_debt: "${}"
      - retirement0_resp: "${}"
      - retirement0: "${}"
      - retirement0_pet: "${}"
      - retirement0_netvalue: "${}"
      - retirement1_date: "${}"
      - retirement1_value: "${}"
      - retirement1_debt: "${}"
      - retirement1: "${}"
      - retirement1_netvalue: "${}"
      - retirement1_resp: "${}"
      - retirement1_pet: "${}"
      - deferredcomp0_value: "${}"
      - deferredcomp0_date: "${}"
      - deferredcomp0_debt: "${}"
      - deferredcomp0_resp: "${}"
      - deferredcomp0: "${}"
      - deferredcomp0_pet: "${}"
      - deferredcomp0_netvalue: "${}"
      - deferredcomp1_date: "${}"
      - deferredcomp1_value: "${}"
      - deferredcomp1_debt: "${}"
      - deferredcomp1: "${}"
      - deferredcomp1_netvalue: "${}"
      - deferredcomp1_resp: "${}"
      - deferredcomp1_pet: "${}"
      - accountsreceivable0_value: "${}"
      - accountsreceivable0_date: "${}"
      - accountsreceivable0_debt: "${}"
      - accountsreceivable0_resp: "${}"
      - accountsreceivable0: "${}"
      - accountsreceivable0_pet: "${}"
      - accountsreceivable0_netvalue: "${}"
      - accountsreceivable1_date: "${}"
      - accountsreceivable1_value: "${}"
      - accountsreceivable1_debt: "${}"
      - accountsreceivable1: "${}"
      - accountsreceivable1_netvalue: "${}"
      - accountsreceivable1_resp: "${}"
      - accountsreceivable1_pet: "${}"
      - partnerships0_value: "${}"
      - partnerships0_date: "${}"
      - partnerships0_debt: "${}"
      - partnerships0_resp: "${}"
      - partnerships0: "${}"
      - partnerships0_pet: "${}"
      - partnerships0_netvalue: "${}"
      - partnerships1_date: "${}"
      - partnerships1_value: "${}"
      - partnerships1_debt: "${}"
      - partnerships1: "${}"
      - partnerships1_netvalue: "${}"
      - partnerships1_resp: "${}"
      - partnerships1_pet: "${}"
      - otherassets0_value: "${}"
      - otherassets0_date: "${}"
      - otherassets0_debt: "${}"
      - otherassets0_resp: "${}"
      - otherassets0: "${}"
      - otherassets0_pet: "${}"
      - otherassets0_netvalue: "${}"
      - otherassets1_date: "${}"
      - otherassets1_value: "${}"
      - otherassets1_debt: "${}"
      - otherassets1: "${}"
      - otherassets1_netvalue: "${}"
      - otherassets1_resp: "${}"
      - otherassets1_pet: "${}"
      - otherassets2_value: "${}"
      - otherassets2_date: "${}"
      - otherassets2_debt: "${}"
      - otherassets2_resp: "${}"
      - otherassets2: "${}"
      - otherassets2_pet: "${}"
      - otherassets2_netvalue: "${}"
      - continuation_value: "${}"
      - continuation_debt: "${}"
      - continuation_netvalue: "${}"
      - continuation_resp: "${}"
      - continuation_pet: "${}"
      - total_assets: "${}"
      - totalassets_debts: "${}"
      - totalassets_netvalue: "${}"
      - totalassets_pet: "${}"
      - totalassets_resp: "${}"
      - studentloans0_pet: "${}"
      - studentloans0: "${}"
      - studentloans0_date: "${}"
      - studentloans0_amount: "${}"
      - studentloans0_resp: "${}"
      - studentloans1_pet: "${}"
      - studentloans1: "${}"
      - studentloans1_date: "${}"
      - studentloans1_amount: "${}"
      - studentloans1_resp: "${}"
      - studentloans2_pet: "${}"
      - studentloans2: "${}"
      - studentloans2_date: "${}"
      - studentloans2_amount: "${}"
      - studentloans2_resp: "${}"
      - taxes0_pet: "${}"
      - taxes0: "${}"
      - taxes0_date: "${}"
      - taxes0_amount: "${}"
      - taxes0_resp: "${}"
      - taxes1_pet: "${}"
      - taxes1: "${}"
      - taxes1_date: "${}"
      - taxes1_amount: "${}"
      - taxes1_resp: "${}"
      - taxes2_pet: "${}"
      - taxes2: "${}"
      - taxes2_date: "${}"
      - taxes2_amount: "${}"
      - taxes2_resp: "${}"
      - support0_pet: "${}"
      - support0: "${}"
      - support0_date: "${}"
      - support0_amount: "${}"
      - support0_resp: "${}"
      - support1_pet: "${}"
      - support1: "${}"
      - support1_date: "${}"
      - support1_amount: "${}"
      - support1_resp: "${}"
      - support2_pet: "${}"
      - support2: "${}"
      - support2_date: "${}"
      - support2_amount: "${}"
      - support2_resp: "${}"
      - unsecuredloans0_pet: "${}"
      - unsecuredloans0: "${}"
      - unsecuredloans0_date: "${}"
      - unsecuredloans0_amount: "${}"
      - unsecuredloans0_resp: "${}"
      - unsecuredloans1_pet: "${}"
      - unsecuredloans1: "${}"
      - unsecuredloans1_date: "${}"
      - unsecuredloans1_amount: "${}"
      - unsecuredloans1_resp: "${}"
      - unsecuredloans2_pet: "${}"
      - unsecuredloans2: "${}"
      - unsecuredloans2_date: "${}"
      - unsecuredloans2_amount: "${}"
      - unsecuredloans2_resp: "${}"
      - creditcards0_pet: "${}"
      - creditcards0: "${}"
      - creditcards0_date: "${}"
      - creditcards0_amount: "${}"
      - creditcards0_resp: "${}"
      - creditcards1_pet: "${}"
      - creditcards1: "${}"
      - creditcards1_amount: "${}"
      - creditcards1_resp: "${}"
      - creditcards1_date: "${}"
      - creditcards2: "${}"
      - creditcards2_date: "${}"
      - creditcards2_pet: "${}"
      - creditcards2_amount: "${}"
      - creditcards2_resp: "${}"
      - creditcards3: "${}"
      - creditcards3_pet: "${}"
      - creditcards3_date: "${}"
      - creditcards3_amount: "${}"
      - creditcards3_resp: "${}"
      - creditcards4: "${}"
      - creditcards4_date: "${}"
      - creditcards4_amount: "${}"
      - creditcards4_pet: "${}"
      - creditcards4_resp: "${}"
      - otherdebts0_pet: "${}"
      - otherdebts0: "${}"
      - otherdebts0_date: "${}"
      - otherdebts0_amount: "${}"
      - otherdebts0_resp: "${}"
      - otherdebts1_pet: "${}"
      - otherdebts1: "${}"
      - otherdebts1_amount: "${}"
      - otherdebts1_resp: "${}"
      - otherdebts1_date: "${}"
      - otherdebts2: "${}"
      - otherdebts2_date: "${}"
      - otherdebts2_pet: "${}"
      - otherdebts2_amount: "${}"
      - otherdebts2_resp: "${}"
      - otherdebts3: "${}"
      - otherdebts3_pet: "${}"
      - otherdebts3_date: "${}"
      - otherdebts3_amount: "${}"
      - otherdebts3_resp: "${}"
      - otherdebts4: "${}"
      - otherdebts4_date: "${}"
      - otherdebts4_amount: "${}"
      - otherdebts4_pet: "${}"
      - otherdebts4_resp: "${}"
      - totaldebts_amount: "${}"
      - totaldebts_pet: "${}"
      - totaldebts_resp: "${}"
      - continuation_sheet: "${}"
      - date: "${current_datetime()}"
      - Signature108_es_:signer:signature": "${pet.signature}"
      - pet_name3: "${pet.name}"
  
  - name: "FL-300, Request for Order"
    variable name: form_fl300
    filename: FL-300 Request for Order
    pdf template file: FL-300_Request_for_Order.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - party_name: "${pet.name}"
      - party_street_address: "${pet.address.address}"
      - party_city: "${pet.address.city}"
      - party_state: "${pet.address.state}"
      - party_zip: "${pet.address.zip}"
      - party_phone: "${pet.phone}"
      - party_email: "${pet.email}"
      - in_pro_per_or_se: "In Pro Per" 
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${court.address.city}, CA ${court.address.zip}"
      - court_name: "${court.name.text}"
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - otherparent_name: "${otherparent.name}"
      - rfo_exparte: "${custodyvisitation_requesting_exparte_orders or propertycontrol_requesting_exparte_orders}"
      - rfo_amend: No
      - rfo_visitation: "${custodyvisitation_requesting_temporary_orders}"
      - rfo_childcustody: "${custodyvisitation_requesting_temporary_orders}"
      - rfo_spousalsupport: "${spousalsupport_requesting_temporary_orders}"
      - rfo_childsupport: "${childsupport_requesting_temporary_orders}"
      - rfo_attorneysfees: No
      - rfo_dvro: No
      - rfo_propertycontrol: "${propertycontrol_requesting_temporary_orders}"
      - rfo_other: No
      - case_number: "${case_number}"
      - notice_of_hearing_to: "${resp.name}"
      - to_other_specify: |
      - to_otherparent: "${any(child.otherparent_exists for child in children) and custodyvisitation_requesting_temporary_orders}"
      - to_respondent: Yes
      - to_petitioner: No
      - to_other: No
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - otherparent_name2: "${otherparent.name}"
      - case_number2: "${case_number}"
      - restrainingorder: "${prior_restrainingorders}"
      - ro_pet: "${prior_restrainingorders}"
      - ro_resp: "${prior_restrainingorders and (not any(child.otherparent_exists for child in children))}"
      - ro_otherparent: "${prior_restrainingorders and any(child.otherparent_exists for child in children) and prior_restrainingorders_criminal_party == 'prior_restrainingorders_criminal_otherparent' or prior_restrainingorders_family_party == 'prior_restrainingorders_family_otherparent' or prior_restrainingorders_juvenile_party == 'prior_restrainingorders_juvenile_otherparent' or prior_restrainingorders_other_party == 'prior_restrainingorders_other_otherparent'}"
      - ro_criminal_county: "${prior_restrainingorders_criminal_county}"
      - ro_criminal_casenumber: "${prior_restrainingorders_criminal_casenumber}"
      - ro_criminal: "${prior_restrainingorders_criminal}"
      - ro_family_county: "${prior_restrainingorders_family_county}"
      - ro_family_casenumber: "${prior_restrainingorders_family_casenumber}"
      - ro_family: "${prior_restrainingorders_family}"
      - ro_juvenile_county: "${prior_restrainingorders_juvenile_county}"
      - ro_juvenile_case_number: "${prior_restrainingorders_juvenile_casenumber}"
      - ro_juvenile: "${prior_restrainingorders_juvenile}"
      - ro_other_county: "${prior_restrainingorders_other_county}"
      - ro_other_case_number: "${prior_restrainingorders_other_casenumber}"
      - ro_other: "${prior_restrainingorders_other}"
      - childcustody: "${custodyvisitation_requesting_temporary_orders}"
      - childcustody_exparte: "${custodyvisitation_requesting_exparte_orders}"
      - visitation: "${custodyvisitation_requesting_temporary_orders}"
      - physicalcustody_to: "${custodyvisitation_requesting_temporary_orders}"
      - legalcustody_to: "${custodyvisitation_requesting_temporary_orders}"
      
      - child0_birthdate: "${children.item(0).birthdate}"
      - child0_legalcustody_to: |
          % if children.item(0).type_of_legal_custody == 'solelegalcustody_to_pet':
          ${pet.name}
          % elif (children.item(0).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(0).type_of_legal_custody == 'solelegalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif children.item(0).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}  
          % endif
      - child0_physicalcustody_to: |
          % if children.item(0).type_of_physical_custody == 'solephysicalcustody_to_pet':
          ${pet.name}
          % elif (children.item(0).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(0).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif (children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_pet') and not any(child.otherparent_exists for child in children):
          ${pet.name} (Primary) and ${resp.name}
          % elif (children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name} (Primary) and ${pet.name}
          % elif (children.item(0).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name} (Primary) and ${pet.name}
          % elif children.item(0).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}   
          % endif        
      - child0_name: "${children.item(0).name}"
      
      - child1_birthdate: "${children.item(1).birthdate}"
      - child1_legalcustody_to: |
          % if children.item(1).type_of_legal_custody == 'solelegalcustody_to_pet':
          ${pet.name}
          % elif (children.item(1).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(1).type_of_legal_custody == 'solelegalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif children.item(1).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}  
          % endif
      - child1_physicalcustody_to: |
          % if children.item(1).type_of_physical_custody == 'solephysicalcustody_to_pet':
          ${pet.name}
          % elif (children.item(1).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(1).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif (children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_pet') and not any(child.otherparent_exists for child in children):
          ${pet.name} (Primary) and ${resp.name}
          % elif (children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name} (Primary) and ${pet.name}
          % elif (children.item(1).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name} (Primary) and ${pet.name}
          % elif children.item(1).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}   
          % endif        
      - child1_name: "${children.item(1).name}"
      
      - child2_birthdate: "${children.item(2).birthdate}"
      - child2_legalcustody_to: |
          % if children.item(2).type_of_legal_custody == 'solelegalcustody_to_pet':
          ${pet.name}
          % elif (children.item(2).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(2).type_of_legal_custody == 'solelegalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif children.item(2).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}  
          % endif
      - child2_physicalcustody_to: |
          % if children.item(2).type_of_physical_custody == 'solephysicalcustody_to_pet':
          ${pet.name}
          % elif (children.item(2).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(2).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif (children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_pet') and not any(child.otherparent_exists for child in children):
          ${pet.name} (Primary) and ${resp.name}
          % elif (children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name} (Primary) and ${pet.name}
          % elif (children.item(2).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name} (Primary) and ${pet.name}
          % elif children.item(2).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}   
          % endif        
      - child2_name: "${children.item(2).name}"
      
      - child3_birthdate: "${children.item(3).birthdate}"
      - child3_legalcustody_to: |
          % if children.item(3).type_of_legal_custody == 'solelegalcustody_to_pet':
          ${pet.name}
          % elif (children.item(3).type_of_legal_custody == 'solelegalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(3).type_of_legal_custody == 'solelegalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif children.item(3).type_of_legal_custody == 'jointlegalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}  
          % endif
      - child3_physicalcustody_to: |
          % if children.item(3).type_of_physical_custody == 'solephysicalcustody_to_pet':
          ${pet.name}
          % elif (children.item(3).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif (children.item(3).type_of_physical_custody == 'solephysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name}
          % elif (children.item(3).type_of_physical_custody == 'primaryphysicalcustody_to_pet') and not any(child.otherparent_exists for child in children):
          ${pet.name} (Primary) and ${resp.name}
          % elif (children.item(3).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and not any(child.otherparent_exists for child in children):
          ${resp.name} (Primary) and ${pet.name}
          % elif (children.item(3).type_of_physical_custody == 'primaryphysicalcustody_to_otherparent') and any(child.otherparent_exists for child in children):
          ${otherparent.name} (Primary) and ${pet.name}
          % elif children.item(3).type_of_physical_custody == 'jointphysicalcustody_to_pet_and_otherparent':
          ${pet.name} and ${comma_and_list(otherparent)}   
          % endif        
      - child3_name: "${children.item(3).name}"
      
      - attachment2a: "${children.target_numner >= 5}"
      - requesting_childcustody_or_visitation: "${custodyvisitation_requesting_temporary_orders}"
      - requesting_childcustody: "${custodyvisitation_requesting_temporary_orders}"
      - requesting_visitation: "${custodyvisitation_requesting_temporary_orders}"
      - cc_specified_in: "${custodyvisitation_requesting_temporary_orders}"
      - fl305: "${custodyvisitation_requesting_exparte_orders}"
      - fl311: "${custodyvisitation_requesting_temporary_orders}"
      - fl341c: "${holiday_schedule}"
      - fl312: "${child_abduction_risk}"
      - other_cc_attachment: No
      - fl-341e: "${joint_legal_custody_provisions}"
      - fl341d: "${additional_physical_custody_provisions}"
      - other_cc_attachment_specify: |
      - cc_as_follows: No
      - attachment2b: No
      - cc_as_follows_specify: |
      - attachment2c: 
      - best_interest_of_children_specify: |
          % if custodyvisitation_requesting_temporary_orders: 
            ${explain_custodyvisitation}
          % elif custodyvisitation_requesting_exparte_orders:
            ${explain_custodyvisitation_exparte}
          % endif
      - amending_childcustody: "${custodyvisitation_priorcase_yes}"
      - amending_childcustody_visitation: "${amend_custodyvisitation}"
      - amending_childcustody_cc: "${amend_custodyvisitation}"
      - priororder_childcustody: "${amend_custodyvisitation}"
      - priororder_childcustody_date: "${amend_custodyvisitation_date}"
      - priororder_childcustody_specify: |
      - priororder_visitation: "${amend_custodyvisitation}"
      - priororder_visitation_date: "${amend_custodyvisitation_date}"
      - priororder_visitation_specify: |
      - attachment2d: "${amend_custodyvisitation}"
      - pet_name3: "${pet.name}" 
      - resp_name3: "${resp.name}" 
      - case_number3: "${case_number}" 
      - otherparent_name3: "${otherparent.name}"
      - childsupport: "${childsupport_requesting_temporary_orders}"
      - requesting_childsupport_guideline: "${cs_guideline}"
      - 0child_amount: |
          % if childsupport_requesting_temporary_orders: 
          ${cs_nonguideline_amount}
          % endif
      - 0child_age: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(0).age_in_years()}
          % endif
      - 0child_name: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(0).name}
          % endif
      - 1child_amount: |
          % if childsupport_requesting_temporary_orders: 
          ${cs_nonguideline_amount}
          % endif
      - 1child_age: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(1).age_in_years()}
          % endif
      - 1child_name: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(1).name}
          % endif
      - 2child_amount: |
          % if childsupport_requesting_temporary_orders: 
          ${cs_nonguideline_amount}
          % endif
      - 2child_age: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(2).age_in_years()}
          % endif
      - 2child_name: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(2).name}
          % endif
      - 3child_amount: |
          % if childsupport_requesting_temporary_orders: 
          ${cs_nonguideline_amount}
          % endif
      - 3child_age: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(3).age_in_years()}
          % endif
      - 3child_name: |
          % if childsupport_requesting_temporary_orders: 
          ${children.item(3).name}
          % endif
      - attachment3a: "${children.target_number >= 5}"
      - priororder_childsupport_date: "${cs_previousorder_date}"
      - priororder_childsupport: "${cs_previousorder}"
      - priororder_childsupport_specify: "${cs_previousorder_description}"
      - attachment3d: No
      - requesting_childsupport_specify: "${explain_cs}"
      - spousalsupport: "${spousalsupport_requesting_temporary_orders}"
      - amount_requested_amount: |
          % if spousalsupport_requesting_temporary_orders:
          ${ss_amount}
          % endif
      - amount_requested: "${spousalsupport_requesting_temporary_orders}"
      - priororder_spousalsupport_date: "${prior_ss_order_date}"
      - priororder_spousalsupport_end: No
      - priororder_spousalsupport: "${prior_ss_order}"
      - priororder_spousalsupport_change: "${prior_ss_order}"
      - priororder_spousalsupport_amount: "${prior_ss_order_amount}"
      - fl157: "${prior_ss_order_judgement}"
      - attachment4e: No
      - requesting_spousalsupport_specify: "${temporary_ss_explanation}"
      - propertycontrol_exparte: "${propertycontrol_requesting_exparte_orders}"
      - propertycontrol: "${propertycontrol_requesting_temporary_orders}"
      - propertycontrol_to_pet: "${propertycontrol_property_to == 'pet'}"
      - propertycontrol_to_resp: "${propertycontrol_property_to == 'resp'}"
      - propertycontrol_to_otherparent: "${propertycontrol_property_to == 'other'}"
      - propertycontrol_own: "${propertycontrol_property_ownership == 'propertycontrol_property_ownership_own'}"
      - propertycontrol_rent: "${propertycontrol_property_ownership == 'propertycontrol_property_ownership_lease'}"
      - requesting_propertycontrol_property: "${propertycontrol_property_specify}"
      - debtpayment_otherparent: "${any(item.debtor == 'other' for item in debtsandliens)}"
      - debtpayment_pet: "${any(item.debtor == 'pet' for item in debtsandliens)}"
      - debtpayment_resp: "${any(item.debtor == 'resp' for item in debtsandliens)}"
      - debt0_payto: "${debtsandliens.item(0).pay_to}"
      - debt0_for: "${debtsandliens.item(0).name.text}"
      - debt0_amount: "${debtsandliens.item(0).amount}"
      - debt0_duedate: "${debtsandliens.item(0).due}"
      - debt1_for: "${debtsandliens.item(1).name.text}"
      - debt1_duedate: "${debtsandliens.item(1).due}"
      - debt1_payto: "${debtsandliens.item(1).pay_to}"
      - debt1_amount: "${debtsandliens.item(1).amount}"
      - debt2_for: "${debtsandliens.item(2).name.text}"
      - debt2_duedate: "${debtsandliens.item(2).due}"
      - debt2_payto: "${debtsandliens.item(2).pay_to}"
      - debt2_amount: "${debtsandliens.item(2).amount}"
      - debt3_for: "${debtsandliens.item(3).name.text}"
      - debt3_duedate: "${debtsandliens.item(3).due}"
      - debt3_payto: "${debtsandliens.item(3).pay_to}"
      - debt3_amount: "${debtsandliens.item(3).amount}"
      - priororder_propertycontrol: No
      - priororder_propertycontrol_date: No
      - pet_name4: "${pet.name}"
      - resp_name4: "${resp.name}"
      - case_number4: "${case_number}"
      - otherparent_name4: "${otherparent.name}"
      - attorneysfees: No
      - attorneysfees_amount: |
      - dvro: "${prior_restrainingorders_family_change or prior_restrainingorders_family_end}"
      - dvro_date: "${prior_restrainingorders_family_date}"
      - dvro_end: "${prior_restrainingorders_family_end}"
      - dvro_change: "${prior_restrainingorders_family_change}"
      - attachment7c: No
      - requesting_dvro: "${prior_restrainingorders_family_change}"
      - requesting_dvro_specify: "${prior_restrainingorders_family_change_specify}"
      - attachment7d: No
      - requesting_dvro_changeorend_specify: "${prior_restrainingorders_family_change_specify}${prior_restrainingorders_family_end_specify}"
      - otherorders: "${prior_restrainingorders_family_other}"
      - attachment8: No
      - otherorders_specify: "${prior_restrainingorders_family_other_specify}"
      - timeforservice: "${timeforservice_hearing or timeforservice_service}"
      - timeforservice_rfo_days: "${timeforservice_service_days}"
      - timeforservice_rfo: "${timeforservice_service}"
      - timeforservice_hearingandservice_sooner: "${timeforservice_hearing}"
      - attachment9c: "${timeforservice_service}"
      - timeforservice_specify: "${timeforservice_specify}"
      - factstosupport: Yes
      - attachment10: No
      - factstosupport_specify: "${facts_to_support}"
      - date: "${current_datetime()}"
      - party_name2: "${pet.name}"
      - party_signature: |
          ${ pet.signature }
  
  - name: "FL-305, Temporary Emergency (Ex Parte) Orders"
    variable name: form_fl305
    filename: FL-305 Temporary Emergency (Ex Parte) Orders
    pdf template file: FL-305_Temporary_Emergency_Ex_Parte_Orders.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - party_name: "${pet.name}"
      - party_street_address: "${pet.address.address}"
      - party_state: "${pet.address.state}"
      - party_city: "${pet.address.city}"
      - party_zip: "${pet.address.zip}"
      - party_phone: "${pet.phone}"
      - party_email: "${pet.email}"
      - in_pro_per_or_se: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${court.address.city}, CA ${court.address.zip}"
      - court_name: "${court.name.text}"
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - otherparent_name: "${otherparent.name}"
      - exparte_childcustody: "${custodyvisitation_requesting_exparte_orders}"
      - exparte_visitation: "${custodyvisitation_requesting_exparte_orders}"
      - exparte_propertycontrol: "${propertycontrol_requesting_exparte_orders}"
      - exparte_other: No
      - case_number: "${case_number}"
      - exparte_other_specify: |
      - exparte_to: |
          % if not any(child.otherparent_exists for child in children):
          ${resp.name}
          % elif any(child.otherparent_exists for child in children) and custodyvisitation_requesting_exparte_orders:
          ${otherparent.name}
          % endif
      - exparte_to_other: "${any(child.otherparent_exists for child in children) and custodyvisitation_requesting_exparte_orders}"
      - exparte_to_resp: "${not any(child.otherparent_exists for child in children)}"
      - exparte_to_pet: No
      - exparte_to_otherparent: "${any(child.otherparent_exists for child in children) and custodyvisitation_requesting_exparte_orders}"
      - childcustody: "${custodyvisitation_requesting_exparte_orders}"
      - child0_custody_to_pet: "${child.type_of_physical_custody == 'solephysicalcustody_to_pet'}"
      - child0_custody_to_resp: "${not children.item(0).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child0_custody_to_otherparent: "${children.item(0).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child0_birthdate: "${children.item(0).birthdate}"
      - child0_name: "${children.item(0).name}"
      - child1_custody_to_otherparent: "${children.item(1).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child1_custody_to_resp: "${not children.item(1).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child1_custody_to_pet: "${child.type_of_physical_custody == 'solephysicalcustody_to_pet'}"
      - child1_birthdate: "${children.item(1).birthdate}"
      - child1_name: "${children.item(1).name}"
      - child2_custody_to_pet: "${child.type_of_physical_custody == 'solephysicalcustody_to_pet'}"
      - child2_custody_to_resp: "${not children.item(2).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child2_custody_to_otherparent: "${children.item(2).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child2_birhtdate: "${children.item(2).birthdate}"
      - child2_name: "${children.item(2).name}"
      - child3_custody_to_pet: "${child.type_of_physical_custody == 'solephysicalcustody_to_pet'}"
      - child3_custody_to_resp: "${not children.item(3).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child3_custody_to_otherparent: "${children.item(3).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child3_birthdate: "${children.item(3).birthdate}"
      - child3_name: "${children.item(3).age}"
      - child4_birthdate: "${children.item(4).birthdate}"
      - child4_name: "${children.item(4).name}"
      - child4_custody_to_pet: "${child.type_of_physical_custody == 'solephysicalcustody_to_pet'}"
      - child4_custody_to_resp: "${not children.item(4).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - child4_custody_to_otherparent: "${children.item(4).otherparent_exists and child.type_of_physical_custody == 'solephysicalcustody_to_otherparent'}"
      - more_than_five_children: "${children.target_number > 5}"
      - visitation: "${visitation_exparte_orders}"
      - visitation_specify: "${visitation_exparte_orders_specify}"
      - attachment3b: No
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - otherparent_name2: "${otherparent.name}"
      - case_number2: "${case_number}"
      - childcustody_continued: "${custodyvisitation_requesting_exparte_orders}"
      - travelrestrictions_resp: "${(not any(child.otherparent_exists for child in children)) and notravel_another_state or child_abduction_risk}"
      - travelrestrictions_pet: No
      - travelrestrictions_otherparent: "${any(child.otherparent_exists for child in children) and notravel_another_state or child_abduction_risk}"
      - travelrestrictions_ca: "${notravel_another_state}"
      - travelrestrictions_counties_specify: "${notravel_another_CA_county_specify}"
      - travelrestrictions_counties: "${notravel_another_CA_county}"
      - travelrestrictions_other_specify: "${travel_with_children_other_specify}"
      - travelrestrictions_other: "${travel_with_children_other}"
      - fl341b: "${child_abduction_risk}"
      - children_live_outside_us: No
      - children_live_in_us: Yes
      - propertycontrol: "${propertycontrol_requesting_exparte_orders}"
      - propertycontrol_resp: Yes
      - propertycontrol_otherparent: No
      - propertycontrol_pet: Yes
      - propertycontrol_rent: "${propertycontrol_property_ownership == 'propertycontrol_property_ownership_own'}"
      - propertycontrol_own: "${propertycontrol_property_ownership == 'propertycontrol_property_ownership_lease'}"
      - propertycontrol_specify: "${propertycontrol_property}"
      - debtpayment_otherparent: "${any(item.debtor == 'other' for item in debtsandliens)}"
      - debtpayment_resp: "${any(item.debtor == 'resp' for item in debtsandliens)}"
      - debtpayment_pet: "${any(item.debtor == 'pet' for item in debtsandliens)}"
      - debt0_payto: "${debtsandliens.item(0).pay_to}"
      - debt0_for: "${debtsandliens.item(0).name.text}"
      - debt0_amount: "${debtsandliens.item(0).amount}"
      - debt0_duedate: "${debtsandliens.item(0).due}"
      - debt1_for: "${debtsandliens.item(1).name.text}"
      - debt1_duedate: "${debtsandliens.item(1).due}"
      - debt1_payto: "${debtsandliens.item(1).pay_to}"
      - debt1_amount: "${debtsandliens.item(1).amount}"
      - debt2_for: "${debtsandliens.item(2).name.text}"
      - debt2_duedate: "${debtsandliens.item(2).due}"
      - debt2_payto: "${debtsandliens.item(2).pay_to}"
      - debt2_amount: "${debtsandliens.item(2).amount}"
      - debt3_for: "${debtsandliens.item(3).name.text}"
      - debt3_duedate: "${debtsandliens.item(3).due}"
      - debt3_payto: "${debtsandliens.item(3).pay_to}"
      - debt3_amount: "${debtsandliens.item(3).amount}"
      - all_other_orders: Yes
      - other_orders: "${other_exparte_orders}"
      - attachment6: No
      - other_orders_specify: "${other_exparte_orders_specify}"

  
  - name: "FL-303, Declaration Regarding Notice and Service of Request for Temporary Emergency (Ex Parte) Orders"
    variable name: form_fl303
    filename: FL-303, Declaration Regarding Notice and Service of Request for Temporary Emergency (Ex Parte) Orders
    pdf template file: FL-303_Declaration_Regarding_Notice_and_Service_of_Request_for_Temporary_Emergency_Ex_Parte_Orders.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - party_name: "${pet.name}"
      - party_street_address: "${pet.address.address}"
      - party_state: "${pet.address.state}"
      - party_city: "${pet.address.state}"
      - party_zip: "${pet.address.zip}"
      - party_phone: "${pet.phone}"
      - party_email: "${pet.email}"
      - in_pro_per_or_se: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${court.address.city}, CA ${court.address.zip}"
      - court_name: "${court.name.text}"
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - otherparent_name: "${otherparent.name}"
      - case_number: "${case_number}"
      - respondent: No
      - otherparent: No
      - petitioner: Yes
      - did_not_give_notice: "${}"
      - did_give_notice: "${}"
      - exparte_hearing: "${}"
      - exparte_papers: "${}"
      - exparte_orders: "${}"
      - reschedule_hearing: "${}"
      - reschedule_exparte_hearing: "${}"
      - hearing_room: "${}"
      - hearing_date: "${}"
      - hearing_time: "${}"
      - hearing_department: "${}"
      - room: "${}"
      - department: "${}"
      - different_court_address_specify: "${}"
      - same_court_address: "${}"
      - different_court_address: "${}"
      - gave_notice: "${}"
      - notice_to_pet: "${}"
      - notice_to_pets_attorney: "${}"
      - notice_to_resp: "${}"
      - notice_to_resps_attorney: "${}"
      - notice_to_otherparent: "${}"
      - notice_to_otherparents_attorney: "${}"
      - notice_to_childsattorney: "${}"
      - notice_to_other_specify: "${}"
      - notice_to_other: "${}"
      - notice_date: "${}"
      - notice_time: "${}"
      - notice_time_pm: "${}"
      - notice_time_am: "${}"
      - notice_personally_location: "${}"
      - notice_personally: "${}"
      - notice_phone_number: "${}"
      - notice_phone: "${}"
      - notice_fax_number: "${}"
      - notice_fax: "${}"
      - notice_voicemail_number: "${}"
      - notice_voicemail: "${}"
      - notice_electronic_address: "${}"
      - notice_electronic: "${}"
      - notice_overnightmail: "${}"
      - notice_overnightmail_address: "${}"
      - by_ten_am: "${}"
      - after_10_am: "${}"
      - after_10_am_specify: "${}"
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - case_number2: "${case_number}"
      - otherparent_name2: "${otherparent.name}"
      - requesting_exparte_specify: "${}"
      - attachment3a5: "${}"
      - response_to_request_specify: "${}"
      - response_will_not_oppose: "${}"
      - response_will_oppose: "${}"
      - waiver_of_notice: "${}"
      - immediate_danger: "${}"
      - immediate_abduction_risk: "${}"
      - immediate_property_loss: "${}"
      - other_exceptional_circumstances: "${}"
      - other_exceptional_circumstances_specify: "${}"
      - attachment3b: "${}"
      - other_exceptional_circumstances_factstosupport: "${}"
      - unable_to_provide_notice: "${}"
      - attachment3c: "${}"
      - unable_to_provide_notice_specify: "${}"
      - service_of_documents: "${}"
      - served_on_pet: "${}"
      - served_on_otherparent: "${}"
      - served_on_pets_attorney: "${}"
      - served_on_otherparents_attorney: "${}"
      - served_on_resp: "${}"
      - served_on_resps_attorney: "${}"
      - served_on_childs_attorney: "${}"
      - served_on_other: "${}"
      - served_on_other_specify: "${}"
      - copies_of_fl300_fl305: "${}"
      - copies_of_fl309_fl306: "${}"
      - copies_of_fl309_fl307: "${}"
      - other_documents: "${}"
      - other_documents_specify: "${}"
      - otherdocuments_servedon_date: "${}"
      - otherdocuments_servedon_time: "${}"
      - otherdocuments_servedon_time_am: "${}"
      - otherdocuments_servedon_time_pm: "${}"
      - documentsserved_personally: "${}"
      - documentsserved_personally_location: "${}"
      - documentsserved_fax: "${}"
      - documentsserved_fax_number: "${}"
      - documentsserved_electronically: "${}"
      - documentsserved_electronically_address: "${}"
      - documentsserved_overnightmail: "${}"
      - documentsserved_overnightmail_address: "${}"
      - 3b: "${}"
      - 3c: "${}"
      - attachment4c: "${}"
      - date: "${}"
      - party_name2: "${pet.name}"
      - party_signature: |
          ${ pet.signature }
  
  - name: "FL-330, Proof of Personal Service"
    variable name: form_fl330
    filename: FL-330, Proof of Personal Service
    pdf template file: FL-330_Proof_of_Personal_Service.pdf
    skip undefined: true
    valid formats: 
      - pdf
    fields:
      - party_name: "${pet.name}"
      - party_street_address: "${pet.address.address}"
      - party_city_state_zip: "${pet.address.city}, ${pet.address.state} ${pet.address.zip}"
      - party_phone: "${pet.phone}"
      - in_pro_per_or_se: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${court.address.city}, CA ${court.address.zip}"
      - court_name: "${court.name.text}"
      - pet_name: "${pet.name}"
      - case_number: "${case_number}"
      - resp_name: "${resp.name}"
      - otherparent_name: "${otherparent.name}"
      - hearing_date: "${}"
      - hearing_time: "${}"
      - department: "${}"
      - person_served: "${}"
      - documents: "${}"
      - date_served: "${}"
      - time_served: "${}"
      - address_served: "${}"
      - not_process_server: "${}"
      - exempt_from_registration: "${}"
      - registered_process_server: "${}"
      - employee_of_process_server: "${}"
      - ca_sheriff_or_marshal: "${}"
      - county_of_registration: "${}"
      - server_name: "${}"
      - registration_number: "${}"
      - server_street_address: "${}"
      - server_city_state_zip: "${}"
      - server_phone: "${}"
      - i_declare: "${}"
      - ca_sheriff: "${}"
      - date: "${}"
      - server_name2: "${}"
      - SIGNATURE OF PERSON WHO SERVED THE PAPERS: |

  - name: "FL-115, Proof of Service of Summons"
    variable name: form_fl115
    filename: FL-115, Proof of Service of Summons
    pdf template file: FL-115_PROOF_OF_SERVICE_OF_SUMMONS_Family_LawUniform_ParentageCustody_and_Support.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - pet_address: "${pet.address.block()}"
      - pet_phone: "${pet.phone}"
      - pet_email: "${pet.email}"
      - in_pro_per: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: |
         ${ court.address.city }, CA ${court.address.zip} 
      - court_name: "${court.name.text}"
      - pet_name1: "${pet.name}"
      - resp_name1: "${resp.name}"
      - case_number: "${case_number}"
      - divorce_petition: Yes
      - parentage_petition: No
      - attachment_forms: Yes
      - fl105: "${children.there_are_any}"
      - fl155: No
      - fl160: Yes
      - fl140: Yes
      - fl300: "${custodyvisitation_requesting_temporary_orders or childsupport_requesting_temporary_orders or spousalsupport_requesting_temporary_orders or propertycontrol_requesting_temporary_orders or requesting_attorneysfees or prior_restrainingorders_family_change}"
      - fl142: No
      - fl150: No
      
      - other_attachments: "${children.there_are_any or child_abduction_risk or holiday_schedule or additional_physical_custody_provisions or joint_legal_custody_provisions or custodyvisitation_requesting_exparte_orders or propertycontrol_requesting_exparte_orders or ss_to_pet or ss_to_resp}"
           
      - service_address: 
      - personal_service: 
      - personalservice_date: 
      - personalservice_time: 
      - substituted_service: 
      - substitutedservice_name:
      - substitutedservice_relationship: 
      - subservice_business: 
      - subservice_home: 
      - pet_name2: "${pet.name}"
      - case_number2: "${case_number}"
      - resp_name2: "${resp.name}"
      - substitutedservice_date: 
      - substitutedservice_time: 
      - substitutedservice_mailing_date: 
      - mail_service: 
      - mailservice_mailing_city: 
      - mailservice_mailing_date: 
      - fl117: 
      - service_address_outside_ca: 
      - notice_to_the_person_served:
      - servers_name: 
      - servers_address: 
      - servers_phone_number: 
      - exempt_from_registration:
      - not_registered_process_server: 
      - employee: 
      - independent_contractor: 
      - registered_process_server:
      - registration_number: 
      - registration_county: 
      - service_fee: 
      - I_declare: 
      - sheriff: 
      - date: 
      - printed_servers_name:
      - party_signature: 
    field code:
      - other_attachments_specify: "posattachments"

  - name: "FL-335, Proof of Service by Mail"
    variable name: form_fl335
    filename: FL-335 Proof of Service by Mail
    pdf template file: FL-335_Proof_of_Service_by_Mail.pdf
    skip undefined: true
    valid formats: 
      - pdf
    fields:
      - party_name: "${pet.name}"
      - party_street_address: "${pet.address.address}"
      - party_city_state_zip: "${pet.address.city}, ${pet.address.state}, ${pet.address.zip}"
      - party_phone: "${pet.phone}"
      - party_email: "${pet.email}"
      - in_pro_per_or_se: "In Pro Per"
      - court_county: "${court.address.county}"
      - court_street_address: "${court.address.address}"
      - court_mailing_address: "${court.address.mailing}"
      - court_city_state_zip: "${court.address.city}, CA ${court.address.zip}"
      - court_name: "${court.name.text}"
      - pet_name: "${pet.name}"
      - case_number: "${case_number}"
      - resp_name: "${resp.name}"
      - otherparent_name: "${otherparent.name}"
      - hearing_date: |
      - hearing_time: |
      - department: |
      - server_street_address: |
      - server_city_state_zip2: |
      - Documents: |
      - depositing_envelope_with_usps: |
      - placing_envelope_for_collection: |
      - service_party_served_name: |
      - service_address_line1: |
      - service_address_line2: |
      - service_date_mailed: |
      - service_place_of_mailing: |
      - fl334: |
      - date: |
      - server_signature: |
      - server_name: |
  
  - name: "FL-319, Request for Attorneys Fees and Costs Attachment"
    variable name: form_fl319
    filename: FL-319, Request for Attorneys Fees and Costs Attachment
    pdf template file: FL-319_Request_for_Attorneys_fees_and_costs_attachment_Family_Law.pdf
    skip undefined: true
    valif formats: 
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - case_number: "${case_number}"
      - otherparent_name: "${otherparent.name}"
      - receiving_probono_services: "${}"
      - party_to_pay_attorneysfees_pet: No
      - party_to_pay_attorneysfees_resp: "${attorneys_fees_party_resp}"
      - party_to_pay_attorneysfees_other_specify: |
          % if not attorneys_fees_party_resp:
          ${attorneys_fees_party_other}
          % endif
      - party_to_pay_attorneysfees_other: "${not attorneys_fees_party_resp}"
      - fees_amount: "${attorneysfees_fees_amount}"
      - fees: Yes
      - costs_amount: "${attorneysfees_costs_amount}"
      - costs: Yes
      - fees_before_proceeding_amount: "${fees_before_proceeding_amount}"
      - fees_before_proceeding: "${fees_before_proceeding}"
      - fees_from_beginning_to_now: "${fees_from_beginning_to_now}"
      - fees_from_beginning_to_now_amount: "${fees_from_beginning_to_now_amount}"
      - fees_estimated: "${fees_estimated}"
      - fees_estimated_amount: "${fees_estimated_amount}"
      - fees_limited_scope_representation: "${fees_limited_scope_representation}"
      - fees_limited_scope_representation_amount: "${fees_limited_scope_representation_amount}"
      - no_prior_attorneys_fees: "${not prior_attorneysfees}"
      - prior_attorneys_fees: "${prior_attorneysfees}"
      - prior_attorneys_fees_paid_by_other: "${any(child.otherparent_exists for child in children) and not prior_attorneysfees_resp}"
      - prior_attorneys_fees_paid_by_resp: "${prior_attorneysfees_resp}"
      - prior_attorneys_fees_paid_by_pet: No
      - prior_attorneys_fees_amount: "${prior_attorneysfees_amount}"
      - prior_attorneys_fees_date: "${prior_attorneysfees_date}"
      - prior_attorneys_fees_payment_sources: "${prior_attorneysfees_paymentsources}"
      - prior_attorneys_fees_payments_in_part: "${prior_attorneysfees_payments == 'prior_attorneysfees_paymentinpart'}"
      - prior_attorneys_fees_payments_have_been_made: "${prior_attorneysfees_payments == 'prior_attorneysfees_paymentsmade'}"
      - prior_attorneys_fees_payments_have_not_been_made: "${prior_attorneysfees_payments == 'prior_attorneysfees_paymentsnotmade'}"
      - prior_attorneys_fees_additional_information: "${prior_attorneysfees_additionalinfo}"
      - prior_attorneys_fees_additional_information_specify: "${prior_attorneysfees_additionalinfo_specify}"
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - case_number2: "${case_number}"
      - otherparent_name2: "${otherparent.name}"
      - pages_attached: "${}"
      - date: "${current_datetime()}"
      - SIGNATURE: |
          ${ pet.signature }
      - party_name: "${pet.name}"
      
  - name: "FL-158, Supporting Declaration for Attorney's Fees and Costs Attachment"
    variable name: form_fl158
    filename: FL-158, Supporting Declaration for Attorney's Fees and Costs Attachment
    pdf template file: FL-158_SUPPORTING_DECLARATION_FOR_ATTORNEY_S_FEES_AND_COSTS_ATTACHMENT_Family_Law.pdf
    skip undefined: true
    valif formats: 
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - resp_name: "${resp.name}"
      - case_number: "${case_number}"
      - otherparent_name: "${otherparent}"
      - fl319: Yes
      - fl320: No
      - petitioner: Yes
      - respondent: No
      - otherparty: No
      - deny: No
      - grant: Yes
      - grant_in_part: No
      - in_opposition_to: No
      - in_support_of: Yes
      - abilitytopay_pet: No
      - abilitytopay_resp: "${attorneys_fees_party_resp}"
      - abilitytopay_otherparty: "${attorneys_fees_party_other}"
      - abilitytopay_my_attorneys_fees: "${attorneys_fees_party_other}"
      - abilitytopay_their_own_attorneys_fees: No
      - abilitytopay_both_our_attorneys_fees: "${attorneys_fees_party_resp}"
      - abilitytopay_other: No
      - abilitytopay_other_specify: |
      - payment_sources: "${payment_sources}"
      - factstosupport_attachment: |
      - factstosupport: "${attorneysfees_factstosupport}"
      - factstosupport_requesting_payment_from_other_attachment: |
      - factstosupport_requesting_payment_from_other: "${attorneysfees_factstosupport_other}"
      - pet_name2: "${pet.name}"
      - resp_name2: "${resp.name}"
      - case_number2: "${case_number}"
      - otherparent_name2: "${otherparent.name}"
      - no_cs_order: "${not currentcsorder}"
      - prior_cs_order: "${currentcsorder}"
      - prior_cs_from_other: "${not currentcsorder_party_resp}"
      - prior_cs_from_resp: "${currentcsorder_party_resp}"
      - prior_cs_from_pet: No
      - prior_cs_order_amount: "${currentcsorder_amount}"
      - prior_cs_order_date: "${currentcsorder_date}"
      - prior_cs_payments_have_not_been_made: "${currentcsorder_payments == 'currentcsorder_paymentsnotmade'}"
      - prior_cs_payments_made_in_part: "${currentcsorder_payments == 'currentcsorder_paymentinpart'}"
      - prior_cs_payments_have_been_made: "${currentcsorder_payments == 'currentcsorder_paymentsmade'}"
      - prior_cs_order_additional_info: "${currentcsorder_additionalinfo}"
      - prior_cs_order_additional_info_specify: "${currentcsorder_additionalinfo_specify}"
      - no_prior_ss_order: "${not currentssorder}"
      - prior_ss_order: "${currentssorder}"
      - prior_ss_order_amount: "${currentssorder_amount}"
      - prior_ss_from_resp: Yes
      - prior_ss_from_other: No
      - prior_ss_from_pet: No
      - prior_ss_partner: "${currentssorder_type == 'currentssorder_type_partner'}"
      - prior_ss_spousal: "${currentssorder_type == 'currentssorder_type_spousal'}"
      - prior_ss_family: "${currentssorder_type == 'currentssorder_type_family'}"
      - prior_ss_order_date: "${currentssorder_date}"
      - prior_ss_payments_have_been_made: "${currentssorder_payments == 'currentssorder_paymentsmade'}"
      - prior_ss_payments_made_in_part: "${currentssorder_payments == 'currentssorder_paymentinpart'}"
      - prior_ss_payments_have_not_been_made: "${currentssorder_payments =='currentssorder_paymentsnotmade'}"
      - prior_ss_order_additional_info: "${currentssorder_additionalinfo}"
      - prior_ss_order_additional_info_specify: "${currentssorder_additionalinfo_specify}"
      - pages_attached: "${}"
      - date: "${current_datetime()}"
      - party_name: "${pet.name}"
      - SIGNATURE: |
          ${ pet.signature }
          
  - name: "FL-157, Spousal or Domestic Partner Support Declaration Attachment" 
    variable name: form_fl157
    filename: FL-157, Spousal or Domestic Partner Support Declaration Attachment
    pdf template file: FL-157_SPOUSAL_OR_DOMESTIC_PARTNER_SUPPORT_DECLARATION_ATTACHMENT.pdf
    skip undefined: true
    valid formats:
      - pdf
    fields:
      - pet_name: "${pet.name}"
      - case_number: "${case_number}"
      - resp_name: "${resp.name}"
      - attachment_to_fl158: No
      - attachment_to_fl170: No
      - attachment_to_fl300: Yes
      - attachment_to_other_specify: |
      - attachment_to_other: No
      - party_resp: No
      - party_pet: Yes
      - party_support_payor: "${ss_to_resp}"
      - party_support_payee: "${ss_to_pet}"
      - enter_judgment_ss_to_pet: "${ss_to_pet}"
      - enter_judgment_ss_to_resp: "${ss_to_resp}"
      - enter_judgment_ss_to: "${ss_to_pet or ss_to_resp}"
      - modify_judgment_ss_to_resp: No
      - modify_judgment_ss_to_pet: No
      - modify_judgment_ss_to: No
      - deny_modification_to_judgment: No
      - terminate_ss_to_resp: "${terminate_ss_to_resp}"
      - terminate_ss_to_pet: "${terminate_ss_to_pet}"
      - terminate_ss_to: "${terminate_ss_to_pet or terminate_ss_to_resp}"
      - attorneysfees: "${requesting_attorneysfees}"
      - attorneysfees2: "${requesting_attorneysfees}"
      - attorneysfees_paid_by_resp: "${requesting_attorneysfees and attorneys_fees_party_resp}"
      - attorneysfees_paid_by_other: "${requesting_attorneysfees and not attorneys_fees_party_resp}"
      - attorneysfees_paid_by_other_specify: |
          % if not attorneys_fees_party_resp:
          ${attorneys_fees_party_other}
          % endif
      - deny_attorneysfees: No
      - date_of_marriage: "${date_of_marriage}"
      - date_of_separation_marriage: "${date_of_separation_marriage}"
      - marriage_years: |
      - marriage_months: |
      - date_of_dp: "${date_of_dp}"
      - date_of_separation: "${date_of_separation_dp}"
      - dp_years: |
      - dp_months: |
      - combined_years: |
      - combined_months: |
      - attachment4: "${msol_ms}"
      - marital_standard_of_living: |
          % if msol_ms:
          ${msol} (See Attachment)
          % else:
          ${msol}
          % endif
      - pet_name2: "${pet.name}"
      - case_number2: "${case_number}"
      - resp_name2: "${resp.name}"
      - supportedparty_age: |
          % if ss_to_pet:
          ${pet.age_in_years()}
          % elif ss_to_resp:
          ${resp.age_in_years()}
          % endif
      - supportingparty_age: |
          % if ss_to_pet:
          ${resp.age_in_years()}
          % elif ss_to_resp:
          ${pet.age_in_years()}
          % endif
      - attachment5: "${(ss_to_pet and healthcondition_pet_ms) or (ss_to_resp and healthcondition_resp_ms)}"
      - supportedparty_health: |
          % if ss_to_pet:
          ${healthcondition_pet}
          % elif ss_to_pet and healthcondition_pet_ms:
          ${healthcondition_pet} (See Attachment)
          % elif ss_to_resp:
          ${healthcondition_resp}
          % elif ss_to_resp and healthcondition_resp_ms:
          ${healthcondition_resp} (See Attachment)
          % endif
      - attachment5d: "${(ss_to_pet and healthcondition_resp_ms) or (ss_to_resp and healthcondition_pet_ms)}"
      - supportingparty_health: |
          % if ss_to_pet:
          ${healthcondition_resp}
          % elif ss_to_resp:
          ${healthcondition_pet}
          % endif
      - attachment6: "${documented_history_of_dv}"
      - felony_conviction: "${felonyconviction_petsupported or felonyconviction_respsupported}"
      - misdemeanor: "${misdemeanorconviction_petsupported or misdemeanorconviction_respsupported}"
      - attachment7b: "${ misdemeanorconviction_petsupported_rebut}"
      - presumption_not_rebutted: "${misdemeanorconviction_respsupported_rebut}"
      - presumption_rebutted: "${ misdemeanorconviction_petsupported_rebut}"
      - pet_name3: "${pet.name}"
      - case_number3: "${case_number}"
      - resp_name3: "${resp.name}"
      - attachment8a: "${(ss_to_pet and marketableskills_pet_ms) or (ss_to_resp and marketableskills_resp_ms)}"
      - supportedparty_marketableskills: |
          % if ss_to_pet:
          ${marketableskills_pet}
          % elif ss_to_pet and marketableskills_pet_ms:
          ${marketableskills_pet} (See Attachment)
          % elif ss_to_resp and marketableskills_resp_ms:
          ${marketableskills_resp} (See Attachment)
          % elif ss_to_resp:
          ${marketableskills_resp}
          % endif
      - attachment8b: "${(ss_to_pet and jobmarket_pet_ms) or (ss_to_resp and jobmarket_resp_ms)}"
      - supportedparty_jobmarket: |
          % if ss_to_pet:
          ${jobmarket_pet}
          % elif ss_to_pet and jobmarket_pet_ms:
          ${jobmarket_pet} (See Attachment)
          % elif ss_to_resp:
          ${jobmarket_resp}
          % elif ss_to_resp and jobmarket_resp_ms:
          ${jobmarket_resp} (See Attachment)
          % endif
      - attachment8c: "${(ss_to_pet and trainingexpenses_pet_ms) or (ss_to_resp and trainingexpenses_resp_ms)}"
      - supportedparty_trainingandeducation_cost: |
          % if ss_to_pet:
          ${trainingexpenses_pet}
          % elif ss_to_pet and trainingexpenses_pet_ms:
          ${trainingexpenses_pet} (See Attachment)
          % elif ss_to_resp:
          ${trainingexpenses_resp}
          % elif ss_to_resp and trainingexpenses_resp_ms:
          ${trainingexpenses_resp} (See Attachment)
          % endif
      - attachment8d: "${(ss_to_pet and retraining_pet_ms) or (ss_to_resp and retraining_resp_ms)}"
      - supportedparty_trainingandeducation_need: |
          % if ss_to_pet:
          ${retraining_pet}
          % elif ss_to_pet and retraining_pet_ms:
          ${retraining_pet} (See Attachment)
          % elif ss_to_resp:
          ${retraining_resp}
          % elif ss_to_resp and retraining_resp_ms:
          ${retraining_resp} (See Attachment)
          % endif
      - supportedparty_earningcapacity: |
          % if ss_to_pet:
          ${msolearningcapacity_pet}
          % elif ss_to_pet and msolearningcapacity_pet_ms:
          ${msolearningcapacity_pet} (See Attachment)
          % elif ss_to_resp:
          ${msolearningcapacity_resp}
          % elif ss_to_resp and msolearningcapacity_resp_ms:
          ${msolearningcapacity_resp} (See Attachment)
          % endif
      - pet_name4: "${pet.name}"
      - case_number4: "${case_number}"
      - resp_name4: "${resp.name}"
      - attachment9: "${(ss_to_pet and domesticduties_pet_specify_ms) or (ss_to_resp and domesticduties_resp_specify_ms)}"
      - wasnt_unemployed_for_domestic_duties: "${(ss_to_pet and not domesticduties_pet) or (ss_to_resp and not domesticduties_resp)}"
      - unemployed_for_domestic_duties: "${(ss_to_pet and domesticduties_pet) or (ss_to_resp and domesticduties_resp)}"
      - unemployed_for_domestic_duties_specify: |
          % if ss_to_pet:
          ${domesticduties_pet_specify}
          % elif ss_to_pet and domesticduties_pet_specify_ms:
          ${domesticduties_pet_specify} (See Attachment)
          % elif ss_to_resp:
          ${domesticduties_resp_specify}
          % elif ss_to_resp and domesticduties_resp_specify_ms:
          ${domesticduties_resp_specify} (See Attachment)
          % endif
      - attachment10: "${(ss_to_pet and trainingcontributions_pet_specify_ms) or (ss_to_resp and trainingcontributions_resp_specify_ms)}"
      - supportedparty_contributed_to_supportingpartys_education: "${(ss_to_pet and trainingcontributions_pet) or (ss_to_resp and trainingcontributions_resp)}"
      - supportedparty_didnt_contribute_to_supportingpartys_education: "${(ss_to_pet and not trainingcontributions_pet) or (ss_to_resp and not trainingcontributions_resp)}"
      - supportedparty_contributed_to_supportingpartys_education_specify: |
          % if ss_to_pet:
          ${trainingcontributions_pet_specify}
          % elif ss_to_pet and trainingcontributions_pet_specify_ms:
          ${trainingcontributions_pet_specify} (See Attachment)
          % elif ss_to_resp:
          ${trainingcontributions_resp_specify}
          % elif ss_to_resp and trainingcontributions_resp_specify_ms:
          ${trainingcontributions_resp_specify} (See Attachment)
          % endif
          
      - attachment11: "${(ss_to_pet and gainfullyemployed_pet_specify) or (ss_to_resp and gainfullyemployed_resp_specify)}"
      - wasnt_unemployed_for_childcare: "${(ss_to_pet and not careforchildren_pet) or (ss_to_resp and not careforchildren_resp)}"
      - unemployed_for_childcare: "${(ss_to_pet and careforchildren_pet) or (ss_to_resp and careforchildren_resp)}"
      - employment_not_in_best_interests_of_child: "${(ss_to_pet and not gainfullyemployed_pet) or (ss_to_resp and not gainfullyemployed_resp)}"
      - employment_in_best_interests_of_child: "${(ss_to_pet and gainfullyemployed_pet) or (ss_to_resp and gainfullyemployed_resp)}"
      - employment_in_best_interests_of_child_specify: |
          % if ss_to_pet:
          ${gainfullyemployed_pet_specify}
          % elif ss_to_pet and gainfullyemployed_pet_specify_ms:
          ${gainfullyemployed_pet_specify} (See Attachment)
          % elif ss_to_resp:
          ${gainfullyemployed_resp_specify}
          % elif ss_to_resp and gainfullyemployed_resp_specify_ms:
          ${gainfullyemployed_resp_specify} (See Attachment)
          % endif
      - attachment12: "${(ss_to_pet and msolneeds_pet_supported_ms) or (ss_to_resp and msolneeds_resp_supported_ms)}"
      - supportedparty_needs: |
          % if ss_to_pet:
          ${msolneeds_resp_supporting}
          % elif ss_to_pet and msolneeds_resp_supporting_ms:
          ${msolneeds_resp_supporting} (See Attachment)
          % elif ss_to_resp:
          ${msolneeds_pet_supporting}
          % elif ss_to_resp and msolneeds_pet_supporting_ms:
          ${msolneeds_pet_supporting} (See Attachment)
          % endif
      - attachment13: |
      - supportedparty_assets: "See Attached FL-160s, Property Declaration forms"
      - pet_name5: "${pet.name}"
      - case_number5: "${case_number}"
      - resp_name5: "${resp.name}"
      - supportedparty_debts: "See Attached FL-160s, Property Declaration forms"
      - attachment14: "${(ss_to_pet and taxconsequences_pet_supported_ms) or (ss_to_resp and taxconsequences_resp_supported_ms)}"
      - supportedparty_taxconsequences:  |
          % if ss_to_pet:
          ${taxconsequences_pet_supported}
          % elif ss_to_pet and taxconsequences_pet_supported_ms:
          ${taxconsequences_pet_supported} (See Attachment)
          % elif ss_to_resp:
          ${taxconsequences_resp_supported}
          % elif ss_to_resp and taxconsequences_resp_supported_ms:
          ${taxconsequences_resp_supported} (See Attachment)
          % endif
      - attachment15: "${(ss_to_pet and selfsupporting_pet_steps_ms) or (ss_to_resp and selfsupporting_resp_steps_ms)}"
      - long_term_marriage_or_dp: "${long_term_marriage or long_term_dp}"
      - not_a_long_term_marriage_or_dp: "${not long_term_marriage and not long_term_dp}"
      - supportedparty_is_selfsupporting: "${(ss_to_pet and selfsupporting_pet) or (ss_to_resp and selfsupporting_resp)}"
      - supportedparty_is_not_selfsupporting: "${(ss_to_pet and not selfsupporting_pet) or (ss_to_resp and not selfsupporting_resp)}"
      - supportedparty_is_not_selfsupporting_specify:  |
          % if ss_to_pet:
          ${selfsupporting_pet_steps}
          % elif ss_to_pet and selfsupporting_pet_steps_ms:
          ${selfsupporting_pet_steps} (See Attachment)
          % elif ss_to_resp:
          ${selfsupporting_resp_steps}
          % elif ss_to_resp and selfsupporting_pet_steps_ms:
          ${selfsupporting_resp_steps} (See Attachment)
          % endif
      - other_specify: |
      - pet_name6: "${pet.name}"
      - case_number6: "${case_number}"
      - resp_name6: "${resp.name}"
      - attachment16: "${(ss_to_pet and pet_maintaining_msol_specify_ms) or (ss_to_resp and resp_maintaining_msol_specify_ms)}"
      - supportingparty_earned_income:  |
          % if ss_to_pet and earnedincome_pet_known:
          ${earnedincome_pet_known_specify}
          % elif ss_to_resp:
          ${earnedincome_resp_known_specify}
          % endif
      - supportingparty_earned_income_unknown:  "${ss_to_pet and not earnedincome_pet_known}"
      - supportingparty_unearned_income_unknown:  "${ss_to_pet and not unearnedincome_pet_known}"
      - supportingparty_unearned_income:  |
          % if ss_to_pet and unearnedincome_pet_known:
          ${earnedincome_pet_known_specify}
          % elif ss_to_resp:
          ${unearnedincome_resp_known_specify}
          % endif
      - supportingparty_can_not_mantain_msol: "${(ss_to_pet and not pet_maintaining_msol) or (ss_to_resp and not resp_maintaining_msol)}"
      - supportingparty_can_mantain_msol: "${(ss_to_pet and pet_maintaining_msol) or (ss_to_resp and resp_maintaining_msol)}"
      - supportingparty_can_not_mantain_msol_specify:  |
          % if ss_to_pet and not pet_maintaining_msol:
          ${pet_maintaining_msol_specify}
          % elif ss_to_pet and not pet_maintaining_msol and pet_maintaining_msol_specify_ms:
          ${pet_maintaining_msol_specify} (See Attachment)
          % elif ss_to_resp and not resp_maintaining_msol:
          ${resp_maintaining_msol_specify}
          % elif ss_to_resp and not resp_maintaining_msol and resp_maintaining_msol_specify_ms:
          ${resp_maintaining_msol_specify} (See Attachment)
          % endif
      - supportingparty_can_pay_ss: "${(ss_to_pet and resp_maintaining_msol_specify) or (ss_to_resp and pet_maintaining_msol)}"
      - supportingparty_can_not_pay_ss: "${(ss_to_pet and not resp_maintaining_msol) or (ss_to_resp and not pet_maintaining_msol)}"
      - attachment17: "${(ss_to_pet and msolneeds_pet_supported_ms) or (ss_to_resp and msolneeds_resp_supported_ms)}"
      - supportingparty_needs:  |
          % if ss_to_pet:
          ${msolneeds_pet_supported} 
          % elif ss_to_pet and msolneeds_pet_supported_ms:
          ${msolneeds_pet_supported} (See Attachment)
          % elif ss_to_resp:
          ${msolneeds_resp_supported}
          % elif ss_to_resp and msolneeds_resp_supported_ms:
          ${msolneeds_resp_supported} (See Attachment)
          % endif
      - attachment18: |
      - supportingparty_assets: "See Attached FL-160s, Property Declaration forms"
      - supportingparty_debts: "See Attached FL-160s, Property Declaration forms"
      - attachment19: "${(ss_to_pet and taxconsequences_resp_supporting_ms) or (ss_to_resp and taxconsequences_pet_supporting_ms)}"
      - supportingparty_taxconsequences:  |
          % if ss_to_pet:
          ${taxconsequences_resp_supporting}
          % elif ss_to_pet and taxconsequences_resp_supporting_ms:
          ${taxconsequences_resp_supporting} (See Attachment)
          % elif ss_to_resp:
          ${taxconsequences_pet_supporting}
          % elif ss_to_resp and taxconsequences_pet_supporting_ms:
          ${taxconsequences_pet_supporting} (See Attachment)
          % endif
      - pet_name7: "${pet.name}"
      - case_number7: "${case_number}"
      - resp_name7: "${resp.name}"
      - attachment20: "${hardships_petsupported_ms or hardships_respsupported_ms}"
      - balance_of_hardships: |
          % if ss_to_pet:
          ${hardships_petsupported}
          % elif ss_to_pet and hardships_petsupported_ms:
          ${hardships_petsupported} (See Attachment)
          % elif ss_to_resp:
          ${hardships_respsupported}
          % elif ss_to_resp and hardships_respsupported_ms:
          ${hardships_respsupported} (See Attachment)
          % endif
      - attachment21: "${requesting_ss_other_ms}"
      - otherfactors:  |
          % if requesting_ss_other_ms:
          ${requesting_ss_other_specify} (See Attachment)
          % else:
          ${requesting_ss_other_specify}
          % endif
      - pages_attached: "${}"
  - name: Attachment to FL-157
    variable name: form_fl157_attachment
    filename: Attachment to FL-157
    docx template file: FL-157-Attachment-Template_1.docx
    skip undefined: true
    valid formats:
      - pdf
      - docx